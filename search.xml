<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构笔记</title>
      <link href="/2023/08/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h1><ul><li><code>e[n]</code>表示某个点的值 </li><li><code>ne[n]</code>表示某个点next指针</li><li>空节点下标用-1表示</li></ul><p><a href="https://imgse.com/i/pP80bLj"><img src="https://s1.ax1x.com/2023/08/20/pP80bLj.png" alt="pP80bLj.png"></a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表头插入一个数x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = x;</span><br><span class="line">ne[idx] = head;</span><br><span class="line">head = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将x插到下标是k的点后面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = x;</span><br><span class="line">ne[idx] = ne[k];</span><br><span class="line">ne[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将下标是k的点后面的点删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将头结点删除，需要保证头结点存在</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove_head</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = ne[head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="双链表（优化某些问题）"><a href="#双链表（优化某些问题）" class="headerlink" title="双链表（优化某些问题）"></a>双链表（优化某些问题）</h1><ul><li><code>l[n]</code>表示左指针</li><li><code>r[n]</code>表示右指针</li><li><code>e[n]</code>表示某个点的值</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="type">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//0是左端点，1是右端点</span></span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在节点a的右边插入一个数x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    l[idx] = a;</span><br><span class="line">    r[idx] = r[a];</span><br><span class="line">    l[r[a]] = idx;</span><br><span class="line">    r[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l[r[a]] = l[a];</span><br><span class="line">    r[l[a]] = r[a];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="栈（先进后出）"><a href="#栈（先进后出）" class="headerlink" title="栈（先进后出）"></a>栈（先进后出）</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tt表示栈顶</span></span><br><span class="line"><span class="type">int</span> stk[N], tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向栈顶插入一个数</span></span><br><span class="line">stk[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从栈顶弹出一个数</span></span><br><span class="line">tt -- ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈顶的值</span></span><br><span class="line">stk[tt];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空，如果 tt &gt; 0，则表示不为空</span></span><br><span class="line"><span class="keyword">if</span> (tt &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="队列（先进先出）"><a href="#队列（先进先出）" class="headerlink" title="队列（先进先出）"></a>队列（先进先出）</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hh 表示队头，tt表示队尾</span></span><br><span class="line"><span class="type">int</span> q[N], hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队尾插入一个数</span></span><br><span class="line">q[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队头弹出一个数</span></span><br><span class="line">hh ++ ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队头的值</span></span><br><span class="line">q[hh];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空，如果 hh &lt;= tt，则表示不为空</span></span><br><span class="line"><span class="keyword">if</span> (hh &lt;= tt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><p>常见模型：找出每个数左边离它最近的比它大/小的数     </p><p>将一个元素插入单调栈时，为了维护栈的单调性，需要在保证将该元素插入到栈顶后整个栈满足单调性的前提下弹出最少的元素。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> tt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (tt &amp;&amp; <span class="built_in">check</span>(stk[tt], i)) tt--;</span><br><span class="line">    stk[++tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h1><p>常见模型：找出滑动窗口中的最大值/最小值   </p><p>要求的是每连续的个数中的最大（最小）值，很明显，当一个数进入所要 “寻找” 最大值的范围中时，若这个数比其前面（先进队）的数要大，显然，前面的数会比这个数先出队且不再可能是最大值。  </p><p>也就是说——当满足以上条件时，可将前面的数 “弹出”，再将该数真正 push 进队尾。   </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="built_in">check_out</span>(q[hh])) hh ++ ;  <span class="comment">// 判断队头是否滑出窗口</span></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="built_in">check</span>(q[tt], i)) tt -- ;</span><br><span class="line">    q[ ++ tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="kmp"><a href="#kmp" class="headerlink" title="kmp"></a>kmp</h1><p>作用：字符串匹配   </p><p>关键点：前缀表（ne数组表示），寻找最长相等前后缀   </p><p>j表示前缀以及最长相等前后缀的长度，i表示后缀   </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度，数组从1开始</span></span><br><span class="line"><span class="comment">//求模式串的Next数组：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    ne[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    <span class="keyword">if</span> (j == m)</span><br><span class="line">    &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">        <span class="comment">// 匹配成功后的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字典树（Trie）"><a href="#字典树（Trie）" class="headerlink" title="字典树（Trie）"></a>字典树（Trie）</h1><p>快速插入和查询字符串的多叉树结构</p><ul><li>儿子数组<code>ch[p][j]</code>存储节点p沿着j这条边走到的子节点</li><li>计数数组<code>cnt[p]</code></li><li>节点编号idx</li></ul><p><a href="https://imgse.com/i/pP80Own"><img src="https://s1.ax1x.com/2023/08/20/pP80Own.png" alt="pP80Own.png"></a></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> ch[N][<span class="number">26</span>], cnt[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *s)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; s[i]; i++) &#123;</span><br><span class="line"><span class="type">int</span> j = s[i] - <span class="string">&#x27;a&#x27;</span>;<span class="comment">//字母映射</span></span><br><span class="line"><span class="keyword">if</span>(!ch[p][j])</span><br><span class="line">ch[p][j] = ++idx;<span class="comment">//如果没儿子，先创建儿子</span></span><br><span class="line">p = ch[p][j];<span class="comment">//走到儿子</span></span><br><span class="line">&#125;</span><br><span class="line">cnt[p]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> *s)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; s[i]; i++) &#123;</span><br><span class="line"><span class="type">int</span> j = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!ch[p][j])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">p = ch[p][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p>支持合并和查找的树形结构</p><ul><li><code>fa[x]</code>存子节点x的父节点</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="comment">// 初始化时每个节点都是一个集合，每个节点的父节点都是自己</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">fa[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找（未优化，理解思路）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x] == x)<span class="comment">// 父节点等于自己则为根，返回</span></span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">find</span>(fa[x]);<span class="comment">// 递归查找</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径压缩优化</span></span><br><span class="line"><span class="comment">// 在返回的路上，顺带修改各节点的父节点为根</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x] == x)</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并（未优化,但竞赛中适用）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionset</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">fa[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启发式合并</span></span><br><span class="line"><span class="comment">//将小集合的根指向大集合的根</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">siz</span>(N, <span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionset</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span>(x == y)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(siz[x] &gt; siz[y])</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line">fa[x] = y;</span><br><span class="line">siz[y] += siz[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><ul><li>完全二叉树</li><li>小根堆：父节点的值&lt;=其子节点的值</li><li>大根堆：父节点的值&gt;=其子节点的值</li><li>左右孩子编号法<ul><li>节点i的左孩子是2i</li><li>节点i的右孩子是2i+1</li><li>节点i的父节点是i/2</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入：把新元素从堆尾插入，再逐层上浮到合适位置</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">1000010</span>], cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;<span class="comment">//上浮</span></span><br><span class="line"><span class="keyword">if</span>(u / <span class="number">2</span> &amp;&amp; a[u / <span class="number">2</span>] &gt; a[u]) &#123;</span><br><span class="line"><span class="built_in">swap</span>(a[u], a[u / <span class="number">2</span>]);</span><br><span class="line"><span class="built_in">up</span>(u / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">//压入</span></span><br><span class="line">a[++cnt] = x;</span><br><span class="line"><span class="built_in">up</span>(cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除：把尾元素移到根上，再逐层下沉到合适位置</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;<span class="comment">//下沉</span></span><br><span class="line"><span class="type">int</span> v = u;</span><br><span class="line"><span class="keyword">if</span>(u * <span class="number">2</span> &lt;= cnt &amp;&amp; a[u * <span class="number">2</span>] &lt; a[v])</span><br><span class="line">v = u * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(u * <span class="number">2</span> + <span class="number">1</span> &lt;= cnt &amp;&amp; a[u * <span class="number">2</span> + <span class="number">1</span>] &lt; a[v])</span><br><span class="line">v = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(u != v)</span><br><span class="line"><span class="built_in">swap</span>(a[u], a[v]), <span class="built_in">down</span>(v); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;<span class="comment">//删除</span></span><br><span class="line">a[<span class="number">1</span>] = a[cnt--];</span><br><span class="line"><span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>把字符串映射成一个<strong>p进制的数字</strong> </p><p>计算公式：$h(s)=\sum_{i=1}^ns[i]\times p^{n-i}(mod M)$    </p><p>为了防止哈希碰撞，p通常取131或13331，把哈希函数值定义为ULL，超过会自动溢出，等价于取模。  </p><ul><li>求哈希值相当于求前缀和 $h[i]=h[i-1]\times p+s[i]$ ，h[0] = 0 </li><li><p>求子串的哈希值相当于求区间和 $h[l,r]=h[r]-h[l-1]\times p^{r-l+1}$</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> P = <span class="number">131</span>;</span><br><span class="line"><span class="comment">//p[i] = P^i, h[i] = s[1~i]的哈希值</span></span><br><span class="line">ULL p[N], h[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//预处理</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>, h[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">        h[i] = h[i - <span class="number">1</span>] * P + s[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算s[l ~ r]的哈希值</span></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">substr</span><span class="params">(<span class="type">int</span> l1, <span class="type">int</span> r1, <span class="type">int</span> l2, <span class="type">int</span> r2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>(l1, r1) == <span class="built_in">get</span>(l2, r2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>acwing 搜索与图论</title>
      <link href="/2023/03/27/acwing-%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/"/>
      <url>/2023/03/27/acwing-%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week7</title>
      <link href="/2023/03/09/week7/"/>
      <url>/2023/03/09/week7/</url>
      
        <content type="html"><![CDATA[<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><ul><li>顺序文件：一个有限字符构成的顺序字符流</li><li>ifstream, ofstream, fstream三个类用于文件操作，统称为文件流类<br>使用/创建文件的基本流程</li><li>打开文件<ul><li>通过指定文件名，建立文件和文件流对象的关联</li><li>指明文件的使用方式</li></ul></li><li>读写文件<ul><li>利用读写指针进行相应位置操作</li></ul></li><li>关闭文件<br>建立顺序文件</li></ul><ol><li>初始化对象时打开</li><li>先创建ofstream对象，再用open函数打开<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span> <span class="comment">//包含头文件</span></span></span><br><span class="line"><span class="function">ofstream <span class="title">outFile</span><span class="params">(<span class="string">&quot;clients.dat&quot;</span>, ios::out|ios::binary)</span></span>;<span class="comment">//打开文件</span></span><br><span class="line"></span><br><span class="line">ofstream fout</span><br><span class="line">fout.<span class="built_in">open</span>(<span class="string">&quot;test.out&quot;</span>, ios::out|ios::binary);</span><br><span class="line"><span class="comment">//判断是否打开成功</span></span><br><span class="line"><span class="keyword">if</span>(!fout) &#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&quot;file open error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ul><li><code>ios::out</code> ：输出到文件，删除原有内容</li><li><code>ios::app</code>：输出到文件，保留原有内容，总是在尾部添加</li><li><code>ios::binary</code>：以二进制文件格式打开文件</li></ul><p>文件名可以时相对路径也可以是绝对路径，如果没有交代路径信息，就在当前文件夹下找文件</p><h2 id="文件的读写指针"><a href="#文件的读写指针" class="headerlink" title="文件的读写指针"></a>文件的读写指针</h2><ul><li>对于输入文件，有一个读指针</li><li>对于输出文件，有一个写指针</li><li>对于输入输出文件，有一个读写指针</li><li>标识文件操作的当前位置，指针在哪里读写操作就在哪里进行</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写指针</span></span><br><span class="line"><span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;a1.out&quot;</span>, ios::app)</span></span>;</span><br><span class="line"><span class="type">long</span> location = fout.<span class="built_in">tellp</span>(); <span class="comment">//取得写指针的位置</span></span><br><span class="line">location = <span class="number">10L</span>;</span><br><span class="line">fout.<span class="built_in">seekp</span>(location); <span class="comment">//将写指针移动到第10个字节处</span></span><br><span class="line">fout.<span class="built_in">seekp</span>(location, ios::beg); <span class="comment">//从头数location</span></span><br><span class="line">fout.<span class="built_in">seekp</span>(location, ios::cur); <span class="comment">//从当前位置数location</span></span><br><span class="line">fout.<span class="built_in">seekp</span>(location, ios::end); <span class="comment">//从尾部数location</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读指针</span></span><br><span class="line"><span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">&quot;a1.in&quot;</span>,ios::in)</span></span>;</span><br><span class="line"><span class="type">long</span> location = fin.<span class="built_in">tellg</span>(); <span class="comment">//取得读指针的位置</span></span><br><span class="line">location = <span class="number">10L</span>;</span><br><span class="line">fin.<span class="built_in">seekg</span>(location); <span class="comment">//将读指针移动到第10个字节处</span></span><br><span class="line">fin.<span class="built_in">seekg</span>(location, ios::beg); <span class="comment">//从头数location</span></span><br><span class="line">fin.<span class="built_in">seekg</span>(location, ios::cur); <span class="comment">//从当前位置数location</span></span><br><span class="line">fin.<span class="built_in">seekg</span>(location, ios::end); <span class="comment">//从尾部数location</span></span><br></pre></td></tr></table></figure><h2 id="二进制文件读写"><a href="#二进制文件读写" class="headerlink" title="二进制文件读写"></a>二进制文件读写</h2><p>二进制文件读写是直接读写二进制数据<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line">fout.<span class="built_in">seekp</span>(<span class="number">20</span>, ios::beg);</span><br><span class="line">fout.<span class="built_in">write</span>((<span class="type">const</span> <span class="type">char</span> *)(&amp;x), <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">fin.<span class="built_in">seekg</span>(<span class="number">0</span>, ios::beg);</span><br><span class="line">fin.<span class="built_in">read</span>((<span class="type">char</span> *)(&amp;x), <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br></pre></td></tr></table></figure></p><h2 id="显式关闭文件"><a href="#显式关闭文件" class="headerlink" title="显式关闭文件"></a>显式关闭文件</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">&quot;test.dat&quot;</span>, ios::in)</span></span>;</span><br><span class="line">fin.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;test.dat&quot;</span>, ios::out)</span></span>;</span><br><span class="line">fout.<span class="built_in">close</span>();</span><br><span class="line"><span class="comment">//关闭至关重要</span></span><br></pre></td></tr></table></figure><p>例子：文件拷贝</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&quot;File name missing!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ifstream <span class="title">inFile</span><span class="params">(argv[<span class="number">1</span>], ios::binary | ios::in)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!inFile)</span><br><span class="line">&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&quot;inFile open error!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ofstream <span class="title">outFile</span><span class="params">(argv[<span class="number">2</span>], ios::binary | ios::out)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!outFile)</span><br><span class="line">&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&quot;outFile open error!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="keyword">while</span> (inFile.<span class="built_in">get</span>(c))</span><br><span class="line">&#123;</span><br><span class="line">outFile.<span class="built_in">put</span>(c);</span><br><span class="line">&#125;</span><br><span class="line">outFile.<span class="built_in">close</span>();</span><br><span class="line">inFile.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h1><h2 id="泛型程序设计"><a href="#泛型程序设计" class="headerlink" title="泛型程序设计"></a>泛型程序设计</h2><ul><li>算法实现时不指定具体要操作的数据类型</li><li>泛型——算法实现一编-&gt;适用于多种数据结构</li><li>减少重复代码的编写</li><li>大量编写模板，使用模板的程序设计<ul><li>函数模板</li><li>类模板</li></ul></li></ul><h2 id="函数模板-1"><a href="#函数模板-1" class="headerlink" title="函数模板"></a>函数模板</h2><p>引入：为了交换两个int型的变量的值需要编写swap函数，而为了交换两个double型变量的值，也需要再次编写swap函数，那么是否能只写一个swap，但是能交换各种类型的变量呢？<br>定义：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> 类型参数<span class="number">1</span>，<span class="keyword">class</span> 类型参数<span class="number">2</span>，...&gt;</span><br><span class="line">返回值类型 模板名（形参表）</span><br><span class="line">&#123;</span><br><span class="line">函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>例如：交换函数<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(T &amp; x, T &amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T tmp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译器自动生成相关函数</span></span><br></pre></td></tr></table></figure></p><ul><li>函数模板可以有不止一个类型参数</li><li>函数模板可以重载，只要形参表不同即可</li></ul><h2 id="编辑器的优先顺序"><a href="#编辑器的优先顺序" class="headerlink" title="编辑器的优先顺序"></a>编辑器的优先顺序</h2><ol><li>先找参数完全匹配的普通函数（非由模板实例化得来的函数）</li><li>再找参数完全匹配的模板函数</li><li>再找实参经过自动类型转换后能够匹配的普通函数</li><li>上面的都找不到则报错<br>注意赋值兼容原则引起函数模板中类型参数的二义性<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">myFunction</span><span class="params">(T arg1, T arg2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;arg1&lt;&lt;“   ”&lt;&lt;arg2&lt;&lt;“\n”;</span><br><span class="line">  <span class="keyword">return</span> arg1; &#125;</span><br><span class="line">…</span><br><span class="line"><span class="built_in">myFunction</span>(<span class="number">5</span>, <span class="number">7</span>);        <span class="comment">//ok: replace T with int</span></span><br><span class="line"><span class="built_in">myFunction</span>(<span class="number">5.8</span>, <span class="number">8.4</span>);    <span class="comment">//ok: replace T with double</span></span><br><span class="line"><span class="built_in">myFunction</span>(<span class="number">5</span>, <span class="number">8.4</span>);      <span class="comment">//error: replace T with int or double? 二义性 </span></span><br></pre></td></tr></table></figure></li></ol><h1 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>目的：定义一批相似的类<br>在调用类模板时，指定参数，由编译系统根据参数提供的数据类型自动产生相应的模板类<br>写法：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> 类型参数<span class="number">1</span>,<span class="keyword">class</span> 类型参数<span class="number">2</span>, ...&gt;</span><br><span class="line"><span class="keyword">class</span> 类模板名</span><br><span class="line">&#123;</span><br><span class="line">成员函数和成员变量</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>定义成员函数：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;形参表&gt;</span><br><span class="line">返回值类型 类模板名&lt;类型参数名列表&gt; :: 成员函数名（参数表）</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义对象<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">类模板名 &lt;真实类型参数表&gt;  对象名(构造函数实际参数表); </span><br></pre></td></tr></table></figure></p><h2 id="使用类模板声明对象"><a href="#使用类模板声明对象" class="headerlink" title="使用类模板声明对象"></a>使用类模板声明对象</h2><ul><li>编译器由类模板生成类的过程叫做类模板的实例化</li><li>编辑器自动用具体的数据类型替换类模板中的类型参数，生成模板类的代码</li><li>由类模板实例化得到的类叫做模板类</li><li>为类型参数指定的数据类型不同，得到的模板类不同</li><li>同一个类模板的两个模板类时不兼容的</li></ul><h2 id="函数模板作为类模板成员"><a href="#函数模板作为类模板成员" class="headerlink" title="函数模板作为类模板成员"></a>函数模板作为类模板成员</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Func</span><span class="params">(T2 t)</span> </span>&#123; cout &lt;&lt; t;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">A&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">a.<span class="built_in">Func</span>(<span class="string">&#x27;K&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类模板类型参数与函数模板参数不能一致</strong></p><h2 id="类模板与非类型参数"><a href="#类模板与非类型参数" class="headerlink" title="类模板与非类型参数"></a>类模板与非类型参数</h2><ul><li>类模板的参数声明中可以包括非类型参数，例如`template <class T, int Number><ul><li>非类型参数：用来说明类模板中的属性</li><li>类型参数：用来说明类模板中的属性类型，成员操作的参数类型和返回值类型</li><li>类模板的<code>&lt;类型参数表&gt;</code>中可以出现非类型参数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;class T, int size&gt;</span><br><span class="line">class CArray</span><br><span class="line">&#123;</span><br><span class="line">T  array[size];</span><br><span class="line">public:</span><br><span class="line">  void Print()</span><br><span class="line">    &#123;</span><br><span class="line">      for(int i = 0; i &lt; size; ++i)</span><br><span class="line">          cout &lt;&lt; array[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="类模板与继承"><a href="#类模板与继承" class="headerlink" title="类模板与继承"></a>类模板与继承</h2><ul><li>类模板派生出类模板<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">  T1 v1;</span><br><span class="line">  T2 v2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A&lt;T2, T1&gt;</span><br><span class="line">&#123;</span><br><span class="line">T1 v3;</span><br><span class="line">T2 v4;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">public</span> B&lt;T, T&gt;</span><br><span class="line">&#123;</span><br><span class="line">  T v5;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>模板类（即类模板中类型/非类型参数实例化后的类）派生出类模板<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">T1 v1;</span><br><span class="line">  T2 v2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A&lt;<span class="type">int</span>, <span class="type">double</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">T v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>普通类派生出类模板<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line">T v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>模板类派生出普通类<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">T v1;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> :<span class="keyword">public</span> A&lt;<span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h1 id="string类"><a href="#string类" class="headerlink" title="string类"></a>string类</h1><p>string类 是一个模板类，它的定义如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> basic_string&lt;<span class="type">char</span>&gt; string;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>使用string类要包含头文件 <code>&lt;string&gt;</code></p><p> string对象的初始化:</p><ul><li><code>string s1(&quot;Hello&quot;);    // 一个参数的构造函数</code></li><li><code>string s2(8, ‘x’);       // 两个参数的构造函数</code></li><li><code>string month = “March”;</code></li><li>不提供以字符和整数为参数的构造函数</li></ul><p>构造的string太长而无法表达会抛出<code>length_error</code>异常<br>string 对象的长度用成员函数 <code>length()</code> 读取；<br>string 支持流读取运算符<br>string 支持 <code>getline</code> 函数：<code>getline(cin, str);</code></p><h2 id="赋值与复制"><a href="#赋值与复制" class="headerlink" title="赋值与复制"></a>赋值与复制</h2><ul><li><code>=</code></li><li><code>assign(str, begin, size)</code><br>部分复制<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;catpig&quot;</span>)</span>, s3</span>;</span><br><span class="line"></span><br><span class="line">s3.<span class="built_in">assign</span>(s1, <span class="number">1</span>, <span class="number">3</span>);   <span class="comment">//从s1 中下标为1的字符开始复制3个字符给s3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><ul><li><code>[]</code>：不检查下标</li><li><code>at()</code>：检查下标<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2></li><li><code>+</code></li><li><code>append(str, begin, size)</code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">s2.<span class="built_in">append</span>(s1, <span class="number">3</span>, s1.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//下标为3开始, s1.size()个字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果字符串内没有足够字符, 则复制到字符串最后一个字符</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2></li><li>关系运算符</li><li><code>compare()</code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span>, <span class="title">s2</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span>, <span class="title">s3</span><span class="params">(<span class="string">&quot;hell&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f1 = s1.<span class="built_in">compare</span>(s2);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f2 = s1.<span class="built_in">compare</span>(s3);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f3 = s3.<span class="built_in">compare</span>(s1);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f4 = s1.<span class="built_in">compare</span>(<span class="number">1</span>, <span class="number">2</span>, s3, <span class="number">0</span>, <span class="number">3</span>);         <span class="comment">//s1 1-2; s3 0-3</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f5 = s1.<span class="built_in">compare</span>(<span class="number">0</span>, s1.<span class="built_in">size</span>(), s3);      <span class="comment">//s1 0-end</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f1 &lt;&lt; endl &lt;&lt; f2 &lt;&lt; endl &lt;&lt; f3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f4 &lt;&lt; endl &lt;&lt; f5 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>    <span class="comment">// hello == hello</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>    <span class="comment">// hello &gt; hell</span></span><br><span class="line"></span><br><span class="line"><span class="number">-1</span>   <span class="comment">// hell &lt; hello</span></span><br><span class="line"></span><br><span class="line"><span class="number">-1</span>   <span class="comment">// el &lt; hell</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>    <span class="comment">// hello &gt; hell</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h2><p><code>substr(begin, size)</code></p><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><code>swap()</code></p><h2 id="寻找字符"><a href="#寻找字符" class="headerlink" title="寻找字符"></a>寻找字符</h2><ul><li><code>find(str, begin)</code>：从<code>begin</code>开始，从前往后找</li><li><code>rfind()</code>：从后往前找<br>找到则返回下标，否则返回 <code>string::npos</code></li><li><code>find_first_of()</code></li><li><code>find_last_of()</code></li><li><code>find_first_not_of()</code></li><li><code>find_last_not_of()</code><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2></li><li><code>erase(index)</code> 去掉下标<code>index</code>以及之后的字符</li><li><code>replace(begin, size, str)</code>：从<code>begin</code>开始的<code>size</code>个字符替换为<code>str</code><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2></li><li><code>insert(index, str, begin, size)</code>：从<code>str</code>从<code>begin</code>开始的<code>size</code>个字符插入到<code>index</code><h2 id="转换char"><a href="#转换char" class="headerlink" title="转换char*"></a>转换char*</h2></li><li><code>c_str()</code></li><li><code>data()</code>：<code>const char *p = str.data()</code></li><li><p><code>copy()</code></p><h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3></li><li><p>成员函数 <code>capacity()</code> ：返回无需增加内存即可存放的字符数</p></li><li>成员函数 <code>maximum_size()</code> ：返回string对象可存放的最大字符数</li><li>成员函数 <code>length()</code> 和 <code>size()</code>：相同返回字符串的大小/长度</li><li>成员函数 <code>empty()</code> ：返回string对象是否为空</li><li>成员函数 <code>resize()</code> ：改变string对象的长度</li></ul><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><h2 id="与输入输出流操作相关的类"><a href="#与输入输出流操作相关的类" class="headerlink" title="与输入输出流操作相关的类"></a>与输入输出流操作相关的类</h2><ul><li><code>istream</code>是用于输入的流类，<code>cin</code>就是该类的对象。</li><li><code>ostream</code>是用于输出的流类，<code>cout</code>就是该类的对象。</li><li><code>ifstream</code>是用于从文件读取数据的类。</li><li><code>ofstream</code>是用于向文件写入数据的类。</li><li><code>iostream</code>是既能用于输入，又能用于输出的类。</li><li><code>fstream</code> 是既能从文件读取数据，又能向文件写入数据的类。</li></ul><h2 id="标准流对象"><a href="#标准流对象" class="headerlink" title="标准流对象"></a>标准流对象</h2><p>输入流对象:</p><ul><li><code>cin</code>与标准输入设备相连<br>输出流对象：</li><li><code>cout</code>与标准输出设备相连</li><li><code>cerr</code>与标准错误输出设备相连</li><li><code>clog</code>与标准错误输出设备相连</li></ul><p><code>cin</code>对应于标准输入流，用于从键盘读取数据，也可以被<strong>重定向</strong> 为从文件中读取数据。<br><code>cout</code> 对应于标准输出流，用于向屏幕输出数据，也可以被<strong>重定向</strong>为向文件写入数据。<br><code>cerr</code> 对应于标准错误输出流，用于向屏幕输出出错信息<br><code>clog</code> 对应于标准错误输出流，用于向屏幕输出出错信息</p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>输出重定向<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br></pre></td></tr></table></figure><br>输入重定向<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br></pre></td></tr></table></figure></p><h2 id="判断输入流结束"><a href="#判断输入流结束" class="headerlink" title="判断输入流结束"></a>判断输入流结束</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (cin &gt;&gt; x)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!cin.<span class="built_in">getline</span>())</span><br></pre></td></tr></table></figure><p><code>cin</code> 作为条件判断语句其实时做了一个强制类型转换！没有读到输入时返回<code>false</code></p><h2 id="istream类的成员函数"><a href="#istream类的成员函数" class="headerlink" title="istream类的成员函数"></a>istream类的成员函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">istream &amp; <span class="title">getline</span><span class="params">(<span class="type">char</span> * buf, <span class="type">int</span> bufSize)</span></span>; </span><br></pre></td></tr></table></figure><p>从输入流中读取 <code>bufSize-1</code> 个字符到缓冲区 <code>buf</code>，或读到碰到 <code>\n</code> 为止（哪个先到算哪个）。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">istream &amp; <span class="title">getline</span><span class="params">(<span class="type">char</span> * buf, <span class="type">int</span> bufSize,<span class="type">char</span> delim)</span></span>;</span><br></pre></td></tr></table></figure><br>从输入流中读取 <code>bufSize-1</code> 个字符到缓冲区 <code>buf</code>，或读到碰到 <code>delim</code> 字符为止（哪个先到算哪个）。</p><p>两个函数都会自动在 <code>buf</code> 中读入数据的结尾添加 <code>\0</code>。<code>\n</code> 或 <code>delim</code> 都不会被读入 <code>buf</code>，但<strong>会被从输入流中取走</strong>。如果输入流中 <code>\n</code> 或 <code>delim</code> 之前的字符个数达到或超过了 <code>bufSize</code> 个，就导致读入出错，其结果就是：虽然本次读入已经完成，但是之后的读入就都会失败了。</p><ul><li><code>bool eof()</code>：判断输入流是否结束</li><li><code>int peek()</code>：返回下一个字符,但不从流中去掉.</li><li><code>istream&amp; putback(char c);</code>：将字符 <code>ch</code> 放回输入流</li><li><code>istream&amp; ignore(int nCount = 1, int delim = EOF);</code>：从流中删掉最多 <code>nCount</code> 个字符，遇到 <code>EOF</code> 时结束。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c程序学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>acwing 数据结构</title>
      <link href="/2023/03/07/acwing-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/03/07/acwing-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>邻接表：存储图和树<br><code>int e[], ne[]</code>，用下标连接，空集用-1表示<br><a href="https://imgse.com/i/ppM6Xbn"><img src="https://s1.ax1x.com/2023/03/12/ppM6Xbn.png" alt="ppM6Xbn.png"></a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表头插入一个数a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = a, ne[idx] = head, head = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将x插入下标是k的点后面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = x, ne[idx] = ne[k], ne[k] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将头结点删除，需要保证头结点存在</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = ne[head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><p>用处：优化某些问题<br><a href="https://imgse.com/i/ppQ43xP"><img src="https://s1.ax1x.com/2023/03/13/ppQ43xP.png" alt="ppQ43xP.png"></a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="type">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//0是左端点，1是右端点</span></span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在节点a的右边插入一个数x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    l[idx] = a, r[idx] = r[a];</span><br><span class="line">    l[r[a]] = idx, r[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l[r[a]] = l[a];</span><br><span class="line">    r[l[a]] = r[a];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>先进后出<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tt表示栈顶</span></span><br><span class="line"><span class="type">int</span> stk[N], tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向栈顶插入一个数</span></span><br><span class="line">stk[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从栈顶弹出一个数</span></span><br><span class="line">tt -- ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈顶的值</span></span><br><span class="line">stk[tt];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空，如果 tt &gt; 0，则表示不为空</span></span><br><span class="line"><span class="keyword">if</span> (tt &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常见模型：找出每个数左边离它最近的比它大/小的数</span></span><br><span class="line"><span class="type">int</span> tt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (tt &amp;&amp; <span class="built_in">check</span>(stk[tt], i)) tt -- ;</span><br><span class="line">    stk[ ++ tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>先进先出<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hh 表示队头，tt表示队尾</span></span><br><span class="line"><span class="type">int</span> q[N], hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队尾插入一个数</span></span><br><span class="line">q[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队头弹出一个数</span></span><br><span class="line">hh ++ ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队头的值</span></span><br><span class="line">q[hh];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空，如果 hh &lt;= tt，则表示不为空</span></span><br><span class="line"><span class="keyword">if</span> (hh &lt;= tt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">常见模型：找出滑动窗口中的最大值/最小值</span><br><span class="line"><span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="built_in">check_out</span>(q[hh])) hh ++ ;  <span class="comment">// 判断队头是否滑出窗口</span></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="built_in">check</span>(q[tt], i)) tt -- ;</span><br><span class="line">    q[ ++ tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="kmp"><a href="#kmp" class="headerlink" title="kmp"></a>kmp</h1><p>字符串匹配算法</p><ol><li>暴力怎么做<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//S[N], P[M]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line"><span class="keyword">if</span>(s[i] != p[j])</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>如何优化<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度</span></span><br><span class="line"><span class="comment">//求模式串的Next数组：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    ne[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    <span class="keyword">if</span> (j == m)</span><br><span class="line">    &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">        <span class="comment">// 匹配成功后的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>使用KMP算法时，起始下标为1</li><li>字符串可用<code>char</code>数组保存，读入时用<code>cin &gt;&gt; p + 1</code>读取，表示从下标1开始写入字符串</li><li>求<code>next</code>数组时，由于<code>ne[1]</code>初始化已经为0，故从2开始计算</li><li><code>j == 0</code>表示从头开始匹配模式串，匹配时用<code>p[j + 1]</code>比较</li></ul><h1 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h1><p>高效的存储和查找字符串集合<br><a href="https://imgse.com/i/pplzjCq"><img src="https://s1.ax1x.com/2023/03/14/pplzjCq.png" alt="pplzjCq.png"></a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>], cnt[N], idx;</span><br><span class="line"><span class="comment">// 0号点既是根节点，又是空节点</span></span><br><span class="line"><span class="comment">// son[][]存储树中每个节点的子节点</span></span><br><span class="line"><span class="comment">// cnt[]存储以每个节点结尾的单词数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入一个字符串</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) son[p][u] = ++ idx;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p] ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询字符串出现的次数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><ol><li>将两个集合合并</li><li><p>询问两个元素是否在一个集合当中<br>近乎O(1)<br>基本原理：每个集合用一棵树来表示。树根的编号就是整个集合的编号，每个节点存储他的父节点，<code>p[x]</code>表示x的父节点<br><a href="https://imgse.com/i/pp1pKS0"><img src="https://s1.ax1x.com/2023/03/14/pp1pKS0.png" alt="pp1pKS0.png"></a><br>问题1：如何判断树根：<code>if(p[x]== x)</code><br>问题2：如何求x的集合编号：<code>while(p[x] != x) x = p[x];</code><br>问题3：如何合并两个集合：<code>p[x]</code> 是 x 的集合编号，<code>p[y]</code>是y的集合编号，<code>p[x]  = y;</code><br><strong>优化问题2——路径压缩</strong><br>将一次遍历中所有经过的点直接指向根节点<br><code>scanf</code> 读入字符时可以使用 <code>%s</code>读入字符串的方式，防止出现读入多余的字符</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)朴素并查集：</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> p[N]; <span class="comment">//存储每个点的祖宗节点</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">       <span class="keyword">return</span> p[x];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">   p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(<span class="number">2</span>)维护size的并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N], size[N];</span><br><span class="line">    <span class="comment">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        size[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    size[<span class="built_in">find</span>(b)] += size[<span class="built_in">find</span>(a)];</span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">(<span class="number">3</span>)维护到祖宗节点距离的并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N], d[N];</span><br><span class="line">    <span class="comment">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u = <span class="built_in">find</span>(p[x]);</span><br><span class="line">            d[x] += d[p[x]];</span><br><span class="line">            p[x] = u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        d[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">    d[<span class="built_in">find</span>(a)] = distance; <span class="comment">// 根据具体问题，初始化find(a)的偏移量</span></span><br></pre></td></tr></table></figure><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>完全二叉树<br>性质：每个点都<strong>小等于</strong>左右子点，根节点就是最小值<br>存储：使用一维数组存储<br><a href="https://imgse.com/i/ppYHFBQ"><img src="https://s1.ax1x.com/2023/03/19/ppYHFBQ.png" alt="ppYHFBQ.png"></a><br>设<code>heap[]</code>是堆，<code>size</code>是当前大小，需要从1开始</p><ol><li>插入一个数    <code>heap[++size] = x; up(size)</code></li><li>求集合当中的最小值    <code>heap[1]</code></li><li>删除最小值    <code>heap[1] = heap[size]; size--; down(1)</code></li><li>删除任意一个元素    <code>heap[k] = heap[size]; size--; down(k); up(k)</code></li><li>修改任意一个元素    <code>heap[k] = x; down(k); up(k)</code></li></ol><p><a href="https://imgse.com/i/ppYOVqU"><img src="https://s1.ax1x.com/2023/03/19/ppYOVqU.png" alt="ppYOVqU.png"></a></p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span></span><br><span class="line"><span class="comment">// ph[k]存储第k个插入的点在堆中的位置</span></span><br><span class="line"><span class="comment">// hp[k]存储堆中下标是k的点是第几个插入的</span></span><br><span class="line"><span class="type">int</span> h[N], ph[N], hp[N], size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换两个点，及其映射关系</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap_swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(ph[hp[a]],ph[hp[b]]);</span><br><span class="line">    <span class="built_in">swap</span>(hp[a], hp[b]);</span><br><span class="line">    <span class="built_in">swap</span>(h[a], h[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (u != t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, t);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (u / <span class="number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, u / <span class="number">2</span>);</span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n)建堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span>; i; i -- ) <span class="built_in">down</span>(i);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>目的：将复杂的大数据映射到<code>0 ~ n</code>,一般 N 为 $10^5$ 或 $10^6$</p><ul><li>一般直接取模 <code>mod 10^5</code>，取质数，减少冲突</li><li>一般只有添加和查找，没有删除</li><li><code>(x % N + N) % N</code>首先把x缩放到满足<code>abs(x) &lt; N</code>，由于第一次求余的结果可能是负数，因此还要再进行一次求余</li><li>可以事先实现一个求质数的函数，算出比N大的最小质数，作为N的值</li><li>离散化是哈希的特例，因为离散化要求相对顺序不变，而哈希没有要求</li><li>哈希表的删除是通过标记实现的</li></ul><h2 id="求质数的函数"><a href="#求质数的函数" class="headerlink" title="求质数的函数"></a>求质数的函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// i的取值取决于n的大小</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">100000</span>;;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">2</span>; j * j &lt;= i; j++)</span><br><span class="line"><span class="keyword">if</span>(i % j == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h2><p>一维数组+链表存储所有哈希值<br>  <a href="https://imgse.com/i/ppDycTA"><img src="https://s1.ax1x.com/2023/03/25/ppDycTA.png" alt="ppDycTA.png"></a></p><h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">   <span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 向哈希表中插入一个数</span></span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">       e[idx] = x;</span><br><span class="line">       ne[idx] = h[k];</span><br><span class="line">       h[k] = idx ++ ;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 在哈希表中查询某个数是否存在</span></span><br><span class="line">   <span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i = h[k]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">           <span class="keyword">if</span> (e[i] == x)</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化h[]</span></span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h2><p>一维数组，长度大约为题目要求的2 ~3倍<br><a href="https://imgse.com/i/ppDcQrF"><img src="https://s1.ax1x.com/2023/03/25/ppDcQrF.png" alt="ppDcQrF.png"></a></p><h3 id="模板-2"><a href="#模板-2" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">   <span class="type">int</span> h[N];</span><br><span class="line"><span class="comment">// 约定一个标志，如果数组中为空就等于这个标志，标志一定不在x的范围内</span></span><br><span class="line">null = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span></span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="type">int</span> t = (x % N + N) % N;</span><br><span class="line">       <span class="keyword">while</span> (h[t] != null &amp;&amp; h[t] != x)</span><br><span class="line">       &#123;</span><br><span class="line">           t ++ ;</span><br><span class="line">           <span class="keyword">if</span> (t == N) t = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> t;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// memset是按照字节初始化，因此如下</span></span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> h);</span><br></pre></td></tr></table></figure><h1 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h1><p>字符串前缀哈希法<br>Q是一个比较小的数，从而映射到 <code>0 ~ Q-1</code>的数<br>预处理：<code>h[i] = h[i -1 ] * p + str[i]</code><br><a href="https://imgse.com/i/ppDgqkd"><img src="https://s1.ax1x.com/2023/03/25/ppDgqkd.png" alt="ppDgqkd.png"></a><br><a href="https://imgse.com/i/ppD2Fts"><img src="https://s1.ax1x.com/2023/03/25/ppD2Fts.png" alt="ppD2Fts.png"></a></p><h2 id="模板-3"><a href="#模板-3" class="headerlink" title="模板"></a>模板</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">核心思想：将字符串看成P进制数，P的经验值是<span class="number">131</span>或<span class="number">13331</span>，取这两个值的冲突概率低</span><br><span class="line">小技巧：取模的数用<span class="number">2</span>^<span class="number">64</span>，这样直接用<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>存储，溢出的结果就是取模的结果</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line">ULL h[N], p[N]; <span class="comment">// h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    h[i] = h[i - <span class="number">1</span>] * P + str[i];</span><br><span class="line">    p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算子串 str[l ~ r] 的哈希值</span></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-STL"><a href="#C-STL" class="headerlink" title="C++ STL"></a>C++ STL</h1><ul><li>系统为某个程序分配空间时，所需时间与空间大小无关，与申请次数有关</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vector, 变长数组，倍增的思想 &lt;vector&gt;</span><br><span class="line">初始化 vector&lt;int&gt; a;</span><br><span class="line">数组 vector&lt;int&gt; a[10];</span><br><span class="line">长度为10 vector&lt;int&gt; a(10);</span><br><span class="line">长度为10且每个数赋值为3 vector&lt;int&gt; a(10, 3);</span><br><span class="line"></span><br><span class="line">    size()  返回元素个数</span><br><span class="line">    empty()  返回是否为空</span><br><span class="line">    clear()  清空 </span><br><span class="line">    front()/back() 返回第一/最后一个数</span><br><span class="line">    push_back()/pop_back() 最后插入/删除最后</span><br><span class="line">    begin()/end() 第0个数/最后一个数的后一个数</span><br><span class="line">    []</span><br><span class="line">    支持比较运算，按字典序</span><br><span class="line"></span><br><span class="line">pair&lt;int, int&gt;</span><br><span class="line">    first, 第一个元素</span><br><span class="line">    second, 第二个元素</span><br><span class="line">    支持比较运算，以first为第一关键字，以second为第二关键字（字典序）</span><br><span class="line">    存入三个元素  pair&lt;int, pair&lt;int,int&gt;&#125;;</span><br><span class="line"> </span><br><span class="line">string，字符串 &lt;cstring&gt;</span><br><span class="line">    size()/length()  返回字符串长度</span><br><span class="line">    empty()</span><br><span class="line">    clear()</span><br><span class="line">    substr(起始下标，(子串长度))  返回子串</span><br><span class="line">    c_str()  返回字符串所在字符数组的起始地址</span><br><span class="line"></span><br><span class="line">queue, 队列 &lt;queue&gt;</span><br><span class="line">初始化 queue&lt;int&gt; q; q = queue&lt;int&gt;();</span><br><span class="line">    size()</span><br><span class="line">    empty()</span><br><span class="line">    push()  向队尾插入一个元素</span><br><span class="line">    front()  返回队头元素</span><br><span class="line">    back()  返回队尾元素</span><br><span class="line">    pop()  弹出队头元素</span><br><span class="line"></span><br><span class="line">priority_queue, 优先队列，默认是大根堆 &lt;queue&gt;</span><br><span class="line">    size()</span><br><span class="line">    empty()</span><br><span class="line">    push()  插入一个元素</span><br><span class="line">    top()  返回堆顶元素</span><br><span class="line">    pop()  弹出堆顶元素</span><br><span class="line">    定义成小根堆的方式：插入负数或priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;</span><br><span class="line"></span><br><span class="line">stack, 栈</span><br><span class="line">    size()</span><br><span class="line">    empty()</span><br><span class="line">    push()  向栈顶插入一个元素</span><br><span class="line">    top()  返回栈顶元素</span><br><span class="line">    pop()  弹出栈顶元素</span><br><span class="line"></span><br><span class="line">deque, 双端队列</span><br><span class="line">    size()</span><br><span class="line">    empty()</span><br><span class="line">    clear()</span><br><span class="line">    front()/back()</span><br><span class="line">    push_back()/pop_back()</span><br><span class="line">    push_front()/pop_front() 队首插入/队首弹出</span><br><span class="line">    begin()/end()</span><br><span class="line">    []</span><br><span class="line"></span><br><span class="line">set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列</span><br><span class="line">    size()</span><br><span class="line">    empty()</span><br><span class="line">    clear()</span><br><span class="line">    begin()/end()</span><br><span class="line">    ++, -- 返回前驱和后继，时间复杂度 O(logn)</span><br><span class="line"></span><br><span class="line">    set/multiset &lt;set&gt;</span><br><span class="line">    set不能有重复元素，multiset可以</span><br><span class="line">        insert()  插入一个数</span><br><span class="line">        find()  查找一个数，不存在返回end</span><br><span class="line">        count()  返回某一个数的个数</span><br><span class="line">        erase()</span><br><span class="line">            (1) 输入是一个数x，删除所有x   O(k + logn)k是x的个数</span><br><span class="line">            (2) 输入一个迭代器，删除这个迭代器</span><br><span class="line">        lower_bound()/upper_bound()</span><br><span class="line">            lower_bound(x)  返回大于等于x的最小的数的迭代器</span><br><span class="line">            upper_bound(x)  返回大于x的最小的数的迭代器</span><br><span class="line">    map/multimap &lt;map&gt;</span><br><span class="line">    例子 map&lt;string, int&gt; a; a[&quot;xyz&quot;] = 1;将xyz映射成了1</span><br><span class="line">        insert()  插入的数是一个pair</span><br><span class="line">        erase()  输入的参数是pair或者迭代器</span><br><span class="line">        find()</span><br><span class="line">        []  注意multim ap不支持此操作。 时间复杂度是 O(logn)</span><br><span class="line">        lower_bound()/upper_bound()</span><br><span class="line"></span><br><span class="line">unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表</span><br><span class="line">    和上面类似，增删改查的时间复杂度是 O(1)</span><br><span class="line">    不支持 lower_bound()/upper_bound()， 迭代器的++，--</span><br><span class="line"></span><br><span class="line">bitset, 压位</span><br><span class="line">    初始化 bitset&lt;10000&gt; s;</span><br><span class="line">    ~, &amp;, |, ^</span><br><span class="line">    &gt;&gt;, &lt;&lt;</span><br><span class="line">    ==, !=</span><br><span class="line">    []</span><br><span class="line"></span><br><span class="line">    count()  返回有多少个1</span><br><span class="line"></span><br><span class="line">    any()  判断是否至少有一个1</span><br><span class="line">    none()  判断是否全为0</span><br><span class="line"></span><br><span class="line">    set()  把所有位置成1</span><br><span class="line">    set(k, v)  将第k位变成v</span><br><span class="line">    reset()  把所有位变成0</span><br><span class="line">    flip()  等价于~</span><br><span class="line">    flip(k) 把第k位取反</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week</title>
      <link href="/2023/02/28/week6/"/>
      <url>/2023/02/28/week6/</url>
      
        <content type="html"><![CDATA[<h1 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h1><p>在类的定义中，前面有<code>virtual</code>关键字的成员函数就是虚函数<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">base</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">base::get</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><ul><li>关键字只用在类定义里的函数声明中，写函数体时不用</li><li>构造函数和静态成员函数不能是虚函数</li></ul><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="多态的表现形式一"><a href="#多态的表现形式一" class="headerlink" title="多态的表现形式一"></a>多态的表现形式一</h2><p>以下这种机制称为多态：</p><ul><li>派生类的指针可以赋给基类指针</li><li>通过基类指针调用基类和派生类的同名虚函数时：<ul><li>若该指针指向一个基类的对象，那么被调用的是基类的虚函数</li><li>若该指针指向一个派生类的对象，那么被调用的是派生类的虚函数<h2 id="多态的表现形式二"><a href="#多态的表现形式二" class="headerlink" title="多态的表现形式二"></a>多态的表现形式二</h2>以下这种机制称为多态：</li></ul></li><li>派生类的对象可以赋给基类引用</li><li>通过基类引用调用基类和派生类中的同名虚函数时：<ul><li>若该引用引用的是一个基类的对象，那么被调用的是基类的虚函数</li><li>若该引用引用的是一个派生类的对象，那么被调用的是派生类的虚函数</li></ul></li></ul><h1 id="多态实例"><a href="#多态实例" class="headerlink" title="多态实例"></a>多态实例</h1><p><a href="https://imgse.com/i/ppPpLJP"><img src="https://s1.ax1x.com/2023/02/28/ppPpLJP.png" alt="ppPpLJP.png"></a><br><a href="https://imgse.com/i/ppPpxsg"><img src="https://s1.ax1x.com/2023/02/28/ppPpxsg.png" alt="ppPpxsg.png"></a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CShape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Area</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PrintInfo</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CRectangle</span>:<span class="keyword">public</span> CShape</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">int</span> w, h;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Area</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PrintInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CCircle</span>:<span class="keyword">public</span> CShape</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">int</span> r;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Area</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PrintInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CTriangle</span>:<span class="keyword">public</span> CShape </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Area</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PrintInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">CRectangle::Area</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> w * h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CRectangle::PrintInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Rectangle:&quot;</span> &lt;&lt; <span class="built_in">Area</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">CCircle::Area</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span> * r * r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCircle::PrintInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Circle:&quot;</span> &lt;&lt; <span class="built_in">Area</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">CTriangle::Area</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> p = (a + b + c) / <span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(p * (p - a) * (p - b) * (p - c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CTriangle::PrintInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Triangle:&quot;</span> &lt;&lt; <span class="built_in">Area</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">CShape *pShapes[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MyCompare</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *s1, <span class="type">const</span> <span class="type">void</span> *s2)</span></span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> a1, a2;</span><br><span class="line">    CShape **p1;</span><br><span class="line">    CShape **p2;</span><br><span class="line">    p1 = (CShape **)s1;</span><br><span class="line">    p2 = (CShape **)s2;</span><br><span class="line">    a1 = (*p1)-&gt;<span class="built_in">Area</span>();</span><br><span class="line">    a2 = (*p2)-&gt;<span class="built_in">Area</span>();</span><br><span class="line">    <span class="keyword">if</span>(a1 &lt; a2)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a2 &lt; a1)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    CRectangle *pr;</span><br><span class="line">    CCircle *pc;</span><br><span class="line">    CTriangle *pt;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        cin &gt;&gt; c;</span><br><span class="line">        <span class="keyword">switch</span> (c)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">            pr = <span class="keyword">new</span> <span class="built_in">CRectangle</span>();</span><br><span class="line">            cin &gt;&gt; pr-&gt;w &gt;&gt; pr-&gt;h;</span><br><span class="line">            pShapes[i] = pr;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">            pc = <span class="keyword">new</span> <span class="built_in">CCircle</span>();</span><br><span class="line">            cin &gt;&gt; pc-&gt;r;</span><br><span class="line">            pShapes[i] = pc;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;T&#x27;</span>:</span><br><span class="line">            pt = <span class="keyword">new</span> <span class="built_in">CTriangle</span>();</span><br><span class="line">            cin &gt;&gt; pt-&gt;a &gt;&gt; pt-&gt;b &gt;&gt; pt-&gt;c;</span><br><span class="line">            pShapes[i] = pt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">qsort</span>(pShapes, n, <span class="built_in">sizeof</span>(CShape *), MyCompare);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">        pShapes[i]-&gt;<span class="built_in">PrintInfo</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><strong>用基类指针数组存放指向各种派生类对象的指针，然后遍历该数组，就能对各个派生类对象做各种操作，是很常用的做法</strong></li><li>派生类中和基类中虚函数同名同参数表的函数，不加<code>virtual</code>也自动成为虚函数</li></ul><h1 id="构造函数和析构函数中调用虚函数"><a href="#构造函数和析构函数中调用虚函数" class="headerlink" title="构造函数和析构函数中调用虚函数"></a>构造函数和析构函数中调用虚函数</h1><p>在非构造函数，非析构函数的成员函数中调用虚函数，是多态。<br>在构造函数和析构函数中调用虚函数，不是多态。编译时即可确定，调用的函数是<strong>自己的类或基类</strong>中定义的函数，不会等到运行时才决定调用自己的还是派生类的函数。</p><h1 id="多态实现原理"><a href="#多态实现原理" class="headerlink" title="多态实现原理"></a>多态实现原理</h1><blockquote><p>多态”的关键在于通过基类指针或引用调用一个虚函数时，编译时不确定到底调用的是基类还是派生类的函数，运行时才确定 —— 这叫“动态联编”</p><h2 id="虚函数表"><a href="#虚函数表" class="headerlink" title="虚函数表"></a>虚函数表</h2><p>每一个有虚函数的类（或有虚函数的基类的派生类）都有一个虚函数表，该类的任何对象中都放着虚函数表的指针。虚函数表中列出了该类的虚函数地址。多出来的四个字节就是用来放虚函数表的地址的<br>多态的函数调用语句被编译成一系列根据基类指针所指向的（或基类引用所引用的）对象中存放的虚函数表的地址，在虚函数表中查找虚函数地址， 并调用虚函数的指令。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>时间开销：查虚函数表</p></blockquote><p>空间开销：每个对象多四个字节存放虚函数表的地址</p><h1 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h1><p><a href="https://imgse.com/i/ppPEzaF"><img src="https://s1.ax1x.com/2023/02/28/ppPEzaF.png" alt="ppPEzaF.png"></a></p><ul><li>虚析构函数的提出源于实际问题，本质上是多态</li><li>通过基类的指针删除派生类对象时，只调用了基类的析构函数<br>解决办法：</li><li>把基类的析构函数声明为<code>virtual</code><ul><li>派生类的析构函数<code>virtual</code>可以不进行声明</li><li>通过基类的指针删除派生类对象时先调用派生类的析构函数，然后调用基类的析构函数</li><li>类如果定义了虚函数，最好将析构函数也定义成虚函数</li><li>构造函数不可声明为虚函数</li></ul></li></ul><h1 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h1><ul><li><p>纯虚函数：没有函数体的虚函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">      <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Print</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//纯虚函数</span></span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;fun&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="抽象类：包含纯虚函数的类"><a href="#抽象类：包含纯虚函数的类" class="headerlink" title="抽象类：包含纯虚函数的类"></a>抽象类：包含纯虚函数的类</h2></li><li>只能作为基类来派生新类使用</li><li>不能创建抽象类的对象</li><li>抽象类的指针和引用 -&gt; 由抽象类派生出来的类的对象  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A a; // 错误，A是抽象类，不能创建对象</span><br><span class="line">A * pa; // ok, 可以定义抽象类的指针和引用</span><br><span class="line">pa = new A; // 错误，A是抽象类，不能创建对象</span><br></pre></td></tr></table></figure></li><li>在成员函数内可以调用纯虚函数</li><li>在构造函数/析构函数内部不能调用纯虚函数<br>如果一个类从抽象类派生而来，需要实现基类中的所有纯虚函数，才能成为非抽象类</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c程序学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week4</title>
      <link href="/2023/02/15/week4/"/>
      <url>/2023/02/15/week4/</url>
      
        <content type="html"><![CDATA[<p><strong>之前的week4误删了，在github上复制了别人的作为以后的复习</strong></p><h1 id="Week4"><a href="#Week4" class="headerlink" title="Week4"></a>Week4</h1><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p>运算符重载</p><ul><li><p>对已有的运算符赋予多重的含义</p></li><li><p>使同一运算符作用于不同类型的数据时有不同类型的行为</p></li></ul><p>目的：</p><ul><li>扩展C++中提供的运算符的适用范围, 以用于类所表示的抽象数据类型</li></ul><p>运算符重载的实质是函数重载，参数个数为运算符目数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">返回值类型 <span class="keyword">operator</span> 运算符(形参表)</span><br><span class="line">&#123;</span><br><span class="line">…… </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如复数相加：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex &amp;a, <span class="type">const</span> Complex &amp;b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Complex</span>(a.real + b.real, a.imag + b.imag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运算符重载为成员函数，参数个数为运算符目数减一</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex &amp;operand2);</span><br><span class="line"><span class="comment">// x = y + z</span></span><br><span class="line"><span class="comment">// 等价于 x = y.operator+(z)</span></span><br></pre></td></tr></table></figure><h2 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h2><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符两边的类型可以不匹配，但需要重载赋值运算符 <code>=</code> </p><ul><li>把一个 <code>int</code> 类型变量 赋值给一个 Complex对象</li><li>把一个 <code>char*</code> 类型的字符串赋值给一个 字符串对象</li></ul><p>注意：赋值运算符 <code>=</code> 只能重载为成员函数！</p><p>例子：字符串赋值</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> *str;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">String</span>() :<span class="built_in">str</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span> *<span class="title">get_str</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> str; &#125;</span><br><span class="line"><span class="type">char</span>* <span class="keyword">operator</span>=(<span class="type">const</span> <span class="type">char</span> *str);</span><br><span class="line">~<span class="built_in">String</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* String::<span class="keyword">operator</span>=(<span class="type">const</span> <span class="type">char</span> *s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s)</span><br><span class="line">&#123;</span><br><span class="line">str = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(s) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(str, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">str = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String::~<span class="built_in">String</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赋值运算符重载的目的：</p><ul><li>可以使用其他类型变量或常量给对象赋值</li><li>解决浅拷贝的问题</li></ul><h3 id="浅复制与深复制"><a href="#浅复制与深复制" class="headerlink" title="浅复制与深复制"></a>浅复制与深复制</h3><p>浅复制是一种逐字节的复制。在复制内容包含指针时会产生问题。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString S1, S2;</span><br><span class="line">S1 = <span class="string">&quot;this&quot;</span>;</span><br><span class="line">S2 = <span class="string">&quot;that&quot;</span>;</span><br><span class="line">S2 = S1;</span><br></pre></td></tr></table></figure><p>这样一个简单的程序会导致S1和S2的<code>char *</code> 变量指向同一块内存，会造成内存垃圾，以及重复<code>delete</code>的隐患。</p><p>利用赋值运算符重载可以实现深复制：将一个对象中指针变量指向的内容，复制到另一个对象中指针成员对象指向的地方。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String &amp;s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (str == s.str)  <span class="comment">// 针对自身赋值的情况</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s.str)</span><br><span class="line">&#123;</span><br><span class="line">str = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(s.str) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(str, s.str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">str = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>赋值运算符重载时，返回值设为其所作用的对象的引用，是符合赋值运算符使用习惯的做法。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">a = b = c;  <span class="comment">// return void 会导致a赋值失败</span></span><br><span class="line">(a = b) = c; <span class="comment">// return string 会导致第二个赋值无意义</span></span><br></pre></td></tr></table></figure><h2 id="运算符重载为友元函数"><a href="#运算符重载为友元函数" class="headerlink" title="运算符重载为友元函数"></a>运算符重载为友元函数</h2><p>通常将运算符重载为类的成员函数</p><p>重载为友元函数的情况：</p><ul><li>成员函数不能满足使用要求</li><li>普通函数又不能访问类的私有成员 </li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="type">double</span> real, imag; </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line"><span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i) :<span class="built_in">real</span>(r), <span class="built_in">imag</span>(i) &#123; &#125;;</span><br><span class="line">Complex <span class="keyword">operator</span>+(<span class="type">double</span> r); <span class="comment">// 能解释c+5</span></span><br><span class="line"><span class="keyword">friend</span> Complex <span class="keyword">operator</span> + (<span class="type">double</span> r, <span class="type">const</span> Complex &amp; c); <span class="comment">// 能解释 5+c</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="运算符重载示例：长度可变的整形数组"><a href="#运算符重载示例：长度可变的整形数组" class="headerlink" title="运算符重载示例：长度可变的整形数组"></a>运算符重载示例：长度可变的整形数组</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CArray</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="type">int</span> *ptr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CArray</span>(<span class="type">int</span> s = <span class="number">0</span>);</span><br><span class="line"><span class="built_in">CArray</span>(CArray &amp;a);</span><br><span class="line">~<span class="built_in">CArray</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line">CArray &amp; <span class="keyword">operator</span>=(<span class="type">const</span> CArray &amp;a);</span><br><span class="line"><span class="type">int</span> &amp; <span class="keyword">operator</span>[](<span class="type">int</span> i) &#123; <span class="keyword">return</span> ptr[i]; &#125; <span class="comment">// a[i] = 4</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CArray::<span class="built_in">CArray</span>(<span class="type">int</span> s) :<span class="built_in">size</span>(s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ptr = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ptr = <span class="keyword">new</span> <span class="type">int</span>[s];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CArray::<span class="built_in">CArray</span>(CArray &amp;a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a.ptr)</span><br><span class="line">&#123;</span><br><span class="line">ptr = <span class="literal">NULL</span>;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ptr = <span class="keyword">new</span> <span class="type">int</span>[a.size];</span><br><span class="line">size = a.size;</span><br><span class="line"><span class="built_in">memcpy</span>(ptr, a.ptr, <span class="built_in">sizeof</span>(<span class="type">int</span>)*a.size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CArray::~<span class="built_in">CArray</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ptr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] ptr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CArray&amp; CArray::<span class="keyword">operator</span>=(<span class="type">const</span> CArray &amp;a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ptr == a.ptr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a.ptr == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ptr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] ptr;</span><br><span class="line">&#125;</span><br><span class="line">ptr = <span class="literal">NULL</span>;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (size &lt; a.size)  <span class="comment">// 空间足够就没必要重新分配内存</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ptr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] ptr;</span><br><span class="line">&#125;</span><br><span class="line">ptr = <span class="keyword">new</span> <span class="type">int</span>[a.size];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(ptr, a.ptr, <span class="built_in">sizeof</span>(<span class="type">int</span>)*a.size);</span><br><span class="line">size = a.size;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CArray::push_back</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 简单低效</span></span><br><span class="line"><span class="keyword">if</span> (ptr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *tmpPtr = <span class="keyword">new</span> <span class="type">int</span>[size + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">memcpy</span>(tmpPtr, ptr, <span class="built_in">sizeof</span>(<span class="type">int</span>)*size);</span><br><span class="line"><span class="keyword">delete</span>[] ptr;</span><br><span class="line">ptr = tmpPtr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ptr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">ptr[size++] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  <span class="comment">//要编写可变长整型数组类，使之能如下使用：</span></span><br><span class="line">CArray a; <span class="comment">//开始里的数组是空的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">a.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">CArray a2, a3;</span><br><span class="line">a2 = a;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">length</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; a2[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">a2 = a3; <span class="comment">//a2是空的    </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a2.<span class="built_in">length</span>(); ++i) <span class="comment">//a2.length()返回0</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; a2[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">a[<span class="number">3</span>] = <span class="number">100</span>;</span><br><span class="line"><span class="function">CArray <span class="title">a4</span><span class="params">(a)</span></span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a4.<span class="built_in">length</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; a4[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流插入运算符和流提取运算符的重载"><a href="#流插入运算符和流提取运算符的重载" class="headerlink" title="流插入运算符和流提取运算符的重载"></a>流插入运算符和流提取运算符的重载</h2><p><code>cout</code> 是在 <code>iostream</code> 定义的 <code>ostream</code> 类的对象。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回引用实现连续输出</span></span><br><span class="line">ostream &amp; ostream::<span class="keyword">operator</span>&lt;&lt;(<span class="type">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定制自己的 <code>cout</code>， 只能重载成全局函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;o, <span class="type">const</span> CStudent &amp;s)</span><br><span class="line">&#123;</span><br><span class="line">o &lt;&lt; s.nAge;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：输入输出复数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">double</span> real, imag;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Complex</span>(<span class="type">double</span> r = <span class="number">0</span>, <span class="type">double</span> i = <span class="number">0</span>) :<span class="built_in">real</span>(r), <span class="built_in">imag</span>(i) &#123;&#125;;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="type">const</span> Complex &amp;c);</span><br><span class="line"><span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;is, Complex &amp;c);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="type">const</span> Complex &amp;c)</span><br><span class="line">&#123;</span><br><span class="line">os &lt;&lt; c.real &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; c.imag &lt;&lt; <span class="string">&quot;i&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;is, Complex &amp;c)</span><br><span class="line">&#123;</span><br><span class="line">string s;</span><br><span class="line">is &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> pos = s.<span class="built_in">find</span>(<span class="string">&quot;+&quot;</span>, <span class="number">0</span>);</span><br><span class="line">string sTmp = s.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">c.real = <span class="built_in">atof</span>(sTmp.<span class="built_in">c_str</span>());</span><br><span class="line">sTmp = s.<span class="built_in">substr</span>(pos + <span class="number">1</span>, s.<span class="built_in">length</span>() - pos - <span class="number">2</span>);</span><br><span class="line">c.imag = <span class="built_in">atof</span>(sTmp.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Complex c;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; c &gt;&gt; n;</span><br><span class="line">cout &lt;&lt; c &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; n;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自增-自减运算符的重载"><a href="#自增-自减运算符的重载" class="headerlink" title="自增/自减运算符的重载"></a>自增/自减运算符的重载</h2><h3 id="前置运算符作为一元运算符重载"><a href="#前置运算符作为一元运算符重载" class="headerlink" title="前置运算符作为一元运算符重载"></a>前置运算符作为一元运算符重载</h3><ul><li>重载为成员函数: <ul><li><code>T &amp; operator++();</code> </li><li><code>T &amp; operator--();</code></li></ul></li><li>重载为全局函数： <ul><li><code>T &amp; operator++(T &amp;);</code> </li><li><code>T &amp; operator—-(T &amp;);</code></li></ul></li><li><code>++obj</code>, <code>obj.operator++()</code>, <code>operator++(obj)</code> 都调用上述函数</li></ul><h3 id="后置运算符作为二元运算符重载"><a href="#后置运算符作为二元运算符重载" class="headerlink" title="后置运算符作为二元运算符重载"></a>后置运算符作为二元运算符重载</h3><ul><li>多写一个参数, 无具体意义 </li><li>重载为成员函数：<ul><li><code>T operator++(int);</code></li><li><code>T operator--(int);</code></li></ul></li><li>重载为全局函数：<ul><li><code>T operator++(T &amp;, int);</code></li><li><code>T operator--(T &amp;, int);</code></li></ul></li><li><code>obj++</code>, <code>obj.operator++(0)</code>, <code>operator++(obj,0)</code> 都调用上函数</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CDemo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CDemo</span>(<span class="type">int</span> i = <span class="number">0</span>) :<span class="built_in">n</span>(i) &#123;&#125;</span><br><span class="line">CDemo &amp; <span class="keyword">operator</span>++();</span><br><span class="line">CDemo <span class="keyword">operator</span>++(<span class="type">int</span>);</span><br><span class="line"><span class="keyword">friend</span> CDemo &amp; <span class="keyword">operator</span>--(CDemo &amp;d);</span><br><span class="line"><span class="keyword">friend</span> CDemo <span class="keyword">operator</span>--(CDemo &amp;d, <span class="type">int</span>);</span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> n; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CDemo&amp; CDemo::<span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDemo CDemo::<span class="keyword">operator</span>++(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">CDemo <span class="title">tmp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDemo&amp; <span class="keyword">operator</span>--(CDemo &amp;d)</span><br><span class="line">&#123;</span><br><span class="line">d.n--;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDemo <span class="keyword">operator</span>--(CDemo &amp;d, <span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">CDemo <span class="title">tmp</span><span class="params">(d)</span></span>;</span><br><span class="line">d.n--;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">CDemo <span class="title">d</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; (d++) &lt;&lt; <span class="string">&quot;,&quot;</span>;  <span class="comment">//等价于 d.operator++(0);</span></span><br><span class="line">cout &lt;&lt; d &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">cout &lt;&lt; (++d) &lt;&lt; <span class="string">&quot;,&quot;</span>;   <span class="comment">//等价于 d.operator++();</span></span><br><span class="line">cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (d--) &lt;&lt; <span class="string">&quot;,&quot;</span>;   <span class="comment">//等价于 operator--(d,0);</span></span><br><span class="line">cout &lt;&lt; d &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">cout &lt;&lt; (--d) &lt;&lt; <span class="string">&quot;,&quot;</span>;    <span class="comment">//等价于 operator--(d);</span></span><br><span class="line">cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型强制转换运算符重载"><a href="#类型强制转换运算符重载" class="headerlink" title="类型强制转换运算符重载"></a>类型强制转换运算符重载</h3><p>在上例中 <code>int</code> 作为一个类型强制转换运算符被重载</p><ul><li><code>Demo s;</code> <code>(int)s;</code> ：等价于<code>s.int()</code></li></ul><p>类型强制转换运算符重载时<strong>不能写返回值类型</strong>，实际上其返回值类型就是类型强制转换运算符代表的类型。</p><h3 id="运算符重载的注意事项"><a href="#运算符重载的注意事项" class="headerlink" title="运算符重载的注意事项"></a>运算符重载的注意事项</h3><ul><li>C++不允许定义新的运算符 </li><li>重载后运算符的含义应该符合日常习惯 </li><li>运算符重载不改变运算符的优先级 </li><li>以下运算符不能被重载： <code>.</code>, <code>.*</code>, <code>::</code>, <code>?:</code>, <code>sizeof</code> </li><li>重载运算符 <code>()</code>, <code>[ ]</code>, <code>-&gt;</code>或者赋值运算符 <code>=</code> 时, 重载函数必须声明为类的成员函数</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c程序学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week5</title>
      <link href="/2023/02/12/week5/"/>
      <url>/2023/02/12/week5/</url>
      
        <content type="html"><![CDATA[<h1 id="继承和派生"><a href="#继承和派生" class="headerlink" title="继承和派生"></a>继承和派生</h1><p>继承：在定义一个新的类B时，如果该类与某个已有的类A相似（指的是B拥有A的全部特点），那么就可以把A作为一个基类，把B作为基类的一个派生类（子类）。</p><ul><li>派生类是通过对基类进行修改和扩充得到的。可以扩充新的成员变量和成员函数。</li><li>派生类已经定义后，可以独立使用，不依赖基类。</li><li>拥有基类的全部成员函数和成员变量，但在派生类的各个成员函数中，不能访问基类中的<code>private</code>成员。</li></ul><p>写法：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class 派生类名: public 基类名</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>如果派生类和基类有相同名称的成员函数，但是内容不同，称为覆盖</li><li>为了方便可以将基类中的成员函数使用<code>::</code>来调用</li></ul><h2 id="派生类对象的内存空间"><a href="#派生类对象的内存空间" class="headerlink" title="派生类对象的内存空间"></a>派生类对象的内存空间</h2><p>派生类对象的体积 = 基类对象的体积 + 派生类对象自己的成员变量体积<br><strong>派生类对象中包含着基类对象，且基类对象的存储位置位于派生类对象新增的成员变量之前</strong></p><h1 id="复合关系和继承关系"><a href="#复合关系和继承关系" class="headerlink" title="复合关系和继承关系"></a>复合关系和继承关系</h1><ul><li>继承： “是”关系<ul><li>基类A，B是基类A的派生类</li><li>“一个B的对象也是一个A的对象”<br>一个很好的例子：<br>man -&gt; woman 不成立，一个女人不是一个男人<br>human -&gt; man &amp; woman 成立， 男人和女人的共同特点 —— 人</li></ul></li><li>复合： “有”关系<ul><li>类C中“有”成员变量k，k是类D的对象，则C和D是复合关系</li><li>“D对象是C对象的固有属性或组成部分”<br>例子：</li></ul></li><li>“圆”对象包含（有）“点”对象（圆心），这是圆和点就是复合关系<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CPoint</span> &#123;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">CCircle</span>;</span><br><span class="line">    <span class="comment">//便于CCirle类操作圆心</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CCircle</span> &#123;</span><br><span class="line">    <span class="type">double</span> r;</span><br><span class="line">    CPiont center;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>主人与狗，最好的写法是互相指向<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CMaster</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CDog</span> &#123;</span><br><span class="line">    CMaster * pm;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMaster</span> &#123;</span><br><span class="line">    CDog * dogs[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h1 id="基类和派生类同名成员"><a href="#基类和派生类同名成员" class="headerlink" title="基类和派生类同名成员"></a>基类和派生类同名成员</h1><ul><li>派生类的同名成员会覆盖基类的同名成员，但可以通过域作用符<code>::</code>来访问</li><li>一般来说基类和派生类不定义同名成员变量</li></ul><h1 id="访问范围说明符"><a href="#访问范围说明符" class="headerlink" title="访问范围说明符"></a>访问范围说明符</h1><ul><li>基类的private成员: 可以被下列函数访问：<ul><li>基类的成员函数</li><li>基类的友员函数</li></ul></li><li>基类的public成员: 可以被下列函数访问：<ul><li>基类的成员函数</li><li>基类的友员函数</li><li>派生类的成员函数</li><li>派生类的友元函数</li><li>其他函数</li></ul></li><li>基类的protected成员: 可以被下列函数访问：<ul><li>基类成员函数</li><li>基类友元函数</li><li>派生类的成员函数可以访问<strong>当前对象的基类的保护成员</strong><br>例：<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> nPrivate;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">int</span> nPublic;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        <span class="type">int</span> nProtected;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Father &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AccessFather</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        nPublic = <span class="number">1</span>; <span class="comment">// ok</span></span><br><span class="line">        nPrivate = <span class="number">1</span>; <span class="comment">// wrong</span></span><br><span class="line">        nProtected = <span class="number">1</span>; <span class="comment">//ok, 访问从基类继承的protected成员</span></span><br><span class="line">        Son f;</span><br><span class="line">        f.nProtected = <span class="number">1</span>; <span class="comment">//wrong, f不是当前对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Father f;</span><br><span class="line">    Son s;</span><br><span class="line">    f.nPublic = <span class="number">1</span>;    <span class="comment">// Ok</span></span><br><span class="line">    s.nPublic = <span class="number">1</span>;    <span class="comment">// Ok</span></span><br><span class="line">    f.nProtected = <span class="number">1</span>; <span class="comment">// error</span></span><br><span class="line">    f.nPrivate = <span class="number">1</span>;   <span class="comment">// error</span></span><br><span class="line">    s.nProtected = <span class="number">1</span>; <span class="comment">// error</span></span><br><span class="line">    s.nPrivate = <span class="number">1</span>;   <span class="comment">// error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="派生类的构造函数"><a href="#派生类的构造函数" class="headerlink" title="派生类的构造函数"></a>派生类的构造函数</h1><ul><li>派生类对象包含基类对象</li><li>执行派生类构造函数之前，先执行基类的构造函数</li><li><p>派生类交代基类初始化的具体形式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造函数名(形参表):基类名(基类构造函数实参表)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在创建派生类的对象时：</p><ul><li>需要调用基类的构造函数：初始化派生类对象从基类继承的成员</li><li>在执行一个派生类的构造函数之前，总是先执行基类的构造函数</li></ul></li><li><p>调用基类构造函数的方式：</p><ul><li>显式方式：<br>派生类的构造函数中-&gt;基类的构造函数提供参数：<br><code>derived::derived(arg-derived-list):base(arg_base-list)</code></li><li>隐式方式：<br>派生类的构造函数中省略基类构造函数时，派生类的构造函数，自动调用基类的默认构造函数</li></ul></li><li><p>创建派生类的对象时，执行派生类的构造函数<strong>之前</strong>：</p><ul><li>调用基类的构造函数：初始化派生类对象中从基类继承的成员</li><li>调用成员对象类的构造函数：初始化派生类对象中成员对象</li></ul></li><li>执行完派生类的析构函数<strong>之后</strong>：<ul><li>调用成员对象类的析构函数</li><li>调用基类的析构函数</li></ul></li><li><strong>析构函数的调用顺序与构造函数调用顺序相反</strong></li></ul><h1 id="public继承的赋值兼容规则"><a href="#public继承的赋值兼容规则" class="headerlink" title="public继承的赋值兼容规则"></a>public继承的赋值兼容规则</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class base &#123;&#125;;</span><br><span class="line">class derived : public base &#123;&#125;; //公有派生</span><br><span class="line">base b;</span><br><span class="line">derived d;</span><br></pre></td></tr></table></figure><p>以下是建立在派生方式是public基础上的规则：</p><ol><li>派生类的对象可以赋值给基类对象：b = d;</li><li>派生类的对象可以初始化基类引用：base &amp; br = d;</li><li>派生类对象的地址可以赋值给基类指针：base * pd = &d;</li></ol><h1 id="直接基类和间接基类"><a href="#直接基类和间接基类" class="headerlink" title="直接基类和间接基类"></a>直接基类和间接基类</h1><p><a href="https://imgse.com/i/pSLMXPP"><img src="https://s1.ax1x.com/2023/02/18/pSLMXPP.png" alt="pSLMXPP.png"></a></p><ul><li>在声明派生类的时候，只需要列出直接基类</li><li>派生类沿着类的层次自动向上继承他的间接基类</li><li>派生类的成员包括：<ul><li>派生类自己定义的成员</li><li>直接基类中的所有成员</li><li>所有间接基类的全部成员</li></ul></li><li>依然是从基类向下生成构造函数，相反生成析构函数</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c程序学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础学习c程序（三）—— c++程序设计</title>
      <link href="/2022/11/22/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0c%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94-c-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/11/22/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0c%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94-c-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h1><p>定义方式：类型名(<code>*</code>指针变量名)(参数类型1<code>,</code>参数类型2)。<br>例如：<code>int (* pf)(int, char)</code><br>意思是<code>pf</code>为函数指针，所指向的函数，返回值类型为<code>int</code>，有两个参数，第一个是<code>int</code>型，第二个是<code>char</code>类型。<br>使用方法：用一个<strong>原型</strong>匹配的函数的名字给一个函数指针赋值，通过该指针调用它所指向的函数，写作：函数指针名（实参表）<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void PrintMin(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    if(a &lt; b)</span><br><span class="line">    printf(&quot;%d&quot;, a);</span><br><span class="line">    else</span><br><span class="line">    printf(&quot;%d&quot;, b);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    void( * pf)(int, int);</span><br><span class="line">    int x = 4, y = 5;</span><br><span class="line">    pf = PrintMin;</span><br><span class="line">    pf(x, y);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>为什么要用函数指针调用函数？<br>其中一种用途就是排序。<br><a href="https://imgse.com/i/z0HnR1"><img src="https://s1.ax1x.com/2022/12/01/z0HnR1.png" alt="z0HnR1.png"></a><br>其中的<code>pfCompare</code>是自己编写的比较函数。</p><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><p>用于对整数类型(int, char, long等)变量中的 某一位 （bit)或者 若干位 进行操作</p><h2 id="按位与”-amp-”"><a href="#按位与”-amp-”" class="headerlink" title="按位与”&amp;”"></a>按位与”&amp;”</h2><p>将参与运算的两操作数各对应的<strong>二进制位</strong>进行与操作，只有两个二进位都是<code>1</code>时候才输出<code>1</code>。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">21 &amp; 18 = 16</span><br><span class="line">21</span><br><span class="line">10101</span><br><span class="line">18</span><br><span class="line">10010</span><br><span class="line">10000</span><br><span class="line">16</span><br></pre></td></tr></table></figure><br>作用：将某变量中的某位清<code>0</code>且保留其他位不变，也可以用来获取变量中的某一位。<br>例如 如果需要将<code>int</code>型变量<code>n</code>的低<code>8</code>位全换成<code>0</code>，而其余位不变，可以执行：<br><code>n = n &amp; 0xffffff00</code>.<br>如果<code>n</code>是<code>short</code>型，那么：<br><code>n = n &amp; 0xff00</code>.  </p><p>判断一个<code>int</code>型变量<code>n</code>的第<code>7</code>位是否为<code>1</code>；<br><code>n &amp; 0x80</code>是否等于<code>0x80</code>.  </p><h2 id="按位或”-”"><a href="#按位或”-”" class="headerlink" title="按位或”|”"></a>按位或”|”</h2><p>将参与运算的两操作数各对应的 二进制位 进行与操作，只有两个二进位都是0时候才输出0<br>21 | 18 = 23<br>21 | 18 = 10111<br>将某变量中的某些位置变1且保留其他位不变<br>例如 如果需要将int型变量n的低8位全换成0，而其余位不变，可以执行：<br>n |= 0xff</p><h2 id="按位异或”-”"><a href="#按位异或”-”" class="headerlink" title="按位异或”^”"></a>按位异或”^”</h2><p>将参与运算的两操作数各对应的 二进制位 进行与操作，只有两个二进位不相同时，结果对应的二进制位才是1，否则为0<br>21 ^ 18 = 7<br>00111<br>将某变量中的某些位取反，且保留其他位不变<br>例如 如果需要将int型变量n的低8位取反，而其余位不变，可以执行：<br>n ^= 0xff<br>0xff 1111 1111<br>特点：如果a ^ b = c, 那么就有 c ^ b = a以及 c ^ a = b.<br>异或运算能实现不通过临时变量，就能交换两个变量的值：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 5, b = 7;</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = b ^ a;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></table></figure></p><h2 id="按位非”-”"><a href="#按位非”-”" class="headerlink" title="按位非”~”"></a>按位非”~”</h2><p>单目运算符，将操作数二进制位<code>0</code>变<code>1</code>，<code>1</code>变<code>0</code>：<br><code>~21 = 0xffffffea</code>.</p><h2 id="左移运算符”-lt-lt-”"><a href="#左移运算符”-lt-lt-”" class="headerlink" title="左移运算符”&lt;&lt;”"></a>左移运算符”&lt;&lt;”</h2><p><code>a &lt;&lt; b</code>的值是：将<code>a</code>各个二进位全部左移<code>b</code>位后得到的值。高位丢弃，低位补<code>0</code>，<code>a</code>的值不会因为运算而改变。<br>注意：左移<code>1</code>位，就等于是乘以<code>2</code>，左移<code>n</code>位，就等于是乘以 $2^{n}$ ,左移操作比乘法快的多！ </p><h2 id="右移运算符-“-gt-gt-”"><a href="#右移运算符-“-gt-gt-”" class="headerlink" title="右移运算符 “&gt;&gt;”"></a>右移运算符 “&gt;&gt;”</h2><p><code>a &gt;&gt; b</code>的值是：将<code>a</code>各二进位全部右移<code>b</code>位后得到的值。右移后，移出最右边的位就被丢弃。<code>a</code>的值不因运算而改变。<br>对于有符号数，在右移时，符号位将一起移动，如果原符号位为<code>1</code>，则右移时高位就补充<code>1</code>，反之同理。<br>右移<code>n</code>为，就相当于左操作数除以 $2^{n}$ ，将结果往小取整。<br>注意：-1.6取整为-2。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>类型名<code>&amp;</code>引用名<code>=</code>某个变量名。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int n = 4;</span><br><span class="line">int &amp; r = n; // r 引用了n, r的类型为int &amp;</span><br></pre></td></tr></table></figure><br>引用等价于这个变量，<strong>相当于该变量的别名</strong></p><ul><li>定义引用时一定要将其初始化成引用某个变量</li><li>初始化后，它就一直引用该变量，不会再引用别的变量</li><li>引用只能引用变量，不能引用常量和表达式</li></ul><p>例子:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void swap(int &amp; a, int &amp; b)</span><br><span class="line">&#123;</span><br><span class="line">    int tmp;</span><br><span class="line">    tmp = a; a = b; b = tmp;</span><br><span class="line">&#125;</span><br><span class="line">int n1, n2;</span><br><span class="line">swap(n1, n2);</span><br></pre></td></tr></table></figure><br>引用作为函数返回值，可以对一个函数返回值赋值。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int n = 4;</span><br><span class="line">int &amp; SetValue()</span><br><span class="line">&#123;</span><br><span class="line">    return n;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    SetValue() = 40;</span><br><span class="line">    cout &lt;&lt; n;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">// n = 40</span><br></pre></td></tr></table></figure><p>常引用：在定义引用前加<code>const</code>，不能通过常引用修改其引用的内容。<br><code>T &amp;</code>类型的引用或者<code>T</code>类型的变量可以用来初始化<code>const T &amp;</code>类型的引用。  </p><p><code>const T</code>类型的常变量和<code>const  T &amp;</code>类型的引用不能用来初始化<code>T &amp;</code>的引用，除非进行强制类型转换。</p><h2 id="const-用法"><a href="#const-用法" class="headerlink" title="const 用法"></a>const 用法</h2><ol><li>定义常量</li><li><p>定义常量指针</p><ul><li>不可以通过常量指针修改其指向内容。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int n, m;</span><br><span class="line">const * p = &amp; n;</span><br><span class="line">* p = 5; // 编译出错</span><br><span class="line">n = 4; //ok</span><br><span class="line">p = &amp;m; //ok, 常量指针的指向可以变化</span><br></pre></td></tr></table></figure><ul><li>不能把常量指针赋值给非常量指针， 反过来可以。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const int * p1; int * p2;</span><br><span class="line">p1 = p2; // ok</span><br><span class="line">p2 = p1; // error </span><br><span class="line">p2 = (int *)p1; // ok,强制类型转换</span><br></pre></td></tr></table></figure></li><li>函数参数为常量指针时，可避免函数内部不小心改变参数指针所指地方的内容。</li><li>常引用。</li></ul></li></ol><h2 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h2><ol><li>用<code>new</code>运算符实现动态内存分配。<br>分配给一个变量<br><code>P = new T</code><br><code>T</code>是类型名， <code>P</code>是类型为<code>T *</code>的指针。<br>动态分配出<code>sizeof(T)</code>字节的空间，将该内存空间的起始地址赋值给<code>P</code>。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int * pn;</span><br><span class="line">pn = new int;</span><br><span class="line">* pn = 5;</span><br></pre></td></tr></table></figure></li><li>分配一个数组<br><code>P = new T[N]</code><br><code>T</code> : 类型名。<br><code>P</code> : 类型为<code>T *</code>的指针。<br><code>N</code> : 要分配的数组元素的个数，可以是整形表达式。<br>动态分配出<code>N * sizeof(T)</code>字节的空间， 将该内存空间的起始地址赋值给<code>P</code>。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int * pn;</span><br><span class="line">int i = 5;</span><br><span class="line">pn = new int[i * 20];</span><br><span class="line">pn[0] = 20;</span><br><span class="line">pn[99] = 30;</span><br></pre></td></tr></table></figure></li><li><p><code>new</code>运算符的返回值类型<br><code>new T</code><br><code>new T[n]</code><br>返回值类型<code>T *</code><br><code>int * p = new int</code></p></li><li><p>用<code>new</code>动态分配的内存空间，一定要用<code>delete</code>运算符释放掉<code>int *p = new int</code>。<br><code>*p = 5</code><br><code>delete p</code></p></li></ol><p><code>delete</code>指针：必须指向<code>new</code>出来的空间。 </p><p>删除数组的方法：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int *p = new int[20];</span><br><span class="line">p[0] = 1;</span><br><span class="line">delete[] p;</span><br></pre></td></tr></table></figure></p><h1 id="内联函数与重载函数"><a href="#内联函数与重载函数" class="headerlink" title="内联函数与重载函数"></a>内联函数与重载函数</h1><h2 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h2><p><strong>处理内联函数的调用语句时，直接将整个函数的代码插入到调用语句处，不会产生调用函数的语句。</strong><br>在函数定义前加<code>inline</code>关键字</p><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>一个或多个函数，名字相同，然而<strong>参数个数</strong>或<strong>参数类型</strong>不同，叫做函数的重载。<br>重载关系：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int max (double f1,double f2)&#123;&#125;</span><br><span class="line">int max (int n1, int n2)&#123;&#125;</span><br><span class="line">int max (int n1, int n2, int n3)&#123;&#125;</span><br></pre></td></tr></table></figure><br>用处：命名变得更简单，根据语句实参个数和类型的不同来判断调用。<br>注意： 只有返回值类型的不同的函数不叫重载，叫做重复定义。</p><h1 id="函数的缺省参数"><a href="#函数的缺省参数" class="headerlink" title="函数的缺省参数"></a>函数的缺省参数</h1><p>定义函数时可以让<strong>最右边的连续</strong>若干个参数有缺省值，调用函数的时候，若相应位置不写参数，参数就是缺省值。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void func(int x1, int x2 = 2, int x3 = 3)&#123;&#125;</span><br><span class="line">func(10);//等于func(10, 2, 3)</span><br><span class="line">func(10, 8);//等于func(10, 8, 3)</span><br><span class="line">func(10, , 8);//错误，只能最右边的连续若干个参数缺省</span><br></pre></td></tr></table></figure><br>用处：提高程序的可扩充性。</p><h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类的定义：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class 类名</span><br><span class="line">&#123;</span><br><span class="line">    访问范围说明符：</span><br><span class="line">    成员变量1</span><br><span class="line">    成员变量2</span><br><span class="line">    ...</span><br><span class="line">    成员函数声明1</span><br><span class="line">    成员函数声明2</span><br><span class="line">    访问范围说明符：</span><br><span class="line">    更多成员变量</span><br><span class="line">    更多成员函数声明</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="从客观事物抽象出类的例子"><a href="#从客观事物抽象出类的例子" class="headerlink" title="从客观事物抽象出类的例子"></a>从客观事物抽象出类的例子</h3><p>类是一个带有函数的结构体。<br><a href="https://imgse.com/i/z0cJcd"><img src="https://s1.ax1x.com/2022/12/01/z0cJcd.png" alt="z0cJcd.png"></a><br>例如：想求一个矩形的所有信息？<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class CRectangle &#123;</span><br><span class="line">public:</span><br><span class="line">int w, h;</span><br><span class="line">void nit(int w_, int h_) &#123;</span><br><span class="line">w = w_; h = h_;</span><br><span class="line">&#125;</span><br><span class="line">int Area() &#123;</span><br><span class="line">return w * h;</span><br><span class="line">&#125;</span><br><span class="line">int Perimeter() &#123;</span><br><span class="line">return 2 * (w + h);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int w, h;</span><br><span class="line">CRectangle r; // r 是一个对象</span><br><span class="line">cin &gt;&gt; w &gt;&gt; h;</span><br><span class="line">r.nit(w, h);</span><br><span class="line">cout &lt;&lt; r.Area() &lt;&lt; endl &lt;&lt; r.Perimeter();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>类定义的变量 -&gt; 类的实例 -&gt; “对象”。   </p><h4 id="对象的内存分配"><a href="#对象的内存分配" class="headerlink" title="对象的内存分配"></a>对象的内存分配</h4><p>对象的大小 = 所有成员变量的大小之和。<br>例如：<code>CRectangle</code>类的对象，<code>sizeof(CRectangle) = 8</code>.<br>每个对象各有自己独立的空间。<br>对象之间可以用 = 来赋值。</p><h4 id="访问类的成员变量和成员函数"><a href="#访问类的成员变量和成员函数" class="headerlink" title="访问类的成员变量和成员函数"></a>访问类的成员变量和成员函数</h4><ol><li>对象名<code>.</code>成员名<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CRectangle r1, r2;</span><br><span class="line">r1.w = 5;</span><br><span class="line">r2.nit(3, 4);</span><br></pre></td></tr></table></figure></li><li>指针<code>-&gt;</code>成员名<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CRectangle r1, r2;</span><br><span class="line">CRectangle * p1 = &amp; r1;</span><br><span class="line">CRectangle * p2 = &amp; r2;</span><br><span class="line">p1 -&gt; w = 5;</span><br><span class="line">p2 -&gt; nit(3, 4) // nit 作用在p2指向的对象上</span><br></pre></td></tr></table></figure></li><li>引用名<code>.</code>成员名<br><strong>引用就是变量的别名</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CRectangle r2;</span><br><span class="line">CRectangle &amp; rr = r2;</span><br><span class="line">rr.w = 5;</span><br><span class="line">rr.nit(3, 4); // rr的值变了， r2的值也变</span><br></pre></td></tr></table></figure><h4 id="其他写法"><a href="#其他写法" class="headerlink" title="其他写法"></a>其他写法</h4></li><li>另一种输出结果的方式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void PrintRectangle(CRectangle &amp; r) &#123;</span><br><span class="line">    cout &lt;&lt; r.Area() &lt;&lt; &quot;,&quot; &lt;&lt; r.Rerimeter();</span><br><span class="line">&#125;</span><br><span class="line">CRectangle r3;</span><br><span class="line">r3.nit(3, 4);</span><br><span class="line">PrintRectangle(r3);</span><br></pre></td></tr></table></figure></li><li>类的成员函数的另一种写法：<br>成员函数体和类的定义分开写<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class CRectangle &#123;</span><br><span class="line">public:</span><br><span class="line">int w, h;</span><br><span class="line">int Area();</span><br><span class="line">int Perimeter();</span><br><span class="line">void nit(int w_, int h_);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>此处仅声明成员函数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int CRectangle::Area() &#123;</span><br><span class="line">return w * h;</span><br><span class="line">&#125;</span><br><span class="line">int CRectangle::Perimeter() &#123;</span><br><span class="line">return 2 * (w + h);</span><br><span class="line">&#125;</span><br><span class="line">void CRectangle::nit(int w_, int h_) &#123;</span><br><span class="line">w = w_; h = h_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>使用<code>::</code>，调用依然是通过：对象/对象的指针/对象的引。</li></ol><h3 id="类成员的可访问范围"><a href="#类成员的可访问范围" class="headerlink" title="类成员的可访问范围"></a>类成员的可访问范围</h3><p>关键字 —— 类成员可被访问的范围。</p><ul><li><code>private</code>：指定私有成员，只能在成员函数内被访问。</li><li><code>public</code>：指定公有成员，可以在任何地方被访问。</li><li><code>protected</code>：指定保护成员。</li></ul><p>缺省的情况默认为<strong>私有成员</strong><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Man &#123;</span><br><span class="line">int nAge;// 私有成员</span><br><span class="line">char szName[20];// 私有成员</span><br><span class="line">public:</span><br><span class="line">void SetName(char * Name) &#123;</span><br><span class="line">strcpy(szName, Name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><a href="https://imgse.com/i/z02hpF"><img src="https://s1.ax1x.com/2022/12/01/z02hpF.png" alt="z02hpF.png"></a></p><ul><li>设置私有成员的目的：<br>强制对成员变量的访问一定要通过成员函数进行。</li><li>设置私有成员的机制——<strong>隐藏</strong>。</li></ul><h1 id="Week3-类和对象"><a href="#Week3-类和对象" class="headerlink" title="Week3 类和对象"></a>Week3 类和对象</h1><h2 id="内联成员函数和重载成员函数"><a href="#内联成员函数和重载成员函数" class="headerlink" title="内联成员函数和重载成员函数"></a>内联成员函数和重载成员函数</h2><ul><li>inline + 成员函数名</li><li>整个函数体写在类定义内部</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">B::func1</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>成员函数可以重载，也可以带缺省参数</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>成员函数的一种</p><ul><li>名字与类名相同，可以有参数，不能有返回值(void也不行) </li><li>作用是对对象进行初始化，如给成员变量赋初值</li><li>如果定义类时没写构造函数，则编译器生成一个默认的无参数的构造函数</li><li>默认构造函数无参数，不做任何操作</li></ul><p>可以有多个构造函数，参数个数或类型不同</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i );</span><br><span class="line"><span class="built_in">Complex</span> (<span class="type">double</span> r );</span><br><span class="line"><span class="built_in">Complex</span> (Complex c1, Complex c2);</span><br></pre></td></tr></table></figure><p>构造函数最好是public的，private构造函数 不能直接用来初始化对象</p><h2 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h2><p>只有一个参数，既对同类对象的引用</p><ul><li><code>X::X( X &amp;)</code></li><li><code>X::X(const X &amp;)</code></li></ul><p>没有定义，编译器会自动生成。如果定义了，默认的就不存在。</p><h3 id="使用的三种情况"><a href="#使用的三种情况" class="headerlink" title="使用的三种情况"></a>使用的三种情况</h3><ul><li>用一个对象去<strong>初始化</strong>同类的另一个对象（不适用于赋值！）</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Complex <span class="title">c2</span><span class="params">(c1)</span></span>;</span><br><span class="line">Complex c2 = c1;</span><br></pre></td></tr></table></figure><ul><li>如果某函数有一个参数是类 A 的对象，那么该函数被调用时，类A的复制构造函数将被调用。（即形参用构造函数初始化，这时<strong>形参和实参就不一定相等</strong>了！）</li><li>如果函数的返回值是类A的对象时，则函数返回时，A的复制构造函数被调用。（这时<strong>返回值也不一定与返回对象相等</strong>！）</li></ul><h2 id="类型转换构造函数"><a href="#类型转换构造函数" class="headerlink" title="类型转换构造函数"></a>类型转换构造函数</h2><p>目的：</p><ul><li>实现类型的自动转换</li></ul><p>特点：</p><ul><li>只有一个参数</li><li>不是复制构造函数</li></ul><p>编译系统会自动调用转换构造函数</p><ul><li>建立一个临时对象/临时变量</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">double</span> real, imag;</span><br><span class="line">  <span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i)</span><br><span class="line">    &#123;</span><br><span class="line">      real = r;</span><br><span class="line">      imag = i;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">Complex</span>(<span class="type">int</span> i)</span><br><span class="line">    &#123;</span><br><span class="line">      real = i;</span><br><span class="line">      imag = <span class="number">0</span>;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;IntConstructor called&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">7</span>, <span class="number">8</span>)</span></span>;</span><br><span class="line">  Complex c2 = <span class="number">12</span>; <span class="comment">// 初始化</span></span><br><span class="line">c1 = <span class="number">9</span>; <span class="comment">// 赋值，9被自动转换成一个临时的Complex对象</span></span><br><span class="line">  cout &lt;&lt; c1.real &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; c1.imag &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>成员函数的一种</p><ul><li>名字与类名相同</li><li>在前面加<code>~</code></li><li>没有参数和返回值</li><li>一个类最多只有一个析构函数</li></ul><p>对象消亡时自动调用析构函数，在对象消亡前做善后工作，释放动态分配的空间等等</p><p>定义类时没写析构函数, 则编译器生成缺省析构函数，但不涉及释放用户申请的内存释放等清理工作</p><h2 id="静态成员变量和静态成员函数"><a href="#静态成员变量和静态成员函数" class="headerlink" title="静态成员变量和静态成员函数"></a>静态成员变量和静态成员函数</h2><p>静态成员：在说明前面加了<code>static</code>关键字的成员。 </p><ul><li>普通成员变量每个对象有各自的一份，而静态成员变量一共就一份，为所有对象共享。 </li></ul><blockquote><p> <code>sizeof</code> 运算符不会计算静态成员变量。 静态成员变量放在所有对象的外部</p></blockquote><p>普通成员函数必须具体作用于某个对象，而静态成员函数并不具体作用与某个对象。 </p><p>因此静态成员<strong>不需要通过对象</strong>就能访问。</p><ul><li><code>类名::成员名</code>：<code>CRectangle::PrintTotal();</code></li><li><code>对象名.成员名</code>：<code>CRectangle r; r.PrintTotal();</code></li><li><code>指针-&gt;成员名</code>：<code>CRectangle * p = &amp;r;   p-&gt;PrintTotal();</code></li><li><code>引用.成员名</code>：<code>CRectangle &amp; ref = r;  int n = ref.nTotalNumber;</code></li></ul><p>静态成员变量本质上是全局变量，哪怕一个对象都不存在，类的静态成员变量也存在静态成员函数本质上是全局函数，设置静态成员这种机制的目的是将和某些类紧密相关的全局变量和函数写到类里面，看上去像一个整体，易于维护和理解。 </p><p>注意：</p><ul><li>静态成员变量需要在类外部特别声明初始化：<code>int CRectangle::nTotalNumber = 0;</code></li><li>在静态成员函数中，不能访问非静态成员变量， 也不能调用非静态成员函数。（原因，不知道作用于哪个对象）</li></ul><h2 id="成员对象和封闭类"><a href="#成员对象和封闭类" class="headerlink" title="成员对象和封闭类"></a>成员对象和封闭类</h2><p>成员对象: 一个类的成员变量是另一个类的对象</p><p>包含成员对象的类叫封闭类 (Enclosing) </p><p>封闭类一定要自己定义构造函数，可以利用初始化列表方便的定义构造函数</p><h3 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">类名::构造函数(参数表):成员变量<span class="number">1</span>(参数表), 成员变量<span class="number">2</span>(参数表), … </span><br><span class="line">&#123; </span><br><span class="line">… </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成员对象初始化列表中的参数</p><ul><li>任意复杂的表达式</li><li>函数 / 变量/ 表达式中的函数，变量有定义 </li></ul><h3 id="调用顺序"><a href="#调用顺序" class="headerlink" title="调用顺序"></a>调用顺序</h3><p>当封闭类对象生成时：</p><ul><li><p>S1: 执行所有成员对象的构造函数</p></li><li><p>S2: 执行封闭类的构造函数</p></li></ul><p>成员对象的构造函数调用顺序：</p><ul><li>和成员对象在类中的说明顺序一致</li><li>与在成员初始化列表中出现的顺序无关</li></ul><p>当封闭类的对象消亡时：</p><ul><li>S1: 先执行封闭类的析构函数</li><li>S2: 执行成员对象的析构函数</li></ul><p>析构函数顺序和构造函数的调用顺序相反 </p><h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h3><p>一个类的友元函数可以访问该类的私有成员</p><h3 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h3><p>A是B的友元类 $\rightarrow$ A的成员函数可以访问B的私有成员 </p><p>友元类之间的关系不能传递，不能继承</p><h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a><code>this</code>指针</h2><p>起源：C++程序翻译为C程序示例</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CCar</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> price;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">SetPrice</span><span class="params">(<span class="type">int</span> p)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCar::SetPrice</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  price = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CCar car;</span><br><span class="line">  car.<span class="built_in">SetPrice</span>(<span class="number">20000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CCar</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SetPrice</span><span class="params">(<span class="keyword">struct</span> CCar *this, <span class="type">int</span> p)</span></span><br><span class="line">&#123;</span><br><span class="line">this-&gt;price = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">CCar</span> <span class="title">car</span>;</span></span><br><span class="line">  SetPrice(&amp;car, <span class="number">20000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>this</code> 指针的作用：其作用就是指向成员函数所作用的对象，例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Complex <span class="title">AddOne</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;real++;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Hello</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;hello&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  <span class="comment">// 相当于 void Hello(A * this ) &#123; cout &lt;&lt; &quot;hello&quot; &lt;&lt; endl; &#125;</span></span><br><span class="line">  <span class="comment">// 如果是 void Hello() &#123; cout &lt;&lt; i &lt;&lt; &quot;hello&quot; &lt;&lt; endl; &#125; 就出错</span></span><br><span class="line">&#125;;      </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  A *p = <span class="literal">NULL</span>;</span><br><span class="line">  p-&gt;<span class="built_in">Hello</span>();</span><br><span class="line">  <span class="built_in">Hello</span>(p); </span><br><span class="line">&#125; <span class="comment">// 输出：hello</span></span><br></pre></td></tr></table></figure><p>静态成员函数中不能使用 this 指针！ 因为静态成员函数并不具体作用与某个对象! 因此，静态成员函数的真实的参数的个数，就是程序中写出的参数个数！ </p><h2 id="常量对象、常量成员函数、常引用"><a href="#常量对象、常量成员函数、常引用" class="headerlink" title="常量对象、常量成员函数、常引用"></a>常量对象、常量成员函数、常引用</h2><h3 id="常量对象"><a href="#常量对象" class="headerlink" title="常量对象"></a>常量对象</h3><p>如果不希望某个对象的值被改变，则定义该对象的时候可以在<strong>前面</strong>加 <code>const</code> 关键字。 </p><ul><li>不能修改常量对象的值</li><li>不能调用非常量成员函数</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="keyword">class</span> <span class="title class_">instance</span>;</span><br></pre></td></tr></table></figure><h3 id="常量成员函数"><a href="#常量成员函数" class="headerlink" title="常量成员函数"></a>常量成员函数</h3><p>在类的成员函数说明<strong>后面</strong>可以加<code>const</code>关键字，则 该成员函数成为常量成员函数。</p><p>常量成员函数执行期间不应修改其所作用的对象 。因此，在常量成员函数中：</p><ul><li>不能修改成员变量的值 （静态成员变量除外）</li><li>也不能调用同类的非常量成员函数（静态成员函数除外）。</li></ul><p>常量成员函数的重载：两个成员函数，名字和参数表都一样，但是一个 是<code>const</code>，一个不是，算重载。</p><h3 id="常引用"><a href="#常引用" class="headerlink" title="常引用"></a>常引用</h3><p>引用前面可以加<code>const</code>关键字，成为常引用。 不能通过常引用，修改其引用的变量。</p><p>为了减少形参调用复制构造函数的开销，可以使用对象的引用做参数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sample</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintObj</span><span class="params">(<span class="type">const</span> Sample &amp;o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c程序学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础学习c程序（二） ——c程序设计进阶</title>
      <link href="/2022/10/25/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0c%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%BA%8C%EF%BC%89-%E2%80%94%E2%80%94c%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/10/25/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0c%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%BA%8C%EF%BC%89-%E2%80%94%E2%80%94c%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的定义与声明"><a href="#函数的定义与声明" class="headerlink" title="函数的定义与声明"></a>函数的定义与声明</h2><p>以一个求绝对值的过程为例：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int absolute(int n)</span><br><span class="line">&#123;</span><br><span class="line">    if(n &lt; 0)</span><br><span class="line">    return (-n);</span><br><span class="line">    else</span><br><span class="line">    return n;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m = -123, result = 0;</span><br><span class="line">    result = absolute(m);</span><br><span class="line">    cout &lt;&lt; result;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其中<code>(int n)</code>为形式参数（形参），即形式上的参数，并非真正让函数执行传给参数，只是用来辅助函数定义。<code>m</code>为实际参数（实参），是实际运行时传入的参数。<br>函数需要有函数类型（返回类型），函数名称，参数，函数主体。<br>函数的调运方式可以分为下面三种：  </p><ol><li>函数调用<strong>作为独立语句</strong>，例如：  <pre><code>  `stringprint()`  </code></pre></li><li>函数<strong>作为表达式的一部分</strong>，例如：  <pre><code> `number = max(numA,numB)/2;`  </code></pre></li><li>以<strong>实参形式出现在其他函数的调用中</strong>，例如：  <pre><code> `number = min(sum(-5,100),numC);`</code></pre></li></ol><p>函数可以没有输入参数和返回值  </p><p><strong>函数是c程序的基本构成单位</strong>    </p><ul><li>一个c程序有一个或多个源程序文件组成。</li><li>一个源程序文件可以由一个或多个函数组成。<br><a href="https://imgse.com/i/xffZ26"><img src="https://s1.ax1x.com/2022/10/27/xffZ26.png" alt="xffZ26.png"></a><br>将两个文件放进同一个目录之下，在主函数的头文件中输入<code>#include &quot;max.h&quot;</code>就可以连接两个文件。注意的是<code>&lt;&gt;</code>默认先搜索系统函数库，<code>&quot;&quot;</code>优先搜索当前目录。 </li></ul><p><strong>函数都是有”类型”的</strong>    </p><ul><li>函数的类型是指<strong>函数返回值的数据类型</strong>   <h2 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h2>可以将函数定义在main函数后面，但需要声明该函数<br><a href="https://imgse.com/i/xffhdJ"><img src="https://s1.ax1x.com/2022/10/27/xffhdJ.png" alt="xffhdJ.png"></a><br>函数的原型 = 返回值类型 + 函数名 + 参数类型<br>总结：<br><a href="https://imgse.com/i/xfhDmD"><img src="https://s1.ax1x.com/2022/10/27/xfhDmD.png" alt="xfhDmD.png"></a><h2 id="函数的执行"><a href="#函数的执行" class="headerlink" title="函数的执行"></a>函数的执行</h2>main函数是程序执行的入口点，过程中如果遇到了新的函数调用的语句，main函数被打断，执行这个新的函数调用的语句，之后main函数再向下执行（绿色为内存空间）<br><a href="https://imgse.com/i/xhV8DP"><img src="https://s1.ax1x.com/2022/10/27/xhV8DP.png" alt="xhV8DP.png"></a><br>被打断时，main函数会1。初始化新的函数，2.传递参数，3.保存当前现场，之后接1.收函数的返回值，2.恢复现场，从断点处继续执行<br>调用结束后，这部分内存空间会被释放掉<br><a href="https://imgse.com/i/xhVljI"><img src="https://s1.ax1x.com/2022/10/27/xhVljI.png" alt="xhVljI.png"></a><h3 id="函数参数的传递"><a href="#函数参数的传递" class="headerlink" title="函数参数的传递"></a>函数参数的传递</h3>是复制参数，对原参数没有影响<br><strong>copy!!!!</strong><br><a href="https://imgse.com/i/xhV3ut"><img src="https://s1.ax1x.com/2022/10/27/xhV3ut.png" alt="xhV3ut.png"></a><h2 id="变量的作用范围"><a href="#变量的作用范围" class="headerlink" title="变量的作用范围"></a>变量的作用范围</h2></li></ul><ol><li>局部变量<br>在函数内或块内定义，只在这个函数或块内起作用的变量。</li><li>全局变量<br>在所有函数外定义的变量，它的作用域是从定义变量的位置开始到本程序文件结束。</li></ol><p><a href="https://imgse.com/i/xhZOoT"><img src="https://s1.ax1x.com/2022/10/27/xhZOoT.png" alt="xhZOoT.png"></a><br>当全局变量与局部变量同名时，局部变量将在自己作用域内有效，它将屏蔽同名的全局变量</p><h2 id="数组与函数"><a href="#数组与函数" class="headerlink" title="数组与函数"></a>数组与函数</h2><h3 id="数组元素做函数参数"><a href="#数组元素做函数参数" class="headerlink" title="数组元素做函数参数"></a>数组元素做函数参数</h3><p>与正常情况相同</p><h3 id="数组名做函数参数"><a href="#数组名做函数参数" class="headerlink" title="数组名做函数参数"></a>数组名做函数参数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void change(int a[])</span><br><span class="line">&#123;</span><br><span class="line">    a[0] = 30;</span><br><span class="line">    a[1] = 50;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[2] = &#123;3, 5&#125;;</span><br><span class="line">    change(a)</span><br><span class="line">    cout &lt;&lt; a[0] &lt;&lt; &quot; &quot; &lt;&lt; a[1] &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终端输出结果为 30 50<br>传递时仍然是copy参数，注意数组名a不是变量，是常量，代表数组在内存中的地址<br>相当于把数组在内存中的地址传入了函数<br><a href="https://imgse.com/i/xheg1J"><img src="https://s1.ax1x.com/2022/10/27/xheg1J.png" alt="xheg1J.png"></a></p><h2 id="函数应用示例"><a href="#函数应用示例" class="headerlink" title="函数应用示例"></a>函数应用示例</h2><p><a href="https://imgse.com/i/xhnFPO"><img src="https://s1.ax1x.com/2022/10/27/xhnFPO.png" alt="xhnFPO.png"></a><br><a href="https://imgse.com/i/xhnCa6"><img src="https://s1.ax1x.com/2022/10/27/xhnCa6.png" alt="xhnCa6.png"></a><br>需要计算的信息 年，月，日，星期<br>其中星期不受其他因素影响<br>思路：<br><a href="https://imgse.com/i/xhnPIK"><img src="https://s1.ax1x.com/2022/10/27/xhnPIK.png" alt="xhnPIK.png"></a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int days;</span><br><span class="line">int get_dayofweek();</span><br><span class="line">int get_year();</span><br><span class="line">int get_month(int);</span><br><span class="line">int main() &#123;</span><br><span class="line">    int year, month, dayofweek;</span><br><span class="line">    int leap_year;</span><br><span class="line">    char week[7][10] = &#123;&quot;Saturday&quot;,&quot;Sunday&quot;,&quot;Monday&quot;,&quot;Tuesday&quot;,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;&#125;;</span><br><span class="line">    while((cin &gt;&gt; days) &amp;&amp; days != -1) &#123;</span><br><span class="line">        dayofweek = get_dayofweek();</span><br><span class="line">        year = get_year();</span><br><span class="line">        leap_year = (year % 4 == 0 &amp;&amp; year % 100 != 0 || year % 400 == 0);</span><br><span class="line">        month = get_month(leap_year);</span><br><span class="line">        cout &lt;&lt; year &lt;&lt; &quot;-&quot; &lt;&lt; month &lt;&lt; &quot;-&quot; &lt;&lt; ++days &lt;&lt; &quot; &quot; &lt;&lt; week[dayofweek];</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">// 计算星期几</span><br><span class="line">int get_dayofweek() &#123;</span><br><span class="line">    int dayofweek;</span><br><span class="line">    dayofweek = days % 7;</span><br><span class="line">    return dayofweek;</span><br><span class="line">&#125;</span><br><span class="line">// 计算年数</span><br><span class="line">int get_year() &#123;</span><br><span class="line">    int i = 2000, leap_year;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">        leap_year = (i % 4 == 0 &amp;&amp; i % 100 != 0 || i % 400 == 0);</span><br><span class="line">        if(leap_year == 1 &amp;&amp; days &gt;= 366) &#123;</span><br><span class="line">            days = days - 366;</span><br><span class="line">            i++;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(leap_year == 0 &amp;&amp; days &gt;= 365) &#123;</span><br><span class="line">            days = days - 365;</span><br><span class="line">            i++;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    return i;</span><br><span class="line">&#125;</span><br><span class="line">// 计算月份</span><br><span class="line">int get_month(int leap_year) &#123;</span><br><span class="line">    int pmonth[12] = &#123;31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31&#125;;</span><br><span class="line">    int rmonth[12] = &#123;31, 29, 31, 30, 31, 30, 31, 31, 30 ,31, 30, 31&#125;;</span><br><span class="line">    int j = 0;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">        if(leap_year == 1 &amp;&amp; days &gt;= rmonth[j]) &#123;</span><br><span class="line">            days = days - rmonth[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(leap_year == 0 &amp;&amp; days &gt;= pmonth[j]) &#123;</span><br><span class="line">            days = days - rmonth[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        else break;</span><br><span class="line">        &#125;</span><br><span class="line">        return ++j;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><strong>全局变量</strong></p><ul><li>破坏了函数的“相对独立性”</li><li>增加了函数之间的“耦合性”</li><li>函数之间的交互不够清晰</li><li>不在非常必要的情况下，不要使用全局变量</li></ul><h2 id="函数的递归"><a href="#函数的递归" class="headerlink" title="函数的递归"></a>函数的递归</h2><h3 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h3><ul><li><strong>函数不能嵌套定义</strong><ul><li>所有函数一律平等</li></ul></li><li><strong>函数可以嵌套调用</strong><ul><li>无论嵌套多少层，原理都一样  </li><li><strong>函数可以调用自己吗？</strong></li></ul></li></ul><p><a href="https://imgse.com/i/xofHbV"><img src="https://s1.ax1x.com/2022/10/31/xofHbV.png" alt="xofHbV.png"></a><br>上面这种方式就称为“递归调用”<br>一个函数在其定义中直接或间接调用自身的一种方法。<br><strong>递归调用与普通调用没有区别！！！</strong></p><p><a href="https://imgse.com/i/xohXeP"><img src="https://s1.ax1x.com/2022/10/31/xohXeP.png" alt="xohXeP.png"></a></p><h3 id="深入理解递归的过程"><a href="#深入理解递归的过程" class="headerlink" title="深入理解递归的过程"></a>深入理解递归的过程</h3><p><a href="https://imgse.com/i/xo4jXR"><img src="https://s1.ax1x.com/2022/10/31/xo4jXR.png" alt="xo4jXR.png"></a></p><h3 id="递归的作用"><a href="#递归的作用" class="headerlink" title="递归的作用"></a>递归的作用</h3><ol><li>切饼</li></ol><p><a href="https://imgse.com/i/xo5eBt"><img src="https://s1.ax1x.com/2022/10/31/xo5eBt.png" alt="xo5eBt.png"></a></p><ul><li>q(n) = q(n - 1) + n;</li><li>q(0) = 1;</li></ul><p><a href="https://imgse.com/i/xojcN9"><img src="https://s1.ax1x.com/2022/10/31/xojcN9.png" alt="xojcN9.png"></a></p><p><strong>递归与递推</strong></p><ul><li><strong>不同</strong><ul><li>递推的关注点放在<em>起始点</em></li><li>递归的关注点放在<em>求解目标</em></li></ul></li><li><strong>相同</strong><ul><li>重点在表现<em>第<code>i</code>次</em>与<em>第<code>i+1</code>次</em>的关系  </li></ul></li></ul><p><strong>用递归实现递推</strong></p><ul><li><strong>优点</strong><ul><li>让程序变得简明</li></ul></li><li><strong>方法</strong><ul><li>把关注点放到要求解的目标上</li><li>找到第<code>n</code>次做与第<code>n-1</code>次做之间的关系</li><li>确定第<code>1</code>次的返回结果  </li></ul></li></ul><ol><li>斐波那契数列</li></ol><p><a href="https://imgse.com/i/xovP4s"><img src="https://s1.ax1x.com/2022/10/31/xovP4s.png" alt="xovP4s.png"></a></p><ol><li>进制转换</li></ol><p>余数需要反向输出，因此<code>cout</code>在调用<code>convert</code>函数之后</p><p><a href="https://imgse.com/i/xovvGR"><img src="https://s1.ax1x.com/2022/10/31/xovvGR.png" alt="xovvGR.png"></a></p><ol><li>汉诺塔问题<br><a href="https://imgse.com/i/x7soxx"><img src="https://s1.ax1x.com/2022/11/01/x7soxx.png" alt="x7soxx.png"></a><br><a href="https://imgse.com/i/x7s5GR"><img src="https://s1.ax1x.com/2022/11/01/x7s5GR.png" alt="x7s5GR.png"></a></li></ol><ul><li>当只有一个盘子时，仅需<code>a -- c</code>   </li><li>当有两个盘子时，需要如图<code>123</code>步   </li><li>当有三个以上的盘子时，都可以理解成最下面的盘子和上面一个（堆）盘子的情况，因此依然是如图的<code>123</code>步<br><a href="https://imgse.com/i/x7sIR1"><img src="https://s1.ax1x.com/2022/11/01/x7sIR1.png" alt="x7sIR1.png"></a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void move(int m, char x, char y, char z)</span><br><span class="line">&#123;</span><br><span class="line">    if(m == 1)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;把一个盘子从&quot; &lt;&lt; x &lt;&lt; &quot;移动到&quot; &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        move(m - 1, x, z, y);</span><br><span class="line">        cout &lt;&lt; &quot;把一个盘子从&quot; &lt;&lt; x &lt;&lt; &quot;移动到&quot; &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">        move(m - 1, y, x, z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n;</span><br><span class="line">    cout &lt;&lt; &quot;请输入盘数n =&quot;;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; &quot;在3根柱子上移动&quot; &lt;&lt; n &lt;&lt; &quot;只盘的步骤为：&quot; &lt;&lt; endl;</span><br><span class="line">    move(n, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟连续发生的动作"><a href="#模拟连续发生的动作" class="headerlink" title="模拟连续发生的动作"></a>模拟连续发生的动作</h2><ul><li><strong>方法</strong><ul><li>搞清楚连续发生的动作是什么（定义函数）<br> <code>void move(int m, char x, char y, char z)</code></li><li>搞清楚不同次动作之间的关系（描述递归函数之间关系）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">move(m - 1, x, z, y);</span><br><span class="line">cout &lt;&lt; &quot;把一个盘子从&quot; &lt;&lt; x &lt;&lt; &quot;移动到&quot; &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">move(m - 1, y, x, z);</span><br></pre></td></tr></table></figure></li><li>搞清楚边界条件是什么（描述边界条件）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> if(m == 1)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;把一个盘子从&quot; &lt;&lt; x &lt;&lt; &quot;移动到&quot; &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol><li>放苹果<br>题目：把M个同样的苹果放在N个同样的盘子里，允许有的盘子空着不放，问共有多少种不同的分法？<br>注意：5，1，1和1，5，1是同一种分法<br>输入：7 3<br>输出： 8<br>先设定有一个函数<code>f(m, n)</code>能解决这个问题，分为两种情况，如果盘子数大于苹果数，那么<code>f(m,n) = f(m, m)</code>,因为多余的盘子是可以删去的<br><a href="https://imgse.com/i/x7ySzt"><img src="https://s1.ax1x.com/2022/11/01/x7ySzt.png" alt="x7ySzt.png"></a><br>如果苹果数大于等于盘子数，那么再次分为有盘子空着和没盘子空着，如果是有盘子空着的情况，那假设每次都至少有一个盘子空着，那么删除这个盘子对结果没有影响，即<code>f(m, n) = f(m, n - 1)</code>,如果是没盘子空着的情况，那减去每个盘子上至少放的苹果，对最后结果没有影响，即<code>f(m , n) = f(m - n, n)</code>，之后的过程将重复这些可能继续下去<br><a href="https://imgse.com/i/x72lcR"><img src="https://s1.ax1x.com/2022/11/01/x72lcR.png" alt="x72lcR.png"></a></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int count(int m, int n)</span><br><span class="line">&#123;</span><br><span class="line">    if(m &lt;= 0 || n &lt;= 1)</span><br><span class="line">        return 1;</span><br><span class="line">    if(m &lt; n)</span><br><span class="line">        return count(m , m);</span><br><span class="line">    else</span><br><span class="line">        return count(m, n - 1) + count(m - n, n);</span><br><span class="line">&#125;</span><br><span class="line">int  main()</span><br><span class="line">&#123;</span><br><span class="line">    int apples, plates;</span><br><span class="line">    cin &gt;&gt; apples &gt;&gt; plates;</span><br><span class="line">    cout &lt;&lt; count(apples, plates);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>逆波兰表达式<br>每遇到一个运算符就是一个独立的逆波兰表达式的开始<br><a href="https://imgse.com/i/x7yUQx"><img src="https://s1.ax1x.com/2022/11/01/x7yUQx.png" alt="x7yUQx.png"></a><br><a href="https://imgse.com/i/x7ydOK"><img src="https://s1.ax1x.com/2022/11/01/x7ydOK.png" alt="x7ydOK.png"></a><br><a href="https://imgse.com/i/x7yay6"><img src="https://s1.ax1x.com/2022/11/01/x7yay6.png" alt="x7yay6.png"></a></li></ol><h3 id="利用递归进行“自动分析”"><a href="#利用递归进行“自动分析”" class="headerlink" title="利用递归进行“自动分析”"></a>利用递归进行“自动分析”</h3><ul><li><strong>方法</strong><ul><li>先假设 存在一个函数能给出答案</li><li>在利用这个函数的前提下，分析如何解决问题</li><li>搞清楚最简单的情况下答案是什么</li></ul></li></ul><h2 id="习题课一-：枚举、模拟与递归"><a href="#习题课一-：枚举、模拟与递归" class="headerlink" title="习题课一 ：枚举、模拟与递归"></a>习题课一 ：枚举、模拟与递归</h2><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="什么是指针"><a href="#什么是指针" class="headerlink" title="什么是指针"></a>什么是指针</h2><p>变量的三要素：变量的地址、变量的值、变量名字<br>变量的地址称为“指向该变量的指针”<br>可以用<strong>取地址运算符<code>&amp;</code></strong> 来得到一个变量的地址<br><code>cout &lt;&lt; &amp;c &lt;&lt; endl</code> 获取变量<code>c</code>的地址<br>可以用<strong>指针运算符<code>*</code></strong> 实现操作变量<br><code>cout &lt;&lt; *&amp;c &lt;&lt; endl = cout &lt;&lt; c &lt;&lt; endl</code></p><h2 id="什么是指针变量"><a href="#什么是指针变量" class="headerlink" title="什么是指针变量"></a>什么是指针变量</h2><p>专门用于存放指针（某个变量的地址）的变量  </p><p><a href="https://imgse.com/i/zClGY4"><img src="https://s1.ax1x.com/2022/11/11/zClGY4.png" alt="zClGY4.png"></a></p><p><code>pointer</code> 就是一个指针变量，值为<code>c</code>的地址，称为<em>指向变量<code>c</code>的“指针变量”</em>，且指针变量<code>pointer</code>也有自己的地址。</p><h2 id="定义一个指针变量"><a href="#定义一个指针变量" class="headerlink" title="定义一个指针变量"></a>定义一个指针变量</h2><p><code>int * pointer</code> <code>int</code> 是指针变量的<strong>基类型</strong><br><code>*</code>是指针运算符，<code>pointer</code>的类型<br><code>pointer</code> 是指针变量的名字<br>基类型 ：指针变量<strong>指向的</strong>变量的类型<br>指针变量的定义<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int c = 76;</span><br><span class="line">int * pointer;</span><br><span class="line">pointer = &amp;c;</span><br></pre></td></tr></table></figure><br>赋值后，称指针变量<code>pointer</code>指向了变量<code>c</code><br><code>pointer</code>只能用来存放地址<br><code>*pointer</code> 为 <code>pointer</code>所<strong>指向的存储单元的内容</strong>是<strong>变量<code>c</code></strong><br><code>NULL</code>空指针，通常用<code>int *p1 = NULL</code>赋予初始值</p><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p><a href="https://imgse.com/i/zCHkHH"><img src="https://s1.ax1x.com/2022/11/11/zCHkHH.png" alt="zCHkHH.png"></a></p><ul><li><code>&amp;*pointer = &amp;(*pointer)</code>  </li><li><code>*&amp;a = *(&amp;a)</code></li><li><code>(*pointer)++</code> 不等于 <code>*pointer++</code></li></ul><h3 id="指针变量的"><a href="#指针变量的" class="headerlink" title="指针变量的++--"></a>指针变量的<code>++--</code></h3><p><code>pointer++</code>的含义<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 0;</span><br><span class="line">int * p2 = NULL;</span><br><span class="line">p2 = &amp;a;</span><br><span class="line">p2++;</span><br></pre></td></tr></table></figure><br>此时<code>p2++</code>指向地址<code>0x0012FF7A</code> ，原因是基类型为<code>int</code>型，所以将跨过四个字节，因此也说明基类型的重要性</p><p><a href="https://imgse.com/i/zC3JMR"><img src="https://s1.ax1x.com/2022/11/11/zC3JMR.png" alt="zC3JMR.png"></a><br><a href="https://imgse.com/i/zC8u6A"><img src="https://s1.ax1x.com/2022/11/11/zC8u6A.png" alt="zC8u6A.png"></a></p><h2 id="数组与指针"><a href="#数组与指针" class="headerlink" title="数组与指针"></a>数组与指针</h2><p>数组的地址<br>数组名代表数组首元素的地址<br>数组名相当于指向数组第一个元素的指针<br><code>*a = a[0]</code></p><h3 id="用指针访问数组"><a href="#用指针访问数组" class="headerlink" title="用指针访问数组"></a>用指针访问数组</h3><p><a href="https://imgse.com/i/zCHlDg"><img src="https://s1.ax1x.com/2022/11/11/zCHlDg.png" alt="zCHlDg.png"></a></p><p><strong>注意</strong>   </p><ul><li><code>int * p = &amp;a[0]</code> </li><li><code>a++</code> 没有意义，但是<code>p++</code>会引起<code>p</code>变化</li><li><code>p</code>可以指向数组最后一个元素以后的元素  </li></ul><p><strong>指针做加减运算一定注意有效的范围</strong></p><p>例子 ：倒置数组元素<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int a[10], *p = NULL, *q = NULL,temp;</span><br><span class="line">    for(p = a; p &lt; a + 10; p++)</span><br><span class="line">    cin &gt;&gt; *p;</span><br><span class="line">    for(p = a, q = a + 9; p &lt; q; p++, q--) &#123;</span><br><span class="line">        temp = *p; *p = *q; *q = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    for(p = a; p &lt; a + 10; p++)</span><br><span class="line">    cout &lt;&lt; setw(3) &lt;&lt; *p;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="字符串与指针"><a href="#字符串与指针" class="headerlink" title="字符串与指针"></a>字符串与指针</h2><p>指向数组的指针<br><code>int a[10]; int *p; p = a;</code><br>指向字符串的指针<br><code>char a[10]; char *p; p = a;</code>  </p><p>注意，在打印字符数组时<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char a[3] = &#123;&#x27;h&#x27;,&#x27;i&#x27;,&#x27;\0&#x27;&#125;;</span><br><span class="line">char *p = a;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p &lt;&lt; endl;</span><br></pre></td></tr></table></figure></p><p>输出结果都会是<code>hi</code>,如果想输出字符串的地址应该使用<code>cout &lt;&lt; static_cast&lt;void*&gt; (c) &lt;&lt; endl</code>  </p><p>字符串指针举例<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头文件</span><br><span class="line">int main() &#123;</span><br><span class="line">    char buffer[10] = &quot;ABC&quot;;</span><br><span class="line">    char *pc;</span><br><span class="line">    pc = &quot;hello&quot;;</span><br><span class="line">    cout &lt;&lt; pc &lt;&lt; endl;</span><br><span class="line">    pc++;</span><br><span class="line">    cout &lt;&lt; pc &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; *pc &lt;&lt; endl;</span><br><span class="line">    pc = buffer;</span><br><span class="line">    cout &lt;&lt; pc ;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果为<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">ello</span><br><span class="line">e</span><br><span class="line">ABC</span><br></pre></td></tr></table></figure></p><h2 id="再谈一维数组的地址"><a href="#再谈一维数组的地址" class="headerlink" title="再谈一维数组的地址"></a>再谈一维数组的地址</h2><p><code>a</code>相当于指向数组首元素地址的指针<br><code>&amp;a</code>相当于整个数组的指针<br><code>*(&amp;a)</code>相当于<code>a</code></p><p><a href="https://imgse.com/i/zCoVNq"><img src="https://s1.ax1x.com/2022/11/11/zCoVNq.png" alt="zCoVNq.png"></a><br><a href="https://imgse.com/i/zCo8ER"><img src="https://s1.ax1x.com/2022/11/11/zCo8ER.png" alt="zCo8ER.png"></a></p><p><strong><code>&amp;a</code>相当于管辖范围上升一级</strong><br><strong><code>*a</code>相当于管辖范围下降一级</strong></p><h2 id="指向二维数组的指针"><a href="#指向二维数组的指针" class="headerlink" title="指向二维数组的指针"></a>指向二维数组的指针</h2><p>二维数组a[3][4]包含三个元素：a[0],a[1],a[2]<br>每一个元素都是一个包含四个整形元素的数组<br>也就是说，二维数组第一个元素a[0]是个包含四个整形元素的一维数组<br>a[0]是数组元素a[0][0]的指针<br><a href="https://imgse.com/i/ziYRnH"><img src="https://s1.ax1x.com/2022/11/12/ziYRnH.png" alt="ziYRnH.png"></a><br>规律</p><ul><li>数组名相当于指向数组第一个元素的指针</li><li><code>&amp;E</code>相当于<code>E</code>管辖范围上升一级</li><li><code>*E</code>相当于<code>E</code>管辖范围下降一级</li></ul><h2 id="指针的例子"><a href="#指针的例子" class="headerlink" title="指针的例子"></a>指针的例子</h2><ol><li>遍历二维数组</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头文件</span><br><span class="line">int main() &#123;</span><br><span class="line">    int a[3][4] = &#123;1,3,5,7,9,11,13,15,17,19,21,23&#125;;</span><br><span class="line">    int *p;</span><br><span class="line">    for(p = &amp;a[0][0]; p &lt; &amp;a[0][0] + 12; p++) &#123;</span><br><span class="line">        cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>利用指针变量引用多维数组中的数组<br>变量定义语句<code>int (*p)[4]</code>，意思是指向”包含<code>4</code>个<code>int</code>型元素的一维数组”的指针变量<br><a href="https://imgse.com/i/ziYccD"><img src="https://s1.ax1x.com/2022/11/12/ziYccD.png" alt="ziYccD.png"></a><br><a href="https://imgse.com/i/ziYgje"><img src="https://s1.ax1x.com/2022/11/12/ziYgje.png" alt="ziYgje.png"></a></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int a[3][4] = &#123;1,3,5,7,9,11,13,15,17,19,21,23&#125;;</span><br><span class="line">    int (*p)[4], i, j;</span><br><span class="line">    p = a;</span><br><span class="line">    cin &gt;&gt; i &gt;&gt; j;</span><br><span class="line">    cout &lt;&lt; setw(4) &lt;&lt; p[i][j];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针与函数"><a href="#指针与函数" class="headerlink" title="指针与函数"></a>指针与函数</h2><h3 id="指针用作函数参数"><a href="#指针用作函数参数" class="headerlink" title="指针用作函数参数"></a>指针用作函数参数</h3><p>可以将<strong>数组名</strong>作为实参赋给<strong>指针型形参</strong> 。<br>如果想把多维数组名做函数参数<strong>可以在函数定义中</strong>使用<code>int(*p)[数字]</code>或者<code>int p[][数字]</code>的方式。<br>“数组名”可以做形参，因为c++编译器将<strong>形参数组名</strong>作为<strong>指针变量</strong>来处理。  </p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int sum(int array[], int n)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i = 0; i &lt; 10 - 1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *(array + 1) = *array + *(array + 1);</span><br><span class="line">        array++;</span><br><span class="line">    &#125;</span><br><span class="line">    return *array;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[10] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;;</span><br><span class="line">    cout &lt;&lt; sum(a, 10);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出现问题：会修改到数组的值<br>如何”限制”指针实参的功能 ?  </p><h3 id="指向符号常量的指针"><a href="#指向符号常量的指针" class="headerlink" title="指向符号常量的指针"></a>指向符号常量的指针</h3><p>符号常量声明语句：</p><ul><li>方式一：<code>const</code> 数据类型 常量名 = 常量值</li><li>方式二：数据类型 <code>const</code> 常量名 = 常量值</li></ul><p>指向符号常量的指针，定义语句:<code>const int * p</code></p><p>关于<strong>指向符号常量的指针</strong><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    const int a = 78; </span><br><span class="line">    const int b = 28;</span><br><span class="line">    int c = 18;</span><br><span class="line">    const int * pi = &amp;a;</span><br><span class="line">    *pi = 58;   // (error ,*p不能被赋值)</span><br><span class="line">    pi = &amp;b;    // (可以给pi重新赋值)</span><br><span class="line">    *pi = 68;   // (error ,*p不能被赋值)</span><br><span class="line">    pi = &amp;c;    // (可以给pi重新赋值)</span><br><span class="line">    *pi = 88;    // (error ,*p不能被赋值)</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="指针用作函数返回值"><a href="#指针用作函数返回值" class="headerlink" title="指针用作函数返回值"></a>指针用作函数返回值</h3><p>返回整型数据的函数: <code>int max(int x, int y)</code><br>返回指针类型数据的函数: <code>int *function(int x, int y)</code></p><ul><li>函数名字前面表示函数的类型 <code>*</code>  </li></ul><p>需要注意的问题<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int * getInt1()</span><br><span class="line">&#123;</span><br><span class="line">    int value = 20;</span><br><span class="line">    return &amp;value;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int * p;</span><br><span class="line">    p = getInt1();</span><br><span class="line">    cout &lt;&lt; * p &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a href="https://imgse.com/i/zANtUJ"><img src="https://s1.ax1x.com/2022/11/14/zANtUJ.png" alt="zANtUJ.png"></a><br><a href="https://imgse.com/i/zANYE4"><img src="https://s1.ax1x.com/2022/11/14/zANYE4.png" alt="zANYE4.png"></a></p><p>以上程序中，<code>p</code>会指向<code>value</code>，但是根据调用函数的过程且<code>value</code>是一个局部变量，调用结束后这部分内存空间将被释放掉，因此如果这部分空间没有被占用，那么结果仍然是<code>20</code>，但如果被占用，将是个无法预测的结果(在我的vs code上是会直接报错的)。</p><p><strong>确保返回地址的意义</strong><br>返回一个处于生命周期中的变量的地址</p><ul><li>返回全局变量的地址，而非局部变量的地址<br>因此可以选择定义一个全局变量来解决</li><li>返回静态局部变量的地址，而非动态局部变量的地址</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int value = 20;</span><br><span class="line">int * getInt1()</span><br><span class="line">&#123;</span><br><span class="line">    return &amp;value;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int * p;</span><br><span class="line">    p = getInt1();</span><br><span class="line">    cout &lt;&lt; * p &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态局部变量"><a href="#静态局部变量" class="headerlink" title="静态局部变量"></a>静态局部变量</h3><p>函数中的局部变量的值在函数调用结束后不消失而保留原值，即其占用的存储空间不释放，下一次函数调用时，仍然可以继续使用该变量<br>定义方式: <code>static</code>来进行声明，<code>static int value = 20</code><br>下面的程序中<code>a</code>为动态局部变量,<code>b</code>为静态局部变量<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void function()</span><br><span class="line">&#123;</span><br><span class="line">    int a = 0;</span><br><span class="line">    static int b = 0;</span><br><span class="line">    a = a + 1;</span><br><span class="line">    b = b + 1;</span><br><span class="line">    cout &lt;&lt; &quot;a=&quot; &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;b=&quot; &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i = 0; i &lt; 5; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        function();</span><br><span class="line">        cout &lt;&lt; &quot;Call Again&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后输出结果中，<code>a</code>将一直都为<code>1</code>，因为每调用一次<code>a</code>，最后<code>a</code>所占用的内存空间都会被释放掉，但是<code>b</code>将会一直保存，因此<code>b=5</code>。<br><a href="https://imgse.com/i/zANd81"><img src="https://s1.ax1x.com/2022/11/14/zANd81.md.png" alt="zANd81.md.png"></a></p><p><strong>小结</strong>  </p><p>指针用作函数参数</p><ul><li>函数拿到地址可对其所指内容进行修改</li><li>可以使用<code>const</code>来”限制”指针的功能</li></ul><p>指针用作函数返回值</p><ul><li>必须确保函数返回的地址是有意义的</li><li>返回全局变量或静态局部变量</li></ul><h1 id="结构体与链表"><a href="#结构体与链表" class="headerlink" title="结构体与链表"></a>结构体与链表</h1><h2 id="什么是结构体"><a href="#什么是结构体" class="headerlink" title="什么是结构体"></a>什么是结构体</h2><p>目的：把一组描述同一个事物的变量捆绑起来<br>构造一个新的数据类型（组合数据类型）—— 结构体<br>定义结构体变量的方式</p><ol><li>直接用已声明的结构体类型定义变量名<br><code>student student1,student2</code> (结构体类型名) （结构体变量名）<br>前面的<code>student</code>等于<code>int / float</code></li><li>在声明类型的同时定义变量<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct person</span><br><span class="line">&#123;</span><br><span class="line"> char name[50];</span><br><span class="line"> int age;</span><br><span class="line"> float salary;</span><br><span class="line">&#125;li1;</span><br></pre></td></tr></table></figure>注意大括号后面的;<br>初始化方法，存储方式与多维数组非常接近,使用点（.）运算符可以访问结构变量的成员<br>toupper 将小写字母转换为大写字母<br>例如<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">    int id_num;</span><br><span class="line">    char name[10];</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    student mike = &#123;123, &#123;&#x27;m&#x27;,&#x27;i&#x27;,&#x27;k&#x27;,&#x27;e&#x27;,&#x27;\0&#x27;&#125;&#125;;</span><br><span class="line">    mike.id_num = 20130000 + mike.id_num;</span><br><span class="line">    for(int i = 0; mike.name[i] != &#x27;\0&#x27;; i++)</span><br><span class="line">    mike.name[i] = toupper(mike.name[i]);</span><br><span class="line">    cout &lt;&lt; mike.id_num &lt;&lt; &quot; &quot; &lt;&lt; mike.name &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体变量与函数"><a href="#结构体变量与函数" class="headerlink" title="结构体变量与函数"></a>结构体变量与函数</h2>结构体变量可以直接赋值，相当于copy一份给对方<br>结构体做参数相当于copy一份给函数<br><a href="https://imgse.com/i/zAa00O"><img src="https://s1.ax1x.com/2022/11/14/zAa00O.png" alt="zAa00O.png"></a><br>结构体做返回值相当于copy一份给调用者<br><a href="https://imgse.com/i/zAaB7D"><img src="https://s1.ax1x.com/2022/11/14/zAaB7D.png" alt="zAaB7D.png"></a></li></ol><h2 id="指向结构体的指针"><a href="#指向结构体的指针" class="headerlink" title="指向结构体的指针"></a>指向结构体的指针</h2><p>与普通变量的引用方法相同<br><a href="https://imgse.com/i/zAwli4"><img src="https://s1.ax1x.com/2022/11/14/zAwli4.png" alt="zAwli4.png"></a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">    int id_num;</span><br><span class="line">    char name[10];</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    student mike = &#123;123, &#123;&#x27;m&#x27;,&#x27;i&#x27;,&#x27;k&#x27;,&#x27;e&#x27;,&#x27;\0&#x27;&#125;&#125;;</span><br><span class="line">    student *one = &amp; mike;</span><br><span class="line">    cout &lt;&lt; (*one).id_num &lt;&lt; &quot; &quot; &lt;&lt; (*one).name;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>结果是123 mike<br>也可以把<code>cout &lt;&lt; (*one).id_num &lt;&lt; &quot; &quot; &lt;&lt; (*one).name;</code>换成<code>cout &lt;&lt; one -&gt; id_num &lt;&lt; &quot; &quot; &lt;&lt; one -&gt; name;</code><br>-&gt; 是指向运算符</p><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><ul><li>数组名相当于指向数组第一个元素的指针</li><li>指向元素的指针<code>++</code>，则跨过一整个结构体<br><a href="https://imgse.com/i/zAw3W9"><img src="https://s1.ax1x.com/2022/11/14/zAw3W9.png" alt="zAw3W9.png"></a></li></ul><p><strong>结构体数据类型的特性与普通数据类型的特性是一致的</strong><br>结构体的使用例子<br><a href="https://imgse.com/i/zAw8zR"><img src="https://s1.ax1x.com/2022/11/14/zAw8zR.png" alt="zAw8zR.png"></a><br><a href="https://imgse.com/i/zAwMoF"><img src="https://s1.ax1x.com/2022/11/14/zAwMoF.png" alt="zAwMoF.png"></a><br>定义一个结构体数组  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">    char ID[10];</span><br><span class="line">    int month;</span><br><span class="line">    int day;</span><br><span class="line">&#125; stu[100];</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    int i, j, k, n, flag, count[100] = &#123;0&#125;;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    for(int i = 0; i &lt; n; i++)</span><br><span class="line">    cin &gt;&gt; stu[i].ID &gt;&gt; stu[i].month &gt;&gt; stu[i].day;</span><br><span class="line">    for(int m = 1; m &lt;= 12; m++)</span><br><span class="line">    for(int  d = 1; d &lt;= 31; d++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = 0; j = 0;</span><br><span class="line">        for(int i = 0; i &lt; n; i++)</span><br><span class="line">        if(stu[i].month == m &amp;&amp; stu[i].day == d)</span><br><span class="line">        &#123;</span><br><span class="line">            count[++j] = i; flag++;</span><br><span class="line">        &#125; // count[j]用于记录生日相同学生的学号</span><br><span class="line">        if(flag &gt; 1)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; m &lt;&lt; &quot; &quot; &lt;&lt; d &lt;&lt; &quot; &quot;;</span><br><span class="line">            for(k = 1; k &lt;= j; k++)</span><br><span class="line">            cout &lt;&lt; stu[count[k]].ID &lt;&lt; &quot; &quot; &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>非常常用的数据结构   </p><ul><li>链表头：指向第一个链表结点的指针</li><li>链表结点：链表中的每一个元素，包括：<ul><li>当前结点的数据</li><li>下一个结点的地址</li></ul></li><li>链表尾：不再指向其他结点的结点，其地址部分放一个<code>NULL</code>,表示链表到此结束  </li></ul><h3 id="链表可以动态地创建"><a href="#链表可以动态地创建" class="headerlink" title="链表可以动态地创建"></a>链表可以动态地创建</h3><ol><li>动态地申请内存空间<ul><li><code>int *pint = new int(1024)  delete pint</code></li><li><code>int *pia = new int[4]      delete [] pia</code>  </li></ul></li><li>动态地建立链表节点<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">     int id;</span><br><span class="line">     student *next;</span><br><span class="line">&#125;;</span><br><span class="line">student *head;</span><br><span class="line">head = new student;</span><br></pre></td></tr></table></figure></li></ol><h4 id="逐步建立链表"><a href="#逐步建立链表" class="headerlink" title="逐步建立链表"></a>逐步建立链表</h4><p><a href="https://imgse.com/i/zA0aXq"><img src="https://s1.ax1x.com/2022/11/14/zA0aXq.png" alt="zA0aXq.png"></a><br><a href="https://imgse.com/i/zA0wn0"><img src="https://s1.ax1x.com/2022/11/14/zA0wn0.png" alt="zA0wn0.png"></a></p><h2 id="链表的操作"><a href="#链表的操作" class="headerlink" title="链表的操作"></a>链表的操作</h2><ol><li><p>删除结点<br><a href="https://imgse.com/i/zA0Xut"><img src="https://s1.ax1x.com/2022/11/14/zA0Xut.png" alt="zA0Xut.png"></a></p></li><li><p>插入结点<br><a href="https://imgse.com/i/zA0LjI"><img src="https://s1.ax1x.com/2022/11/14/zA0LjI.png" alt="zA0LjI.png"></a><br><a href="https://imgse.com/i/zA0qgA"><img src="https://s1.ax1x.com/2022/11/14/zA0qgA.png" alt="zA0qgA.png"></a></p></li></ol><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><h2 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h2>]]></content>
      
      
      
        <tags>
            
            <tag> c程序学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础学习C程序（一）——计算概论与程序设计</title>
      <link href="/2022/09/01/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0C%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/09/01/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0C%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简单的程序"><a href="#简单的程序" class="headerlink" title="简单的程序"></a>简单的程序</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    return()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义变量，输出数据"><a href="#定义变量，输出数据" class="headerlink" title="定义变量，输出数据"></a>定义变量，输出数据</h2><p><code>int</code> 定义整数型变量<br>定义变量； 由前到后的顺序是类型、名称和初始值。 <strong>一定要赋予初始值</strong><br><code>cout</code> 输出命令<br><code>endl</code> 换行<br><code>&lt;&lt;</code> 分隔符<br>文字需要放在 <code>&quot;&quot;</code> 中，<strong>使用英文字符</strong><br><code>cin &gt;&gt;</code> 输入命令<br><code>,</code> 分隔变量<br><code>float</code> 实数型<br><em>语句顺序书写，称之为顺序结构</em>  </p><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><p><em>分支语句（if语句）</em><br><code>if else</code><br><code>char</code> 定义字符型变量，用于存储<strong>一个</strong>字符，使用单引号<br><code>！=</code> 不等于<br><code>==</code> 判断语句中的等于<br><code>=</code>代表赋值  <code>==</code>代表是否相等  </p><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>循环语句（<code>for</code>语句）<br><code>i++</code> 的含义是 <code>i=i+1</code>， <code>i--</code>含义是<code>i=i-1</code><br><code>%</code> 模，用来取余运算<br><code>if</code> 两行相连，代表同时成立</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char a[10] = &#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;,&#x27;g&#x27;,&#x27;h&#x27;,&#x27;i&#x27;,&#x27;j&#x27;&#125;;</span><br></pre></td></tr></table></figure><p><code>a</code>为数组名称<code>[10]</code>代表共有十个元素<br><a href="https://imgse.com/i/v5sgY9"><img src="https://s1.ax1x.com/2022/09/01/v5sgY9.png" alt="示例图片.png"></a><br><em>注意编号从是<code>0</code>开始</em><br><code>//</code>注释 编译器会忽略掉注释，<strong>为了保证可读性，一定要有注释</strong><br><code>break</code> 终止循环  </p><h1 id="什么样的程序是好程序"><a href="#什么样的程序是好程序" class="headerlink" title="什么样的程序是好程序"></a>什么样的程序是好程序</h1><p><a href="https://imgse.com/i/v56CDK"><img src="https://s1.ax1x.com/2022/09/01/v56CDK.png" alt="v56CDK.png"></a></p><p><strong>没有想到解决方案的时候，不要急于动手去写程序</strong><br><a href="https://imgse.com/i/v5g8cn"><img src="https://s1.ax1x.com/2022/09/01/v5g8cn.png" alt="v5g8cn.png"></a><br><a href="https://imgse.com/i/v5gGXq"><img src="https://s1.ax1x.com/2022/09/01/v5gGXq.png" alt="v5gGXq.png"></a></p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p><a href="https://imgse.com/i/vHdLrV"><img src="https://s1.ax1x.com/2022/09/07/vHdLrV.png" alt="vHdLrV.png"></a></p><h2 id="变量-：先定义再使用"><a href="#变量-：先定义再使用" class="headerlink" title="变量 ：先定义再使用"></a>变量 ：先定义再使用</h2><p>（变量类型）（变量标识符）<br><code>int   max</code><br><code>int   max = 0</code><em>赋予初始值</em></p><p><a href="https://imgse.com/i/vHdObT"><img src="https://s1.ax1x.com/2022/09/07/vHdObT.png" alt="vHdObT.png"></a></p><h3 id="整数型"><a href="#整数型" class="headerlink" title="整数型"></a>整数型</h3><p><strong>基本型 int</strong><br>由于内存空间不同被分成长整型和短整型。</p><ul><li>短整型 <code>short</code>  </li><li>长整型 <code>long</code>  </li><li>超长整型 <code>long long</code></li><li><code>sizeof</code> 用于计算某种类型的对象在内存中所占的字节数    </li><li><code>int</code>  默认为 <code>signed int</code>即为有符号 <code>unsighed</code>无符号</li><li><code>0x</code> 后是十六进制数 <code>0</code> 后是八进制数</li></ul><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p><strong>浮点型=实型</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">浮点型</th><th style="text-align:left">有效值</th></tr></thead><tbody><tr><td style="text-align:left">float</td><td style="text-align:left">7位</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">15位</td></tr><tr><td style="text-align:left">long double</td><td style="text-align:left">15位</td></tr></tbody></table></div><h3 id="字符型-char"><a href="#字符型-char" class="headerlink" title="字符型(char)"></a>字符型(char)</h3><p>1.一个字符型占一个字节<br>2.存储类型与整型相同<br>3.可以与整型数据相互赋值<br>4.可以和整型一样进行运算  </p><ul><li>转义字符<br>5.ASCii码表可以用来查找字符型对应值，小写字母比大写字母多32位。</li></ul><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>存储“真” “假” 的变量<br>占一个字节<br>值只能为1或0  </p><ul><li>赋0 为0  </li><li>赋非0 为1</li></ul><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p><strong>标识符只能由字母、数字和下划线三种字符组成，且第一个字符必须为字母或者下划线，不可以与保留字相同</strong></p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>在程序运行过程中，其值保持不变的量<br>字面常量： 1 、2、4<br>符号常量：用一个标识符表示一个常量<br>类型前加上关键词 <code>const</code><br>好处： <strong>不会被修改</strong>  </p><p>常量的类型用后缀分辨<br><a href="https://imgse.com/i/vxX1Qx"><img src="https://s1.ax1x.com/2022/09/15/vxX1Qx.png" alt="vxX1Qx.png"></a></p><p><em>关于编程题的一些笔记</em></p><ul><li><code>#include&lt;bits/stdc++.h&gt;</code>万能头文件  </li><li><code>%lf</code> 双精度浮点型，也就是<code>double</code>型的格式，默认保留6位小数。<br>如：<code>double a = 1.2; printf(&quot;%lf&quot;,a); //1.200000</code>  </li><li><code>%.2lf</code>同上，不过限制了，值保留2位小数。<br>如：<code>double a = 1.2345; printf(&quot;%.2lf&quot;,a); //1.23</code>   </li><li><code>%.2f</code>表示单精度浮点型，也就是float型的格式，值保留2位小数。<br>如：<code>float a = 1.2731; printf(&quot;%.2f&quot;,a); //1.27</code></li></ul><p>在C++中可以使用<code>#include &lt;iomanip&gt;</code>作为头文件，然后<code>cout &lt;&lt; fixed &lt;&lt; setprecision(n）</code>来控制精度，其中<code>fixed</code>是小数点的意思，<code>setprecision</code>是设置精度，括号中的数表示保留几位精度输出。</p><h1 id="运算成分"><a href="#运算成分" class="headerlink" title="运算成分"></a>运算成分</h1><p>c语言中的运算符</p><p><a href="https://imgse.com/i/vzgJKI"><img src="https://s1.ax1x.com/2022/09/16/vzgJKI.png" alt="vzgJKI.png"></a></p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值<br><strong>定义变量不能连等</strong>  </p><ul><li>要点一 : 两边类型不同<br>赋值时需要类型转换，都要转换为=左边的类型  </li><li>要点二 ：长数赋给短数<br>截取长数的低n位送给短数  </li><li>要点三 ： 短数赋给长数<br><a href="https://imgse.com/i/xk5L4g"><img src="https://s1.ax1x.com/2022/09/23/xk5L4g.png" alt="xk5L4g.png"></a></li><li>要点四 ： 符号位的赋值处理<br>直接赋值<br><strong>总结</strong><br><a href="https://imgse.com/i/xkoCQA"><img src="https://s1.ax1x.com/2022/09/23/xkoCQA.png" alt="xkoCQA.png"></a><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2>运算符，操作数，括号组成的计算式，是计算求值的基本单位 。表达式是有值的，赋值语句也不例外  。<br>复合的赋值运算：例如<code>a+=3</code>等价于<code>a= a+3</code><br>赋值时从右往左赋值  。<h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2>基本算术运算符 <code>+、-、*、/、%</code><br><code>%</code>是模运算，求余，必须是整数<br>整数运算，结果仍为整数<br>实数运算，结果都是 <code>double</code>型<br><strong>优先级</strong><br><code>()</code><br><code>* / %</code><br><code>+ -</code><br>同一级别，从左向右<br><strong>剪刀法</strong><br>从优先级最低的符号剪短，从右向左剪短，最后被剪下来的先计算<br><code>shout</code>型与<code>int</code>型计算时，<code>shout</code>会转换成<code>int</code>.<code>unsigned</code>与<code>int</code>型计算时，结果是<code>unsigned</code>型，<code>float</code>型与<code>double</code>型，结果是<code>double</code>型，<code>double</code>与<code>unsigned</code>型结果是<code>double</code>型  。<br><em>double型级别最高</em></li></ul><p><a href="https://imgse.com/i/xAQC5R"><img src="https://s1.ax1x.com/2022/09/24/xAQC5R.png" alt="xAQC5R.png"></a></p><h2 id="自增自减运算"><a href="#自增自减运算" class="headerlink" title="自增自减运算"></a>自增自减运算</h2><p><code>i++</code>与<code>++i</code>都是指<code>i=i+1</code>。  </p><ul><li><code>++i,--i</code><br> 在使用i之前，先将i的值加或减1  </li><li><code>i++,i--</code><br> 在使用i之后，再将i的值加或减1<br>将i比作书，++i先包书皮，再看，i++先看，再包书皮。<br>例；i的值为3，则</li><li><code>j = ++i</code>,<code>i = 4 ,j = 4</code>;  </li><li><code>j = i++</code>,<code>i = 4 ,j = 3</code>;<br><strong>++—号只能用于变量，不能用于表达式</strong>  <h2 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h2>[大于、小于，、大于或等于、小于或等于]的优先级高于[等于、不等于]<br>关系运算表达式的值只有真和假。<br>算术运算符<strong>高于</strong>关系运算符<strong>高于</strong>赋值运算符<br>剪刀法切优先级最低的地方<br><a href="https://imgse.com/i/xuMPoT"><img src="https://s1.ax1x.com/2022/09/30/xuMPoT.png" alt="xuMPoT.png"></a><h2 id="逻辑运算和混合运算"><a href="#逻辑运算和混合运算" class="headerlink" title="逻辑运算和混合运算"></a>逻辑运算和混合运算</h2></li><li>逻辑与 <code>&amp;&amp;</code></li><li>逻辑或 <code>||</code></li><li>逻辑非 <code>！</code><br>只有真假，0为假，非0为真。<br>一个逻辑表达式中若是包含多个逻辑运算符，则顺序为非&gt;与&gt;或。<br>逻辑运算中程序会进行取舍，有些程序不会执行。</li><li><strong>只有在必须执行下一个逻辑运算符才能求出表达式的解时，才执行该运算符！！！</strong>  </li><li>对于表达式<code>a &amp;&amp; b &amp;&amp; c</code>,只有<code>a</code>为真(非0)时，才需要判别继续的值。</li><li>对于表达式<code>a || b || c</code>,只要<code>a</code>为真(非0)时，就不必继续判断。<br>逻辑运算符两侧可以是任何类型，系统只以0或非0来判定。  <h2 id="逗号，条件，强转"><a href="#逗号，条件，强转" class="headerlink" title="逗号，条件，强转"></a>逗号，条件，强转</h2><h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3>作用：连接表达式<br>形式：表达式1，表达式2，…，表达式n<br><em>逗号运算优先级最低</em><br>先算表达式1，以此类推，<strong>整个表达式的值为表达式n的值</strong><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3>形式：表达式1<code>?</code>表达式2<code>:</code>表达式3<br>规则：若1为真，则2为表达式的值，否则3为表达式的值<br>可以用if语句代替。<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3>形式：(类型名)(表达式)<br>例：<code>(double)a</code>   将<code>a</code>的值转换为<code>double</code>类型<br><strong>强制类型转换后，被转换的量的类型没有发生变化，转换的是值</strong>。<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2>指进行二进制位的运算<br>按位与<code>(&amp;)</code>,按位或<code>(|)</code>,按位异或<code>(^)</code>,取反<code>(~)</code><br>左移运算符(&lt;&lt;)：会用于乘以2    </li></ul><p><a href="https://imgse.com/i/xjYJDU"><img src="https://s1.ax1x.com/2022/11/06/xjYJDU.png" alt="xjYJDU.png"></a></p><p>右移运算符(&gt;&gt;): 会用于除以2<br><a href="https://imgse.com/i/xuqXlR"><img src="https://s1.ax1x.com/2022/10/01/xuqXlR.png" alt="xuqXlR.png"></a></p><p>作用：“按位与”、“按位或”取一个数中某些指定位;“异或”是特定位反转，交换两个值。<br><a href="https://imgse.com/i/xuqOp9"><img src="https://s1.ax1x.com/2022/10/01/xuqOp9.png" alt="xuqOp9.png"></a></p><h1 id="控制成分"><a href="#控制成分" class="headerlink" title="控制成分"></a>控制成分</h1><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><p><strong>1.if语句</strong></p><ul><li><code>if()</code>可以是任意的数值类型</li><li>若表达式的值为0，按照假来处理</li><li>若表达式的值为非0，按照真来处理    </li></ul><p><strong>2.switch语句</strong><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch(表达式)</span><br><span class="line">&#123;</span><br><span class="line">  case 常量表达式1: 语句1;</span><br><span class="line">  case 常量表达式2: 语句2;</span><br><span class="line">  ...</span><br><span class="line">  case 常量表达式n: 语句n;</span><br><span class="line">  default: 语句n+1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>计算规则：当表达式的值与后面某一个<code>case</code>后面的常量表达式的值相等时，就执行此<code>case</code>后面的语句，若所有的<code>case</code>中的常量表达式的值都没有与表达式的值匹配的，就执行<code>default</code>后面的语句。<br>例：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">  char grade = &#x27;a&#x27;;</span><br><span class="line">  cin &gt;&gt; grade;</span><br><span class="line">  switch(grade)</span><br><span class="line">  &#123;</span><br><span class="line">    case&#x27;a&#x27;:cout &lt;&lt;&quot;85~100&quot; &lt;&lt; endl;</span><br><span class="line">    case&#x27;b&#x27;:cout &lt;&lt;&quot;70~84&quot; &lt;&lt; endl;</span><br><span class="line">    case&#x27;c&#x27;:cout &lt;&lt;&quot;60~69&quot; &lt;&lt; endl;</span><br><span class="line">    case&#x27;d&#x27;:cout &lt;&lt;&quot;&lt;60&quot; &lt;&lt; endl;</span><br><span class="line">    default:cout &lt;&lt;&quot;error&quot; &lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面的程序，当输入<code>a</code>时，我们想得到<code>85~100</code>,但是打印的结果为下,原因是按照<code>switch</code>的语法,将会输出每条语句。解决方法为，在每条语句后加上<code>break</code>,即为跳出当前循环。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">85~100</span><br><span class="line">70~84</span><br><span class="line">60~69</span><br><span class="line">&lt;60</span><br><span class="line">error</span><br></pre></td></tr></table></figure><br>改正后如下：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">  char grade = &#x27;a&#x27;;</span><br><span class="line">  cin &gt;&gt; grade;</span><br><span class="line">  switch(grade)</span><br><span class="line">  &#123;</span><br><span class="line">    case&#x27;a&#x27;:cout &lt;&lt;&quot;85~100&quot; &lt;&lt; endl; break;</span><br><span class="line">    case&#x27;b&#x27;:cout &lt;&lt;&quot;70~84&quot; &lt;&lt; endl; break;</span><br><span class="line">    case&#x27;c&#x27;:cout &lt;&lt;&quot;60~69&quot; &lt;&lt; endl; break;</span><br><span class="line">    case&#x27;d&#x27;:cout &lt;&lt;&quot;&lt;60&quot; &lt;&lt; endl; break;</span><br><span class="line">    default:cout &lt;&lt;&quot;error&quot; &lt;&lt;endl; break;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注意：<code>default</code>语句可以出现在前面，但是需要<code>break</code>作为辅助。  </p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>1.<code>for</code>语句<br>形式：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(表达式1；表达式2；表达式3)</span><br><span class="line">语句；</span><br></pre></td></tr></table></figure><br>注意表达式之间用分号<code>;</code>分开<br>执行过程如下：</p><p><a href="https://imgse.com/i/xKlIud"><img src="https://s1.ax1x.com/2022/10/01/xKlIud.png" alt="xKlIud.png"></a>  </p><p>2.<code>while</code>语句<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(条件语句)</span><br><span class="line">&#123;</span><br><span class="line">  执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>例：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">  int i, sum = 0;</span><br><span class="line">  i = 1;</span><br><span class="line">  while(i &lt;= 100)</span><br><span class="line">  &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; sum &lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>以上是用来求<code>1~100</code>的和的程序，结束后<code>i=101</code><br>while语句的作用例题:</p><ul><li>小红10岁，父亲33岁，问多少年后，父亲的年龄是小红的二倍？<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">  int ageHong = 10, ageFather = 33, count = 0;</span><br><span class="line">  while(2 * ageHong != ageFather)</span><br><span class="line">  &#123;</span><br><span class="line">    ageHong++;</span><br><span class="line">    ageFather++;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; count;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>count</code>即为最终的解。</li></ul><p>3.<code>Do...While</code>语句<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">  执行语句</span><br><span class="line">&#125;while(条件语句)</span><br></pre></td></tr></table></figure><br><strong><code>do while</code>是先去做。</strong><br>例:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">  int i, sum = 0;</span><br><span class="line">  i = 1;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;while(i &lt;= 100);</span><br><span class="line">  cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>例:输入一个数，然后反向输出,并且输出这个数的位数。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;\</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">  int num;</span><br><span class="line">  int count = 0;</span><br><span class="line">  cin &gt;&gt; num;</span><br><span class="line">  do&#123;</span><br><span class="line">    cout &lt;&lt; num % 10;</span><br><span class="line">    num = num / 10;</span><br><span class="line">    count++</span><br><span class="line">  &#125;while(num != 0);</span><br><span class="line">  cout &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="转向控制语句"><a href="#转向控制语句" class="headerlink" title="转向控制语句"></a>转向控制语句</h2><p>1.<code>break</code>语句</p><ul><li><code>switch</code>,<code>while</code>,<code>do..while</code>,<code>for</code>语句中都可以使用<code>break</code></li><li>跳出<code>switch</code>语句或者内层循环，继续执行逻辑上的下一条语句</li><li><code>break</code>只能跳出一层循环  </li></ul><p>2.<code>continue</code>语句</p><ul><li>用于循环语句中</li><li>结束本次循环</li><li>进入到下一次的循环  <h2 id="Goto语句"><a href="#Goto语句" class="headerlink" title="Goto语句"></a><code>Goto</code>语句</h2></li><li>无条件转向语句  </li><li>形式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语句标号：</span><br><span class="line">`goto` 语句标号；</span><br></pre></td></tr></table></figure></li><li>语句标号：标识符，定名规则与变量名相同；<br><strong>不要使用<code>goto</code>语句</strong>  <h1 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2>作用：存放一串数<br>使用方法：<code>int a[3] = &#123;1,2,3&#125;</code><br>数组的定义： 类型 + 数组名[常量表达式]<br>例：</li></ul><ul><li><code>float  sheep[10]</code>;  </li><li><code>int   a2001[1000]</code>;<br>数组名与变量名相同，仍然是以下划线或者字母开头<br><code>setw(n)</code>函数用于设置字段宽度，n表示宽度，用数字表示，需要头文件<code>&lt;iomanip&gt;</code><br><strong>强调</strong></li></ul><ul><li>数组下标从<code>0</code>开始</li><li><code>[]</code>内为常量表达式</li><li>数组输出时，不可以直接通过输入数组名进行输出，要使用循环语句<br>数组输出语句如下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a[10]=&#123;1,2,3&#125;; //初始化前三个元素，其余元素为0</span><br><span class="line"> </span><br><span class="line">for( int i=0;i&lt;10;i++ )</span><br><span class="line"> </span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">//输出结果：1 2 3 0 0 0 0 0 0 0</span><br></pre></td></tr></table></figure><a href="https://imgse.com/i/xMwJw8"><img src="https://s1.ax1x.com/2022/10/02/xMwJw8.png" alt="xMwJw8.png"></a><br>如果想定义个长度可变的数组，有以下解决方法(即为定义常量):  </li><li>使用<code>const int i</code>,再把<code>i</code>放入<code>[]</code>中</li><li>使用<code>#define N</code> 数字，将<code>N</code>放入<code>[]</code>中<h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3></li><li>数组一定要有初始化</li><li>可以只有初始化的值，而不写常量表达式，例如<code>int a[] = &#123;1,2,3&#125;</code>  </li><li>若只给出了部分元素的初始化，那么其他的元素自动赋值为<code>0</code>(即一种对数组全部赋值为<code>0</code>的方法)  <h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><a href="https://imgse.com/i/xcvDnx"><img src="https://s1.ax1x.com/2022/10/22/xcvDnx.png" alt="xcvDnx.png"></a><br>定义方式；<code>int a[3][4]</code><br>可以理解为定义了三个一维数组<br>初始化方法：<br><em>可以不输入前面的行数</em></li></ul><ol><li><code>int a[3][4] = &#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;&#125;</code>  </li><li><code>int a[3][4] = &#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;</code></li><li>对部分元素初始化，<code>int a[][4] = &#123;&#123;1&#125;,&#123;0,6&#125;,&#123;0,0,11&#125;&#125;</code>,仍然是其他元素自动赋值为<code>0</code></li><li>对数组初始化，需要准确写出行数和列数，<code>int a[3][4] = &#123;0&#125;</code><h2 id="三维数组"><a href="#三维数组" class="headerlink" title="三维数组"></a>三维数组</h2>定义方式：<code>int a[5][3][4]</code><br><a href="https://imgse.com/i/xgDOHS"><img src="https://s1.ax1x.com/2022/10/23/xgDOHS.png" alt="xgDOHS.png"></a><h2 id="数组的作用"><a href="#数组的作用" class="headerlink" title="数组的作用"></a>数组的作用</h2>1.数字统计<br>例：输入20个0~9之间的整数，请你统计每个数在输入数列中出现的次数。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头文件</span><br><span class="line">int num, count[10];</span><br><span class="line">for(int i = 0; i &lt; 20; i++)</span><br><span class="line">&#123;</span><br><span class="line"> cin &gt;&gt; num;</span><br><span class="line"> for(int j = 0; j &lt; 10; j++)</span><br><span class="line"> &#123;</span><br><span class="line">   if(num == j)</span><br><span class="line">   count[j]++;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line"> if(count[i] != 0)</span><br><span class="line"> cout &lt;&lt; i &lt;&lt; &quot;输入了&quot; &lt;&lt; conut[i] &lt;&lt; &quot;次&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure>简化为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int num, count[10] = &#123;0&#125;;</span><br><span class="line">for(int i = 1; i &lt;= 20; i++)</span><br><span class="line">&#123;</span><br><span class="line">  cin &gt;&gt; num;</span><br><span class="line">  switch(num)</span><br><span class="line">  &#123;</span><br><span class="line">    case 0:count[0]++:break;</span><br><span class="line">    case 1:count[1]++:break;</span><br><span class="line">    case 2:count[2]++:break;</span><br><span class="line">    case 3:count[3]++:break;</span><br><span class="line">    case 4:count[4]++:break;</span><br><span class="line">    case 5:count[5]++:break;</span><br><span class="line">    case 6:count[6]++:break;</span><br><span class="line">    case 7:count[7]++:break;</span><br><span class="line">    case 8:count[8]++:break;</span><br><span class="line">    case 9:count[9]++:break; </span><br><span class="line">  &#125;</span><br><span class="line">  for(int i = 0; i &lt; 10; i++)</span><br><span class="line">   &#123;</span><br><span class="line">    if(count[i] != 0)</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; &quot;输入了&quot; &lt;&lt; conut[i] &lt;&lt; &quot;次&quot; &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>再次简化为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int num, count[10] = &#123;0&#125;;</span><br><span class="line">for(int i = 0; i &lt; 20; i++)</span><br><span class="line">&#123;</span><br><span class="line">  cin &gt;&gt; num;</span><br><span class="line">  count[num]++;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 0; i &lt; 10; i++)</span><br><span class="line">   &#123;</span><br><span class="line">    if(count[i] != 0)</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; &quot;输入了&quot; &lt;&lt; conut[i] &lt;&lt; &quot;次&quot; &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>2.找出素数<br>例：输出100以内所有的素数<br><strong>不是挑选出所有素数，而是筛掉所有的合数</strong>,埃拉托斯坦尼筛子<br><a href="https://imgse.com/i/x203o4"><img src="https://s1.ax1x.com/2022/10/24/x203o4.png" alt="x203o4.png"></a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头文件</span><br><span class="line">int sum = 0, a[100] = &#123;0&#125;;</span><br><span class="line">for(int i = 2; i &lt; 100; i++)</span><br><span class="line">&#123;</span><br><span class="line">  sum = i;</span><br><span class="line">  while(sum &lt; 100)</span><br><span class="line">  &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    if(sum &lt; 100)</span><br><span class="line">    a[sum] = 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 2; i &lt; 100; i++)</span><br><span class="line">&#123;</span><br><span class="line">  if(a[i] = 0)</span><br><span class="line">  cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>优化方法：不需要用所有数自我相加到<code>100</code>，而是用<code>2, 3, 4,...,c</code>自我相加就可以<br>根据初等数论，若<code>n</code>为合数，则<code>n</code>的最小正因数<code>c</code>满足：</p><script type="math/tex; mode=display">1 < c \leq \sqrt{n}</script><p><code>sqrt(n)</code>是<code>&lt;cmath&gt;</code>里面的函数，作用是求平方根,<code>n</code>必须是<code>double</code>类型的数<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头文件</span><br><span class="line">int sum = 0,a[100] = &#123;a&#125;;</span><br><span class="line">for(int i = 2; i &lt; sqrt(100.0); i++)</span><br><span class="line">&#123;</span><br><span class="line">  sum = i;</span><br><span class="line">  while(sum &lt; 100)</span><br><span class="line">  &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    if(sum &lt; 100)</span><br><span class="line">    a[sum] = 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 2; i &lt; 100; i++)</span><br><span class="line">&#123;</span><br><span class="line">  if(a[i] = 0)</span><br><span class="line">  cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>又因为<code>2</code>所标定的数，<code>4</code>就不需要重复标定一次，因此进一步简化：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头文件</span><br><span class="line">int sum = 0,a[100] = &#123;a&#125;;</span><br><span class="line">for(int i = 2; i &lt; sqrt(100.0); i++)</span><br><span class="line">&#123;</span><br><span class="line">  sum = i;</span><br><span class="line">  if(a[sum] == 0)</span><br><span class="line">  &#123;</span><br><span class="line">  while(sum &lt; 100)</span><br><span class="line">  &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    if(sum &lt; 100)</span><br><span class="line">    a[sum] = 1;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 2; i &lt; 100; i++)</span><br><span class="line">&#123;</span><br><span class="line">  if(a[i] = 0)</span><br><span class="line">  cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符数组与字符串"><a href="#字符数组与字符串" class="headerlink" title="字符数组与字符串"></a>字符数组与字符串</h2><ul><li>如果只初始化了部分字符数组，其他元素将自动复制为<code>\0</code>，同样的，如果初始化了全部数组，也不需要指定数组大小。    </li><li>用数组定义字符串，可以用<code>char c[] = &quot;china&quot;</code>，注意此时该数组有六个元素，因为同等内容的字符串在末尾要比字符数组多一个<code>\0</code>。</li><li>所有以<code>\0</code>结尾的字符数组都可以看作字符串。<br><strong>注意</strong><br>只可以在数组定义并且初始化的时候，对数组赋值一个字符串或者字符数组，不能用赋值语句将一个字符串常量或字符数组直接赋给另一个字符数组。<br>即 <code>char c[6] = &quot;china&quot;</code>是合法的，但是<code>str1[] = &quot;china&quot;</code>,<code>str1 = &quot;china&quot;</code>,<code>str2 = str1</code>都是不合法的。<br>字符数组赋值方法(输出时可以直接写数组名称)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  char str1[] = &quot;c++ language&quot;,str2[20];</span><br><span class="line">  int i = 0;</span><br><span class="line">  while(str1[i] != &#x27;\0&#x27;)</span><br><span class="line">  &#123;</span><br><span class="line">    str2[i] = str1[i];</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  str2[i] = &#x27;\0&#x27;;</span><br><span class="line">  cout &lt;&lt; str1;</span><br><span class="line">  cout &lt;&lt; str2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符-字符数组-字符串的输入与输出"><a href="#字符-字符数组-字符串的输入与输出" class="headerlink" title="字符/字符数组/字符串的输入与输出"></a>字符/字符数组/字符串的输入与输出</h2><em>输入缓冲区</em><h3 id="一个字符的输入"><a href="#一个字符的输入" class="headerlink" title="一个字符的输入"></a>一个字符的输入</h3></li></ul><ol><li>直接用<code>cin</code>输入字符<br>只会把空格与回车当成间隔符，即跳过空格与跳过回车。输入ctrl+z结束输入。</li><li>用<code>cin.get()</code>函数输入字符<br>可以用于读取一个字符<br>两种形式：<ul><li>cin.get()</li><li>cin.get(char)<br>使用方法：<code>c = cin.get()</code>,<code>EOF</code>是文件结束标志，同样可以用ctrl+z结束<br><em>能读取空格和回车</em></li></ul></li><li>用<code>cin.get(char)</code>输入字符</li><li>用<code>getchar()</code>输入字符<br>使用方法：<code>c = getchar()</code><br><em>不会跳过任何字符</em>   <h3 id="一串字符的输出与输入"><a href="#一串字符的输出与输入" class="headerlink" title="一串字符的输出与输入"></a>一串字符的输出与输入</h3>输出：可以用<code>cout</code>输出字符数组，当碰到<code>\0</code>时停下，因此想输出的字符数组最后要以<code>\0</code>结尾。<br>输入：</li><li>直接用<code>cin</code>输入字符串，程序会把空格或回车作为不同字符串的间隔标志</li><li>用<code>cin.get()</code>函数输入<br>使用方法：<br><a href="https://imgse.com/i/xgb4L8"><img src="https://s1.ax1x.com/2022/10/23/xgb4L8.png" alt="xgb4L8.png"></a></li><li>用<code>cin.getline()</code>函数输入<br>使用方法与<code>cin.get()</code>函数相同<br><strong>区别</strong><br><code>getline</code>遇到终止标志字符时结束，缓冲区指针移到终止标志字符之后；<br><code>get</code>遇到终止字符是停止读取，指针不移动。<br><a href="https://imgse.com/i/xgqCFJ"><img src="https://s1.ax1x.com/2022/10/23/xgqCFJ.png" alt="xgqCFJ.png"></a></li></ol><p><strong>注意问题</strong><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  char a[10][10];</span><br><span class="line">  int n = 0;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  for(int i = 0;i &lt; n;i++)</span><br><span class="line">    cin.getline(a[i],10)</span><br><span class="line">  for(int i = 0;i &lt; n;i++)</span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>以上程序在运行后，会出现输入的元素少于<code>n</code>时，就开始了输出，原因是当输入<code>n</code>后，指针位置在<code>n</code>的后方，但是在回车的前方，因此函数<code>getline</code>第一次运行作用只是跳过了第一个回车，导致缺少了一次输入，解决方法如下：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cin &gt;&gt; n;</span><br><span class="line">cin.get();</span><br></pre></td></tr></table></figure><br>添加<code>cin.get</code>后，读走换行的回车符。</p><h2 id="字符串的应用"><a href="#字符串的应用" class="headerlink" title="字符串的应用"></a>字符串的应用</h2><p><code>&lt;string&gt;</code>中<code>strcat</code>用于拼接两个字符串，<code>strcpy</code>复制字符串到另一个字符串  </p><ol><li>字符串加密<br>例：输入一个字符串，把每个字符变成它后续字符，如果是’Z’或者’z’，则变成’A’或者’a’。空格则不变。然后将变换后的字符串输出（要求能够连续输入）。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> //头文件</span><br><span class="line"> char str[200];</span><br><span class="line"> while(cin.getline(str,200))</span><br><span class="line"> &#123;</span><br><span class="line">  for(int i = 0; str[i] != &#x27;\0&#x27;; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    if(str[i] == &#x27;Z&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">      str[i] = &#x27;A&#x27;;</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    if(str[i] == &#x27;z&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">      str[i] = &#x27;a&#x27;;</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    if(str[i] == &#x27; &#x27;)</span><br><span class="line">    continue;</span><br><span class="line">    str[i]++;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure></li><li>字符串连接<br>例：输入两个字符串，将其中较短的串接到较长的串的后面。<br>不能使用系统函数<code>strcat</code>，每个输入的串的长度不超过<code>20</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头文件</span><br><span class="line">int len1,len2;char str1[40],str2[40];</span><br><span class="line">cin.getline(str1,20);cin.getline(str2,20);</span><br><span class="line">for(len1 = 0;str1[len1] != &#x27;\0&#x27;;len1++)</span><br><span class="line">for(len2 = 0;str2[len2] != &#x27;\0&#x27;;len2++)</span><br><span class="line">if(len1 &gt;= len2)</span><br><span class="line">&#123;</span><br><span class="line">  for(len2 = 0; str2[len2] != &#x27;\0&#x27;; len2++)</span><br><span class="line">  str1[len1++] = str2[len2];</span><br><span class="line">  str1[len1] = &#x27;\0&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">  for(len1 = 0; str2[len1] != &#x27;\0&#x27;; len1++)</span><br><span class="line">  str2[len2++] = str1[len1];</span><br><span class="line">  str2[len2] = &#x27;\0&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>统计单词数<br>例：输入一个英文句子（不超过80个字母），统计器中有多少个单词，单词之间用空格分开。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头文件</span><br><span class="line">char str[80];</span><br><span class="line">int num = 0, flag = 0;</span><br><span class="line">cin.getline(str,80);</span><br><span class="line">for(int i = 0; str[i] != &#x27;\0&#x27;; i++)</span><br><span class="line">&#123;</span><br><span class="line">  if(str[i] == &#x27; &#x27;)</span><br><span class="line">  flag = 0;</span><br><span class="line">  else if(flag == 0)</span><br><span class="line">  &#123;</span><br><span class="line">    flag = 1;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  cout &lt;&lt; num;</span><br><span class="line">  return 0;</span><br></pre></td></tr></table></figure></li></ol><h1 id="写题时的笔记"><a href="#写题时的笔记" class="headerlink" title="写题时的笔记"></a>写题时的笔记</h1><p><code>tolower()</code>函数，作用是将给定字母转为小写字母。<br><code>&lt;string.h&gt;</code>中<code>strlen()</code>函数，作用是计算字符串数组的长度，直到空结束字符，但不包括空结束字符。<br><code>&lt;algorithm&gt;</code>中<code>sort()</code>函数，用来对数组进行排序，括号内可接受两个或三个参数，两个参数为升序排序。例：对数组<code>a[7] =&#123;1,4,2,3,6,8,5&#125;</code>排序为<code>sort(a,a+7)</code>。<br><code>&lt;cmath&gt;</code>中<code>pow(double x, double y)</code>返回<code>x</code>的 <code>y</code>次幂,<code>sqrt(double x)</code> 返回 <code>x</code>的平方根。例：<code>pow(8.0, 3)</code>指<code>8</code>的<code>3</code>次幂。<strong>注意一定要是浮点数</strong><br><code>&lt;cmath&gt;</code>中<code>ceil</code>函数，该函数可以将一个浮点数进行<strong>向上舍入</strong>(向上取整，所谓向上舍入，就是舍去小数部分，得到的最小整数比原数大或相等)</p><blockquote><p>——10.25</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> c程序学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo d命令错误的解决方法</title>
      <link href="/2022/08/31/hexo-d%E5%91%BD%E4%BB%A4%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2022/08/31/hexo-d%E5%91%BD%E4%BB%A4%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="确认hexo-deployer-git的模块是否下载成功"><a href="#确认hexo-deployer-git的模块是否下载成功" class="headerlink" title="确认hexo-deployer-git的模块是否下载成功"></a>确认hexo-deployer-git的模块是否下载成功</h3><p>复制下面这行代码到命令行。</p><p><code>npm install hexo-deployer-git --save</code></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改 _config.yml文件"></a>修改 _config.yml文件</h3><p><strong>注意</strong> 我使用win11系统打开该文件时，在type后面有单引号，应将单引号删去，也可以直接复制下面的代码。<br>1.将GitHub配置地址的方式从http改为ssh<br>2.将branch后的master换成main<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git </span><br><span class="line">  repository: git@github.com:(your name)/(your name).github.io.git</span><br><span class="line">  branch: main </span><br></pre></td></tr></table></figure></p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><h3 id="在命令行中写入你的github名称与注册邮箱"><a href="#在命令行中写入你的github名称与注册邮箱" class="headerlink" title="在命令行中写入你的github名称与注册邮箱"></a>在命令行中写入你的github名称与注册邮箱</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;xxx&quot;</span><br><span class="line">git config --global user.name &quot;xxx&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇</title>
      <link href="/2022/08/29/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/08/29/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>8/29  我的第一个个人博客！！！</p><script type="math/tex; mode=display">f(x)=\int_{-\infty}^{\infty}\hat{f}(\xi)e^{2\pi i \xi x}d\xi</script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
