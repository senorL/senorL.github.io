<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>零基础学习c程序（二） ——c程序设计进阶</title>
      <link href="/2022/10/25/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0c%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%BA%8C%EF%BC%89-%E2%80%94%E2%80%94c%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/10/25/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0c%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%BA%8C%EF%BC%89-%E2%80%94%E2%80%94c%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的定义与声明"><a href="#函数的定义与声明" class="headerlink" title="函数的定义与声明"></a>函数的定义与声明</h2><p>以一个求绝对值的过程为例：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int absolute(int n)</span><br><span class="line">&#123;</span><br><span class="line">    if(n &lt; 0)</span><br><span class="line">    return (-n);</span><br><span class="line">    else</span><br><span class="line">    return n;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m = -123, result = 0;</span><br><span class="line">    result = absolute(m);</span><br><span class="line">    cout &lt;&lt; result;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其中<code>(int n)</code>为形式参数（形参），即形式上的参数，并非真正让函数执行传给参数，只是用来辅助函数定义。<code>m</code>为实际参数（实参），是实际运行时传入的参数。<br>函数需要有函数类型（返回类型），函数名称，参数，函数主体。<br>函数的调运方式可以分为下面三种：  </p><ol><li>函数调用<strong>作为独立语句</strong>，例如：  <pre><code>  `stringprint()`  </code></pre></li><li>函数<strong>作为表达式的一部分</strong>，例如：  <pre><code> `number = max(numA,numB)/2;`  </code></pre></li><li>以<strong>实参形式出现在其他函数的调用中</strong>，例如：  <pre><code> `number = min(sum(-5,100),numC);`</code></pre></li></ol><p>函数可以没有输入参数和返回值  </p><p><strong>函数是c程序的基本构成单位</strong>    </p><ul><li>一个c程序有一个或多个源程序文件组成。</li><li>一个源程序文件可以由一个或多个函数组成。<br><a href="https://imgse.com/i/xffZ26"><img src="https://s1.ax1x.com/2022/10/27/xffZ26.png" alt="xffZ26.png"></a><br>将两个文件放进同一个目录之下，在主函数的头文件中输入<code>#include &quot;max.h&quot;</code>就可以连接两个文件。注意的是<code>&lt;&gt;</code>默认先搜索系统函数库，<code>&quot;&quot;</code>优先搜索当前目录。 </li></ul><p><strong>函数都是有”类型”的</strong>    </p><ul><li>函数的类型是指<strong>函数返回值的数据类型</strong>   <h2 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h2>可以将函数定义在main函数后面，但需要声明该函数<br><a href="https://imgse.com/i/xffhdJ"><img src="https://s1.ax1x.com/2022/10/27/xffhdJ.png" alt="xffhdJ.png"></a><br>函数的原型 = 返回值类型 + 函数名 + 参数类型<br>总结：<br><a href="https://imgse.com/i/xfhDmD"><img src="https://s1.ax1x.com/2022/10/27/xfhDmD.png" alt="xfhDmD.png"></a><h2 id="函数的执行"><a href="#函数的执行" class="headerlink" title="函数的执行"></a>函数的执行</h2>main函数是程序执行的入口点，过程中如果遇到了新的函数调用的语句，main函数被打断，执行这个新的函数调用的语句，之后main函数再向下执行（绿色为内存空间）<br><a href="https://imgse.com/i/xhV8DP"><img src="https://s1.ax1x.com/2022/10/27/xhV8DP.png" alt="xhV8DP.png"></a><br>被打断时，main函数会1。初始化新的函数，2.传递参数，3.保存当前现场，之后接1.收函数的返回值，2.恢复现场，从断点处继续执行<br>调用结束后，这部分内存空间会被释放掉<br><a href="https://imgse.com/i/xhVljI"><img src="https://s1.ax1x.com/2022/10/27/xhVljI.png" alt="xhVljI.png"></a><h3 id="函数参数的传递"><a href="#函数参数的传递" class="headerlink" title="函数参数的传递"></a>函数参数的传递</h3>是复制参数，对原参数没有影响<br><strong>copy!!!!</strong><br><a href="https://imgse.com/i/xhV3ut"><img src="https://s1.ax1x.com/2022/10/27/xhV3ut.png" alt="xhV3ut.png"></a><h2 id="变量的作用范围"><a href="#变量的作用范围" class="headerlink" title="变量的作用范围"></a>变量的作用范围</h2></li></ul><ol><li>局部变量<br>在函数内或块内定义，只在这个函数或块内起作用的变量。</li><li>全局变量<br>在所有函数外定义的变量，它的作用域是从定义变量的位置开始到本程序文件结束。</li></ol><p><a href="https://imgse.com/i/xhZOoT"><img src="https://s1.ax1x.com/2022/10/27/xhZOoT.png" alt="xhZOoT.png"></a><br>当全局变量与局部变量同名时，局部变量将在自己作用域内有效，它将屏蔽同名的全局变量</p><h2 id="数组与函数"><a href="#数组与函数" class="headerlink" title="数组与函数"></a>数组与函数</h2><h3 id="数组元素做函数参数"><a href="#数组元素做函数参数" class="headerlink" title="数组元素做函数参数"></a>数组元素做函数参数</h3><p>与正常情况相同</p><h3 id="数组名做函数参数"><a href="#数组名做函数参数" class="headerlink" title="数组名做函数参数"></a>数组名做函数参数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void change(int a[])</span><br><span class="line">&#123;</span><br><span class="line">    a[0] = 30;</span><br><span class="line">    a[1] = 50;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[2] = &#123;3, 5&#125;;</span><br><span class="line">    change(a)</span><br><span class="line">    cout &lt;&lt; a[0] &lt;&lt; &quot; &quot; &lt;&lt; a[1] &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终端输出结果为 30 50<br>传递时仍然是copy参数，注意数组名a不是变量，是常量，代表数组在内存中的地址<br>相当于把数组在内存中的地址传入了函数<br><a href="https://imgse.com/i/xheg1J"><img src="https://s1.ax1x.com/2022/10/27/xheg1J.png" alt="xheg1J.png"></a></p><h2 id="函数应用示例"><a href="#函数应用示例" class="headerlink" title="函数应用示例"></a>函数应用示例</h2><p><a href="https://imgse.com/i/xhnFPO"><img src="https://s1.ax1x.com/2022/10/27/xhnFPO.png" alt="xhnFPO.png"></a><br><a href="https://imgse.com/i/xhnCa6"><img src="https://s1.ax1x.com/2022/10/27/xhnCa6.png" alt="xhnCa6.png"></a><br>需要计算的信息 年，月，日，星期<br>其中星期不受其他因素影响<br>思路：<br><a href="https://imgse.com/i/xhnPIK"><img src="https://s1.ax1x.com/2022/10/27/xhnPIK.png" alt="xhnPIK.png"></a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int days;</span><br><span class="line">int get_dayofweek();</span><br><span class="line">int get_year();</span><br><span class="line">int get_month(int);</span><br><span class="line">int main() &#123;</span><br><span class="line">    int year, month, dayofweek;</span><br><span class="line">    int leap_year;</span><br><span class="line">    char week[7][10] = &#123;&quot;Saturday&quot;,&quot;Sunday&quot;,&quot;Monday&quot;,&quot;Tuesday&quot;,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;&#125;;</span><br><span class="line">    while((cin &gt;&gt; days) &amp;&amp; days != -1) &#123;</span><br><span class="line">        dayofweek = get_dayofweek();</span><br><span class="line">        year = get_year();</span><br><span class="line">        leap_year = (year % 4 == 0 &amp;&amp; year % 100 != 0 || year % 400 == 0);</span><br><span class="line">        month = get_month(leap_year);</span><br><span class="line">        cout &lt;&lt; year &lt;&lt; &quot;-&quot; &lt;&lt; month &lt;&lt; &quot;-&quot; &lt;&lt; ++days &lt;&lt; &quot; &quot; &lt;&lt; week[dayofweek];</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">// 计算星期几</span><br><span class="line">int get_dayofweek() &#123;</span><br><span class="line">    int dayofweek;</span><br><span class="line">    dayofweek = days % 7;</span><br><span class="line">    return dayofweek;</span><br><span class="line">&#125;</span><br><span class="line">// 计算年数</span><br><span class="line">int get_year() &#123;</span><br><span class="line">    int i = 2000, leap_year;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">        leap_year = (i % 4 == 0 &amp;&amp; i % 100 != 0 || i % 400 == 0);</span><br><span class="line">        if(leap_year == 1 &amp;&amp; days &gt;= 366) &#123;</span><br><span class="line">            days = days - 366;</span><br><span class="line">            i++;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(leap_year == 0 &amp;&amp; days &gt;= 365) &#123;</span><br><span class="line">            days = days - 365;</span><br><span class="line">            i++;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    return i;</span><br><span class="line">&#125;</span><br><span class="line">// 计算月份</span><br><span class="line">int get_month(int leap_year) &#123;</span><br><span class="line">    int pmonth[12] = &#123;31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31&#125;;</span><br><span class="line">    int rmonth[12] = &#123;31, 29, 31, 30, 31, 30, 31, 31, 30 ,31, 30, 31&#125;;</span><br><span class="line">    int j = 0;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">        if(leap_year == 1 &amp;&amp; days &gt;= rmonth[j]) &#123;</span><br><span class="line">            days = days - rmonth[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(leap_year == 0 &amp;&amp; days &gt;= pmonth[j]) &#123;</span><br><span class="line">            days = days - rmonth[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        else break;</span><br><span class="line">        &#125;</span><br><span class="line">        return ++j;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><strong>全局变量</strong></p><ul><li>破坏了函数的“相对独立性”</li><li>增加了函数之间的“耦合性”</li><li>函数之间的交互不够清晰</li><li>不在非常必要的情况下，不要使用全局变量</li></ul><h2 id="函数的递归"><a href="#函数的递归" class="headerlink" title="函数的递归"></a>函数的递归</h2><h3 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h3><ul><li><strong>函数不能嵌套定义</strong><ul><li>所有函数一律平等</li></ul></li><li><strong>函数可以嵌套调用</strong><ul><li>无论嵌套多少层，原理都一样  </li><li><strong>函数可以调用自己吗？</strong></li></ul></li></ul><p><a href="https://imgse.com/i/xofHbV"><img src="https://s1.ax1x.com/2022/10/31/xofHbV.png" alt="xofHbV.png"></a><br>上面这种方式就称为“递归调用”<br>一个函数在其定义中直接或间接调用自身的一种方法。<br><strong>递归调用与普通调用没有区别！！！</strong></p><p><a href="https://imgse.com/i/xohXeP"><img src="https://s1.ax1x.com/2022/10/31/xohXeP.png" alt="xohXeP.png"></a></p><h3 id="深入理解递归的过程"><a href="#深入理解递归的过程" class="headerlink" title="深入理解递归的过程"></a>深入理解递归的过程</h3><p><a href="https://imgse.com/i/xo4jXR"><img src="https://s1.ax1x.com/2022/10/31/xo4jXR.png" alt="xo4jXR.png"></a></p><h3 id="递归的作用"><a href="#递归的作用" class="headerlink" title="递归的作用"></a>递归的作用</h3><ol><li>切饼</li></ol><p><a href="https://imgse.com/i/xo5eBt"><img src="https://s1.ax1x.com/2022/10/31/xo5eBt.png" alt="xo5eBt.png"></a></p><ul><li>q(n) = q(n - 1) + n;</li><li>q(0) = 1;</li></ul><p><a href="https://imgse.com/i/xojcN9"><img src="https://s1.ax1x.com/2022/10/31/xojcN9.png" alt="xojcN9.png"></a></p><p><strong>递归与递推</strong></p><ul><li><strong>不同</strong><ul><li>递推的关注点放在<em>起始点</em></li><li>递归的关注点放在<em>求解目标</em></li></ul></li><li><strong>相同</strong><ul><li>重点在表现<em>第<code>i</code>次</em>与<em>第<code>i+1</code>次</em>的关系  </li></ul></li></ul><p><strong>用递归实现递推</strong></p><ul><li><strong>优点</strong><ul><li>让程序变得简明</li></ul></li><li><strong>方法</strong><ul><li>把关注点放到要求解的目标上</li><li>找到第<code>n</code>次做与第<code>n-1</code>次做之间的关系</li><li>确定第<code>1</code>次的返回结果  </li></ul></li></ul><ol><li>斐波那契数列</li></ol><p><a href="https://imgse.com/i/xovP4s"><img src="https://s1.ax1x.com/2022/10/31/xovP4s.png" alt="xovP4s.png"></a></p><ol><li>进制转换</li></ol><p>余数需要反向输出，因此<code>cout</code>在调用<code>convert</code>函数之后</p><p><a href="https://imgse.com/i/xovvGR"><img src="https://s1.ax1x.com/2022/10/31/xovvGR.png" alt="xovvGR.png"></a></p><ol><li>汉诺塔问题<br><a href="https://imgse.com/i/x7soxx"><img src="https://s1.ax1x.com/2022/11/01/x7soxx.png" alt="x7soxx.png"></a><br><a href="https://imgse.com/i/x7s5GR"><img src="https://s1.ax1x.com/2022/11/01/x7s5GR.png" alt="x7s5GR.png"></a></li></ol><ul><li>当只有一个盘子时，仅需<code>a -- c</code>   </li><li>当有两个盘子时，需要如图<code>123</code>步   </li><li>当有三个以上的盘子时，都可以理解成最下面的盘子和上面一个（堆）盘子的情况，因此依然是如图的<code>123</code>步<br><a href="https://imgse.com/i/x7sIR1"><img src="https://s1.ax1x.com/2022/11/01/x7sIR1.png" alt="x7sIR1.png"></a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void move(int m, char x, char y, char z)</span><br><span class="line">&#123;</span><br><span class="line">    if(m == 1)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;把一个盘子从&quot; &lt;&lt; x &lt;&lt; &quot;移动到&quot; &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        move(m - 1, x, z, y);</span><br><span class="line">        cout &lt;&lt; &quot;把一个盘子从&quot; &lt;&lt; x &lt;&lt; &quot;移动到&quot; &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">        move(m - 1, y, x, z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n;</span><br><span class="line">    cout &lt;&lt; &quot;请输入盘数n =&quot;;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; &quot;在3根柱子上移动&quot; &lt;&lt; n &lt;&lt; &quot;只盘的步骤为：&quot; &lt;&lt; endl;</span><br><span class="line">    move(n, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟连续发生的动作"><a href="#模拟连续发生的动作" class="headerlink" title="模拟连续发生的动作"></a>模拟连续发生的动作</h2><ul><li><strong>方法</strong><ul><li>搞清楚连续发生的动作是什么（定义函数）<br> <code>void move(int m, char x, char y, char z)</code></li><li>搞清楚不同次动作之间的关系（描述递归函数之间关系）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">move(m - 1, x, z, y);</span><br><span class="line">cout &lt;&lt; &quot;把一个盘子从&quot; &lt;&lt; x &lt;&lt; &quot;移动到&quot; &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">move(m - 1, y, x, z);</span><br></pre></td></tr></table></figure></li><li>搞清楚边界条件是什么（描述边界条件）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> if(m == 1)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;把一个盘子从&quot; &lt;&lt; x &lt;&lt; &quot;移动到&quot; &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol><li>放苹果<br>题目：把M个同样的苹果放在N个同样的盘子里，允许有的盘子空着不放，问共有多少种不同的分法？<br>注意：5，1，1和1，5，1是同一种分法<br>输入：7 3<br>输出： 8<br>先设定有一个函数<code>f(m, n)</code>能解决这个问题，分为两种情况，如果盘子数大于苹果数，那么<code>f(m,n) = f(m, m)</code>,因为多余的盘子是可以删去的<br><a href="https://imgse.com/i/x7ySzt"><img src="https://s1.ax1x.com/2022/11/01/x7ySzt.png" alt="x7ySzt.png"></a><br>如果苹果数大于等于盘子数，那么再次分为有盘子空着和没盘子空着，如果是有盘子空着的情况，那假设每次都至少有一个盘子空着，那么删除这个盘子对结果没有影响，即<code>f(m, n) = f(m, n - 1)</code>,如果是没盘子空着的情况，那减去每个盘子上至少放的苹果，对最后结果没有影响，即<code>f(m , n) = f(m - n, n)</code>，之后的过程将重复这些可能继续下去<br><a href="https://imgse.com/i/x72lcR"><img src="https://s1.ax1x.com/2022/11/01/x72lcR.png" alt="x72lcR.png"></a></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int count(int m, int n)</span><br><span class="line">&#123;</span><br><span class="line">    if(m &lt;= 0 || n &lt;= 1)</span><br><span class="line">        return 1;</span><br><span class="line">    if(m &lt; n)</span><br><span class="line">        return count(m , m);</span><br><span class="line">    else</span><br><span class="line">        return count(m, n - 1) + count(m - n, n);</span><br><span class="line">&#125;</span><br><span class="line">int  main()</span><br><span class="line">&#123;</span><br><span class="line">    int apples, plates;</span><br><span class="line">    cin &gt;&gt; apples &gt;&gt; plates;</span><br><span class="line">    cout &lt;&lt; count(apples, plates);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>逆波兰表达式<br>每遇到一个运算符就是一个独立的逆波兰表达式的开始<br><a href="https://imgse.com/i/x7yUQx"><img src="https://s1.ax1x.com/2022/11/01/x7yUQx.png" alt="x7yUQx.png"></a><br><a href="https://imgse.com/i/x7ydOK"><img src="https://s1.ax1x.com/2022/11/01/x7ydOK.png" alt="x7ydOK.png"></a><br><a href="https://imgse.com/i/x7yay6"><img src="https://s1.ax1x.com/2022/11/01/x7yay6.png" alt="x7yay6.png"></a></li></ol><h3 id="利用递归进行“自动分析”"><a href="#利用递归进行“自动分析”" class="headerlink" title="利用递归进行“自动分析”"></a>利用递归进行“自动分析”</h3><ul><li><strong>方法</strong><ul><li>先假设 存在一个函数能给出答案</li><li>在利用这个函数的前提下，分析如何解决问题</li><li>搞清楚最简单的情况下答案是什么</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>coursera 程序设计编程作业</title>
      <link href="/2022/09/15/coursera-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
      <url>/2022/09/15/coursera-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="计算导论"><a href="#计算导论" class="headerlink" title="计算导论"></a>计算导论</h1><h2 id="6-1-苹果和虫子"><a href="#6-1-苹果和虫子" class="headerlink" title="6.1 苹果和虫子"></a>6.1 苹果和虫子</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">    using namespace std;</span><br><span class="line">    int main() &#123;</span><br><span class="line">        int n , x , y ,m ;</span><br><span class="line">        //n为苹果总数，每x小时吃一个苹果，y代表总共多少个小时,m代表最后剩下的苹果数</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        if(y % x == 0)</span><br><span class="line">        m = n - y / x;</span><br><span class="line">        else</span><br><span class="line">        m = n - y / x - 1;</span><br><span class="line">        //有余数要把这个苹果去掉</span><br><span class="line">        if(m &gt; 0)</span><br><span class="line">        cout &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">        else</span><br><span class="line">        cout &lt;&lt; 0 &lt;&lt; endl;</span><br><span class="line">        //不能出现负数</span><br><span class="line"></span><br><span class="line">        return 0;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-大象喝水"><a href="#6-2-大象喝水" class="headerlink" title="6.2 大象喝水"></a>6.2 大象喝水</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    double Pi = 3.14159;</span><br><span class="line">    int r = 0, h = 0;</span><br><span class="line">    // 设变量r h 分别代表桶底半径和桶高</span><br><span class="line">    cin &gt;&gt; h &gt;&gt; r;</span><br><span class="line">    double V = Pi * r * r * h / 1000;</span><br><span class="line">    // 转换同一个单位</span><br><span class="line">    cout &lt;&lt; ceil(20 / V) &lt;&lt; endl;</span><br><span class="line">    //ceil函数，该函数可以将一个浮点数进行向上舍入（向上取整，所谓向上舍入，就是舍去小数部分，得到的最小整数比原数大或相等</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-最高的分数"><a href="#6-3-最高的分数" class="headerlink" title="6.3 最高的分数"></a>6.3 最高的分数</h2><h2 id="6-4-最大奇数与最小偶数之差的绝对值"><a href="#6-4-最大奇数与最小偶数之差的绝对值" class="headerlink" title="6.4 最大奇数与最小偶数之差的绝对值"></a>6.4 最大奇数与最小偶数之差的绝对值</h2><h2 id="6-5-分离整数的各个数位"><a href="#6-5-分离整数的各个数位" class="headerlink" title="6.5 分离整数的各个数位"></a>6.5 分离整数的各个数位</h2><h2 id="7-1-年龄与疾病"><a href="#7-1-年龄与疾病" class="headerlink" title="7.1 年龄与疾病"></a>7.1 年龄与疾病</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n,m,a,s1=0,s2=0,s3=0,s4=0;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">m=n;//保留n值 </span><br><span class="line"></span><br><span class="line">while(n--)//循环n次 </span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a;//不需要存储所以不需要定义成数组 </span><br><span class="line">if(a&gt;=61) s1++;//每种情况判断属于哪一类 </span><br><span class="line">else if(a&gt;=36) s2++;</span><br><span class="line">else if(a&gt;=19) s3++;</span><br><span class="line">else s4++; </span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;1-18: %.2lf%\n19-35: %.2lf%\n36-60:%.2lf%\n60-: %.2lf%\n&quot;,100.0*s4/m,100.0*s3/m,100.0*s2/m,100.0*s1/m);//保留2位小数化为百分比数  </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-成绩判断"><a href="#7-2-成绩判断" class="headerlink" title="7.2 成绩判断"></a>7.2 成绩判断</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m = 0, n = 0;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    // 输入n为分数，m代表等级结果</span><br><span class="line">    if(n &gt;= 95) </span><br><span class="line">    m = 1;</span><br><span class="line">    else if (n &gt;= 90 &amp;&amp; n &lt; 95)</span><br><span class="line">    m = 2;</span><br><span class="line">    else if (n &gt;= 85 &amp;&amp; n &lt; 90)</span><br><span class="line">    m = 3;</span><br><span class="line">    else if (n &gt;= 80 &amp;&amp; n &lt; 85)</span><br><span class="line">    m = 4;</span><br><span class="line">    else if (n &gt;= 70 &amp;&amp; n &lt; 80)</span><br><span class="line">    m = 5;</span><br><span class="line">    else if (n &gt;= 60 &amp;&amp; n &lt; 70)</span><br><span class="line">    m = 6;</span><br><span class="line">    else  m = 7;</span><br><span class="line">    // 对成绩判定</span><br><span class="line">    cout &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="7-3-找出第k大的数"><a href="#7-3-找出第k大的数" class="headerlink" title="7.3 找出第k大的数"></a>7.3 找出第k大的数</h2><h2 id="7-4-人民币支付"><a href="#7-4-人民币支付" class="headerlink" title="7.4 人民币支付"></a>7.4 人民币支付</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">int a,b,c,d,e,f;</span><br><span class="line">a=n/100;</span><br><span class="line">n-=a*100;</span><br><span class="line">b=n/50;</span><br><span class="line">n-=b*50;</span><br><span class="line">c=n/20;</span><br><span class="line">n-=c*20;</span><br><span class="line">d=n/10;</span><br><span class="line">n-=d*10;</span><br><span class="line">e=n/5;</span><br><span class="line">n-=e*5;</span><br><span class="line">f=n/1;</span><br><span class="line">n-=f*1;</span><br><span class="line">printf(&quot;%d\n%d\n%d\n%d\n%d\n%d&quot;,a,b,c,d,e,f);</span><br><span class="line">return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="8-1-数字求和"><a href="#8-1-数字求和" class="headerlink" title="8.1 数字求和"></a>8.1 数字求和</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int a = 0, m = 5, sum = 0, n = 0;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    while(m--) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        if(a &gt; n) &#123;</span><br><span class="line">            sum += n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-骑车与走路"><a href="#8-2-骑车与走路" class="headerlink" title="8.2 骑车与走路"></a>8.2 骑车与走路</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n = 0;</span><br><span class="line">    double a = 0, b = 0, d = 0;</span><br><span class="line">    cin &gt;&gt; n ;</span><br><span class="line">    while(n--)&#123;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        b = a / 3.0;</span><br><span class="line">        d = a / 1.2;</span><br><span class="line">        if((27 + 23 + b) &gt; d) </span><br><span class="line">            cout &lt;&lt; &quot;Walk&quot; &lt;&lt;endl;</span><br><span class="line">        else if((27 + 23 + b) &lt; d) </span><br><span class="line">            cout &lt;&lt; &quot;Bike&quot; &lt;&lt;endl;</span><br><span class="line">        else </span><br><span class="line">            cout &lt;&lt; &quot;All&quot; &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-1-求字母个数"><a href="#10-1-求字母个数" class="headerlink" title="10.1 求字母个数"></a>10.1 求字母个数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char s[80] = &#123;0&#125;;</span><br><span class="line">    int a = 0, e = 0, i1 = 0, o = 0, u = 0;</span><br><span class="line">    cin.getline(s,80);</span><br><span class="line">    for(int i = 0; i &lt; 80; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(s[i] == &#x27;a&#x27;)</span><br><span class="line">        a++;</span><br><span class="line">        else if(s[i] == &#x27;e&#x27;)</span><br><span class="line">        e++;</span><br><span class="line">        else if(s[i] == &#x27;i&#x27;)</span><br><span class="line">        i1++;</span><br><span class="line">        else if(s[i] == &#x27;o&#x27;)</span><br><span class="line">        o++;</span><br><span class="line">        else if(s[i] == &#x27;u&#x27;)</span><br><span class="line">        u++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; &quot; &quot; &lt;&lt; e &lt;&lt; &quot; &quot; &lt;&lt; i1 &lt;&lt; &quot; &quot; &lt;&lt; o &lt;&lt; &quot; &quot; &lt;&lt; u &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>switch</code>语句和字符串数组进行输出可以进一步简化程序<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char s[80] = &#123;0&#125;;</span><br><span class="line">    int  count[5] = &#123;0&#125;;</span><br><span class="line">    cin.getline(s,80);</span><br><span class="line">    for(int i = 0; s[i] != &#x27;\0&#x27;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        switch(s[i])</span><br><span class="line">        &#123;</span><br><span class="line">            case &#x27;a&#x27;: count[0]++; break;</span><br><span class="line">            case &#x27;e&#x27;: count[1]++; break;</span><br><span class="line">            case &#x27;i&#x27;: count[2]++; break;</span><br><span class="line">            case &#x27;o&#x27;: count[3]++; break;</span><br><span class="line">            case &#x27;u&#x27;: count[4]++; break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = 0; i &lt; 5; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; count[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="10-2-忽略大小写比较字符串大小"><a href="#10-2-忽略大小写比较字符串大小" class="headerlink" title="10.2 忽略大小写比较字符串大小"></a>10.2 忽略大小写比较字符串大小</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char str1[80];</span><br><span class="line">    char str2[80];</span><br><span class="line">    cin.getline(str1, 80);</span><br><span class="line">    cin.getline(str2, 80);</span><br><span class="line">    for(int i = 0; i &lt;= 80; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str1[i] = tolower(str1[i]);</span><br><span class="line">        str2[i] = tolower(str2[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    char result;</span><br><span class="line">    int i = 0;</span><br><span class="line">    while(str1[i] != &#x27;\0&#x27; &amp;&amp; str1[i] == str2[i])</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    if (str1[i] &gt; str2[i])</span><br><span class="line">result = &#x27;&gt;&#x27;;</span><br><span class="line">else if (str1[i] &lt; str2[i])</span><br><span class="line">result = &#x27;&lt;&#x27;;</span><br><span class="line">else</span><br><span class="line">result = &#x27;=&#x27;;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-3-最长单词2"><a href="#10-3-最长单词2" class="headerlink" title="10.3 最长单词2"></a>10.3 最长单词2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">char word[600];</span><br><span class="line">cin.getline(word,600);</span><br><span class="line">int max=0,max1,max2;</span><br><span class="line">int sum=0;</span><br><span class="line">int n=strlen(word);</span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">if( word[i]!=&#x27; &#x27; &amp;&amp; word[i]!=&#x27;.&#x27;)</span><br><span class="line">sum++;</span><br><span class="line">else&#123;</span><br><span class="line">if(sum&gt;max)&#123;</span><br><span class="line">max=sum;</span><br><span class="line">max1=i-max;</span><br><span class="line">max2=i-1;</span><br><span class="line">&#125;</span><br><span class="line">sum=0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=max1;i&lt;=max2;i++)</span><br><span class="line">cout&lt;&lt;word[i];</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-4-矩阵交换行"><a href="#10-4-矩阵交换行" class="headerlink" title="10.4 矩阵交换行"></a>10.4 矩阵交换行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int matrix[5][5];</span><br><span class="line">    for(int i = 0; i &lt; 5; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j = 0; j &lt; 5; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int n = 0, m = 0;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    if(n &lt; 0 || n &gt; 5 || m &lt; 0 || m &gt; 5)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt; &quot;error&quot; &lt;&lt; endl;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int num[5];</span><br><span class="line">    for(int i = 0; i &lt; 5; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num[i] = matrix[n][i];</span><br><span class="line">        matrix[n][i] = matrix[m][i];</span><br><span class="line">        matrix[m][i] = num[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(int i = 0; i &lt; 5; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j = 0; j &lt; 5; j++)</span><br><span class="line">        &#123;</span><br><span class="line">        cout &lt;&lt; setw(4) &lt;&lt; matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-5-异常细胞检测"><a href="#10-5-异常细胞检测" class="headerlink" title="10.5 异常细胞检测"></a>10.5 异常细胞检测</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int N = 0;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    int cell[N][N];</span><br><span class="line">    for(int i = 0; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j = 0; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; cell[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int sum = 0;</span><br><span class="line">    for(int i = 1; i &lt; N - 1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j = 1; j &lt; N - 1; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(cell[i - 1][j] - cell[i][j] &gt;= 50 &amp;&amp; cell[i + 1][j] - cell[i][j] &gt;= 50 &amp;&amp; cell[i][j - 1] - cell[i][j] &gt;= 50 &amp;&amp; cell[i][j + 1] - cell[i][j] &gt;= 50)</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-7-中位数"><a href="#10-7-中位数" class="headerlink" title="10.7 中位数"></a>10.7 中位数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n = 0;</span><br><span class="line">    int m[15000] = &#123;0&#125;;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    while(n)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        for(int i = 0; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; m[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(m, m + n);</span><br><span class="line">        if(n % 2 != 0)</span><br><span class="line">        cout &lt;&lt; m[n/2] &lt;&lt; endl;</span><br><span class="line">        else</span><br><span class="line">        cout &lt;&lt; (m[n/2] + m[n/2 - 1])/2 &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-8-校门口的树"><a href="#10-8-校门口的树" class="headerlink" title="10.8 校门口的树"></a>10.8 校门口的树</h2><p>题目有个关键点是路两端都种有树，但是数组下标从<code>0</code>开始，因此要在给出的值基础上加<code>1</code>。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int l, m;</span><br><span class="line">    int num = 0;</span><br><span class="line">    cin &gt;&gt; l &gt;&gt; m;</span><br><span class="line">    int r[l + 1] = &#123;0&#125;;</span><br><span class="line">    for(int i = 0; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int start, end;</span><br><span class="line">        cin &gt;&gt; start &gt;&gt; end;</span><br><span class="line">        for(int j = start; j &lt;= end; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            r[j] = &#123;1&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = 0; i &lt;= l; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(r[i] == 0)</span><br><span class="line">        num++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="c程序进阶"><a href="#c程序进阶" class="headerlink" title="c程序进阶"></a>c程序进阶</h1><h2 id="2-1-寻找下标"><a href="#2-1-寻找下标" class="headerlink" title="2.1 寻找下标"></a>2.1 寻找下标</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n = 0;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    int x[n] = &#123;0&#125;;</span><br><span class="line"></span><br><span class="line">    for(int i = 0; i &lt; n; i++)&#123;</span><br><span class="line">        cin &gt;&gt; x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    for(int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        if( x[i] == i) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">            return 0;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; &quot;N&quot; &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>零基础学习C程序（一）——计算概论与程序设计</title>
      <link href="/2022/09/01/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0C%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/09/01/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0C%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简单的程序"><a href="#简单的程序" class="headerlink" title="简单的程序"></a>简单的程序</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    return()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义变量，输出数据"><a href="#定义变量，输出数据" class="headerlink" title="定义变量，输出数据"></a>定义变量，输出数据</h2><p><code>int</code> 定义整数型变量<br>定义变量； 由前到后的顺序是类型、名称和初始值。 <strong>一定要赋予初始值</strong><br><code>cout</code> 输出命令<br><code>endl</code> 换行<br><code>&lt;&lt;</code> 分隔符<br>文字需要放在 <code>&quot;&quot;</code> 中，<strong>使用英文字符</strong><br><code>cin &gt;&gt;</code> 输入命令<br><code>,</code> 分隔变量<br><code>float</code> 实数型<br><em>语句顺序书写，称之为顺序结构</em>  </p><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><p><em>分支语句（if语句）</em><br><code>if else</code><br><code>char</code> 定义字符型变量，用于存储<strong>一个</strong>字符，使用单引号<br><code>！=</code> 不等于<br><code>==</code> 判断语句中的等于<br><code>=</code>代表赋值  <code>==</code>代表是否相等  </p><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>循环语句（<code>for</code>语句）<br><code>i++</code> 的含义是 <code>i=i+1</code>， <code>i--</code>含义是<code>i=i-1</code><br><code>%</code> 模，用来取余运算<br><code>if</code> 两行相连，代表同时成立</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char a[10] = &#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;,&#x27;g&#x27;,&#x27;h&#x27;,&#x27;i&#x27;,&#x27;j&#x27;&#125;;</span><br></pre></td></tr></table></figure><p><code>a</code>为数组名称<code>[10]</code>代表共有十个元素<br><a href="https://imgse.com/i/v5sgY9"><img src="https://s1.ax1x.com/2022/09/01/v5sgY9.png" alt="示例图片.png"></a><br><em>注意编号从是<code>0</code>开始</em><br><code>//</code>注释 编译器会忽略掉注释，<strong>为了保证可读性，一定要有注释</strong><br><code>break</code> 终止循环  </p><h1 id="什么样的程序是好程序"><a href="#什么样的程序是好程序" class="headerlink" title="什么样的程序是好程序"></a>什么样的程序是好程序</h1><p><a href="https://imgse.com/i/v56CDK"><img src="https://s1.ax1x.com/2022/09/01/v56CDK.png" alt="v56CDK.png"></a></p><p><strong>没有想到解决方案的时候，不要急于动手去写程序</strong><br><a href="https://imgse.com/i/v5g8cn"><img src="https://s1.ax1x.com/2022/09/01/v5g8cn.png" alt="v5g8cn.png"></a><br><a href="https://imgse.com/i/v5gGXq"><img src="https://s1.ax1x.com/2022/09/01/v5gGXq.png" alt="v5gGXq.png"></a></p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p><a href="https://imgse.com/i/vHdLrV"><img src="https://s1.ax1x.com/2022/09/07/vHdLrV.png" alt="vHdLrV.png"></a></p><h2 id="变量-：先定义再使用"><a href="#变量-：先定义再使用" class="headerlink" title="变量 ：先定义再使用"></a>变量 ：先定义再使用</h2><p>（变量类型）（变量标识符）<br><code>int   max</code><br><code>int   max = 0</code><em>赋予初始值</em></p><p><a href="https://imgse.com/i/vHdObT"><img src="https://s1.ax1x.com/2022/09/07/vHdObT.png" alt="vHdObT.png"></a></p><h3 id="整数型"><a href="#整数型" class="headerlink" title="整数型"></a>整数型</h3><p><strong>基本型 int</strong><br>由于内存空间不同被分成长整型和短整型。</p><ul><li>短整型 <code>short</code>  </li><li>长整型 <code>long</code>  </li><li><code>sizeof</code> 用于计算某种类型的对象在内存中所占的字节数    </li><li><code>int</code>  默认为 <code>signed int</code>即为有符号 <code>unsighed</code>无符号</li><li><code>0x</code> 后是十六进制数 <code>0</code> 后是八进制数</li></ul><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p><strong>浮点型=实型</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">浮点型</th><th style="text-align:left">有效值</th></tr></thead><tbody><tr><td style="text-align:left">float</td><td style="text-align:left">7位</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">15位</td></tr><tr><td style="text-align:left">long double</td><td style="text-align:left">15位</td></tr></tbody></table></div><h3 id="字符型-char"><a href="#字符型-char" class="headerlink" title="字符型(char)"></a>字符型(char)</h3><p>1.一个字符型占一个字节<br>2.存储类型与整型相同<br>3.可以与整型数据相互赋值<br>4.可以和整型一样进行运算  </p><ul><li>转义字符<br>5.ASCii码表可以用来查找字符型对应值，小写字母比大写字母多32位。</li></ul><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>存储“真” “假” 的变量<br>占一个字节<br>值只能为1或0  </p><ul><li>赋0 为0  </li><li>赋非0 为1</li></ul><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p><strong>标识符只能由字母、数字和下划线三种字符组成，且第一个字符必须为字母或者下划线，不可以与保留字相同</strong></p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>在程序运行过程中，其值保持不变的量<br>字面常量： 1 、2、4<br>符号常量：用一个标识符表示一个常量<br>类型前加上关键词 <code>const</code><br>好处： <strong>不会被修改</strong>  </p><p>常量的类型用后缀分辨<br><a href="https://imgse.com/i/vxX1Qx"><img src="https://s1.ax1x.com/2022/09/15/vxX1Qx.png" alt="vxX1Qx.png"></a></p><p><em>关于编程题的一些笔记</em></p><ul><li><code>#include&lt;bits/stdc++.h&gt;</code>万能头文件  </li><li><code>%lf</code> 双精度浮点型，也就是<code>double</code>型的格式，默认保留6位小数。<br>如：<code>double a = 1.2; printf(&quot;%lf&quot;,a); //1.200000</code>  </li><li><code>%.2lf</code>同上，不过限制了，值保留2位小数。<br>如：<code>double a = 1.2345; printf(&quot;%.2lf&quot;,a); //1.23</code>   </li><li><code>%.2f</code>表示单精度浮点型，也就是float型的格式，值保留2位小数。<br>如：<code>float a = 1.2731; printf(&quot;%.2f&quot;,a); //1.27</code></li></ul><p>在C++中可以使用<code>#include &lt;iomanip&gt;</code>作为头文件，然后<code>cout &lt;&lt; fixed &lt;&lt; setprecision(n）</code>来控制精度，其中<code>fixed</code>是小数点的意思，<code>setprecision</code>是设置精度，括号中的数表示保留几位精度输出。</p><h1 id="运算成分"><a href="#运算成分" class="headerlink" title="运算成分"></a>运算成分</h1><p>c语言中的运算符</p><p><a href="https://imgse.com/i/vzgJKI"><img src="https://s1.ax1x.com/2022/09/16/vzgJKI.png" alt="vzgJKI.png"></a></p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值<br><strong>定义变量不能连等</strong>  </p><ul><li>要点一 : 两边类型不同<br>赋值时需要类型转换，都要转换为=左边的类型  </li><li>要点二 ：长数赋给短数<br>截取长数的低n位送给短数  </li><li>要点三 ： 短数赋给长数<br><a href="https://imgse.com/i/xk5L4g"><img src="https://s1.ax1x.com/2022/09/23/xk5L4g.png" alt="xk5L4g.png"></a></li><li>要点四 ： 符号位的赋值处理<br>直接赋值<br><strong>总结</strong><br><a href="https://imgse.com/i/xkoCQA"><img src="https://s1.ax1x.com/2022/09/23/xkoCQA.png" alt="xkoCQA.png"></a><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2>运算符，操作数，括号组成的计算式，是计算求值的基本单位 。表达式是有值的，赋值语句也不例外  。<br>复合的赋值运算：例如<code>a+=3</code>等价于<code>a= a+3</code><br>赋值时从右往左赋值  。<h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2>基本算术运算符 <code>+、-、*、/、%</code><br><code>%</code>是模运算，求余，必须是整数<br>整数运算，结果仍为整数<br>实数运算，结果都是 <code>double</code>型<br><strong>优先级</strong><br><code>()</code><br><code>* / %</code><br><code>+ -</code><br>同一级别，从左向右<br><strong>剪刀法</strong><br>从优先级最低的符号剪短，从右向左剪短，最后被剪下来的先计算<br><code>shout</code>型与<code>int</code>型计算时，<code>shout</code>会转换成<code>int</code>.<code>unsigned</code>与<code>int</code>型计算时，结果是<code>unsigned</code>型，<code>float</code>型与<code>double</code>型，结果是<code>double</code>型，<code>double</code>与<code>unsigned</code>型结果是<code>double</code>型  。<br><em>double型级别最高</em></li></ul><p><a href="https://imgse.com/i/xAQC5R"><img src="https://s1.ax1x.com/2022/09/24/xAQC5R.png" alt="xAQC5R.png"></a></p><h2 id="自增自减运算"><a href="#自增自减运算" class="headerlink" title="自增自减运算"></a>自增自减运算</h2><p><code>i++</code>与<code>++i</code>都是指<code>i=i+1</code>。  </p><ul><li><code>++i,--i</code><br> 在使用i之前，先将i的值加或减1  </li><li><code>i++,i--</code><br> 在使用i之后，再将i的值加或减1<br>将i比作书，++i先包书皮，再看，i++先看，再包书皮。<br>例；i的值为3，则</li><li><code>j = ++i</code>,<code>i = 4 ,j = 4</code>;  </li><li><code>j = i++</code>,<code>i = 4 ,j = 3</code>;<br><strong>++—号只能用于变量，不能用于表达式</strong>  <h2 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h2>[大于、小于，、大于或等于、小于或等于]的优先级高于[等于、不等于]<br>关系运算表达式的值只有真和假。<br>算术运算符<strong>高于</strong>关系运算符<strong>高于</strong>赋值运算符<br>剪刀法切优先级最低的地方<br><a href="https://imgse.com/i/xuMPoT"><img src="https://s1.ax1x.com/2022/09/30/xuMPoT.png" alt="xuMPoT.png"></a><h2 id="逻辑运算和混合运算"><a href="#逻辑运算和混合运算" class="headerlink" title="逻辑运算和混合运算"></a>逻辑运算和混合运算</h2></li><li>逻辑与 <code>&amp;&amp;</code></li><li>逻辑或 <code>||</code></li><li>逻辑非 <code>！</code><br>只有真假，0为假，非0为真。<br>一个逻辑表达式中若是包含多个逻辑运算符，则顺序为非&gt;与&gt;或。<br>逻辑运算中程序会进行取舍，有些程序不会执行。</li><li><strong>只有在必须执行下一个逻辑运算符才能求出表达式的解时，才执行该运算符！！！</strong>  </li><li>对于表达式<code>a &amp;&amp; b &amp;&amp; c</code>,只有<code>a</code>为真(非0)时，才需要判别继续的值。</li><li>对于表达式<code>a || b || c</code>,只要<code>a</code>为真(非0)时，就不必继续判断。<br>逻辑运算符两侧可以是任何类型，系统只以0或非0来判定。  <h2 id="逗号，条件，强转"><a href="#逗号，条件，强转" class="headerlink" title="逗号，条件，强转"></a>逗号，条件，强转</h2><h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3>作用：连接表达式<br>形式：表达式1，表达式2，…，表达式n<br><em>逗号运算优先级最低</em><br>先算表达式1，以此类推，<strong>整个表达式的值为表达式n的值</strong><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3>形式：表达式1<code>?</code>表达式2<code>:</code>表达式3<br>规则：若1为真，则2为表达式的值，否则3为表达式的值<br>可以用if语句代替。<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3>形式：(类型名)(表达式)<br>例：<code>(double)a</code>   将<code>a</code>的值转换为<code>double</code>类型<br><strong>强制类型转换后，被转换的量的类型没有发生变化，转换的是值</strong>。<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2>指进行二进制位的运算<br>按位与<code>(&amp;)</code>,按位或<code>(|)</code>,按位异或<code>(^)</code>,取反<code>(~)</code><br>左移运算符(&lt;&lt;)：会用于乘以2    </li></ul><p><a href="https://imgse.com/i/xjYJDU"><img src="https://s1.ax1x.com/2022/11/06/xjYJDU.png" alt="xjYJDU.png"></a></p><p>右移运算符(&gt;&gt;): 会用于除以2<br><a href="https://imgse.com/i/xuqXlR"><img src="https://s1.ax1x.com/2022/10/01/xuqXlR.png" alt="xuqXlR.png"></a></p><p>作用：“按位与”、“按位或”取一个数中某些指定位;“异或”是特定位反转，交换两个值。<br><a href="https://imgse.com/i/xuqOp9"><img src="https://s1.ax1x.com/2022/10/01/xuqOp9.png" alt="xuqOp9.png"></a></p><h1 id="控制成分"><a href="#控制成分" class="headerlink" title="控制成分"></a>控制成分</h1><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><p><strong>1.if语句</strong></p><ul><li><code>if()</code>可以是任意的数值类型</li><li>若表达式的值为0，按照假来处理</li><li>若表达式的值为非0，按照真来处理    </li></ul><p><strong>2.switch语句</strong><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch(表达式)</span><br><span class="line">&#123;</span><br><span class="line">  case 常量表达式1: 语句1;</span><br><span class="line">  case 常量表达式2: 语句2;</span><br><span class="line">  ...</span><br><span class="line">  case 常量表达式n: 语句n;</span><br><span class="line">  default: 语句n+1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>计算规则：当表达式的值与后面某一个<code>case</code>后面的常量表达式的值相等时，就执行此<code>case</code>后面的语句，若所有的<code>case</code>中的常量表达式的值都没有与表达式的值匹配的，就执行<code>default</code>后面的语句。<br>例：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">  char grade = &#x27;a&#x27;;</span><br><span class="line">  cin &gt;&gt; grade;</span><br><span class="line">  switch(grade)</span><br><span class="line">  &#123;</span><br><span class="line">    case&#x27;a&#x27;:cout &lt;&lt;&quot;85~100&quot; &lt;&lt; endl;</span><br><span class="line">    case&#x27;b&#x27;:cout &lt;&lt;&quot;70~84&quot; &lt;&lt; endl;</span><br><span class="line">    case&#x27;c&#x27;:cout &lt;&lt;&quot;60~69&quot; &lt;&lt; endl;</span><br><span class="line">    case&#x27;d&#x27;:cout &lt;&lt;&quot;&lt;60&quot; &lt;&lt; endl;</span><br><span class="line">    default:cout &lt;&lt;&quot;error&quot; &lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面的程序，当输入<code>a</code>时，我们想得到<code>85~100</code>,但是打印的结果为下,原因是按照<code>switch</code>的语法,将会输出每条语句。解决方法为，在每条语句后加上<code>break</code>,即为跳出当前循环。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">85~100</span><br><span class="line">70~84</span><br><span class="line">60~69</span><br><span class="line">&lt;60</span><br><span class="line">error</span><br></pre></td></tr></table></figure><br>改正后如下：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">  char grade = &#x27;a&#x27;;</span><br><span class="line">  cin &gt;&gt; grade;</span><br><span class="line">  switch(grade)</span><br><span class="line">  &#123;</span><br><span class="line">    case&#x27;a&#x27;:cout &lt;&lt;&quot;85~100&quot; &lt;&lt; endl; break;</span><br><span class="line">    case&#x27;b&#x27;:cout &lt;&lt;&quot;70~84&quot; &lt;&lt; endl; break;</span><br><span class="line">    case&#x27;c&#x27;:cout &lt;&lt;&quot;60~69&quot; &lt;&lt; endl; break;</span><br><span class="line">    case&#x27;d&#x27;:cout &lt;&lt;&quot;&lt;60&quot; &lt;&lt; endl; break;</span><br><span class="line">    default:cout &lt;&lt;&quot;error&quot; &lt;&lt;endl; break;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注意：<code>default</code>语句可以出现在前面，但是需要<code>break</code>作为辅助。  </p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>1.<code>for</code>语句<br>形式：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(表达式1；表达式2；表达式3)</span><br><span class="line">语句；</span><br></pre></td></tr></table></figure><br>注意表达式之间用分号<code>;</code>分开<br>执行过程如下：</p><p><a href="https://imgse.com/i/xKlIud"><img src="https://s1.ax1x.com/2022/10/01/xKlIud.png" alt="xKlIud.png"></a>  </p><p>2.<code>while</code>语句<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(条件语句)</span><br><span class="line">&#123;</span><br><span class="line">  执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>例：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">  int i, sum = 0;</span><br><span class="line">  i = 1;</span><br><span class="line">  while(i &lt;= 100)</span><br><span class="line">  &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; sum &lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>以上是用来求<code>1~100</code>的和的程序，结束后<code>i=101</code><br>while语句的作用例题:</p><ul><li>小红10岁，父亲33岁，问多少年后，父亲的年龄是小红的二倍？<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">  int ageHong = 10, ageFather = 33, count = 0;</span><br><span class="line">  while(2 * ageHong != ageFather)</span><br><span class="line">  &#123;</span><br><span class="line">    ageHong++;</span><br><span class="line">    ageFather++;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; count;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>count</code>即为最终的解。</li></ul><p>3.<code>Do...While</code>语句<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">  执行语句</span><br><span class="line">&#125;while(条件语句)</span><br></pre></td></tr></table></figure><br><strong><code>do while</code>是先去做。</strong><br>例:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">  int i, sum = 0;</span><br><span class="line">  i = 1;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;while(i &lt;= 100);</span><br><span class="line">  cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>例:输入一个数，然后反向输出,并且输出这个数的位数。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;\</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">  int num;</span><br><span class="line">  int count = 0;</span><br><span class="line">  cin &gt;&gt; num;</span><br><span class="line">  do&#123;</span><br><span class="line">    cout &lt;&lt; num % 10;</span><br><span class="line">    num = num / 10;</span><br><span class="line">    count++</span><br><span class="line">  &#125;while(num != 0);</span><br><span class="line">  cout &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="转向控制语句"><a href="#转向控制语句" class="headerlink" title="转向控制语句"></a>转向控制语句</h2><p>1.<code>break</code>语句</p><ul><li><code>switch</code>,<code>while</code>,<code>do..while</code>,<code>for</code>语句中都可以使用<code>break</code></li><li>跳出<code>switch</code>语句或者内层循环，继续执行逻辑上的下一条语句</li><li><code>break</code>只能跳出一层循环  </li></ul><p>2.<code>continue</code>语句</p><ul><li>用于循环语句中</li><li>结束本次循环</li><li>进入到下一次的循环  <h2 id="Goto语句"><a href="#Goto语句" class="headerlink" title="Goto语句"></a><code>Goto</code>语句</h2></li><li>无条件转向语句  </li><li>形式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语句标号：</span><br><span class="line">`goto` 语句标号；</span><br></pre></td></tr></table></figure></li><li>语句标号：标识符，定名规则与变量名相同；<br><strong>不要使用<code>goto</code>语句</strong>  <h1 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2>作用：存放一串数<br>使用方法：<code>int a[3] = &#123;1,2,3&#125;</code><br>数组的定义： 类型 + 数组名[常量表达式]<br>例：</li></ul><ul><li><code>float  sheep[10]</code>;  </li><li><code>int   a2001[1000]</code>;<br>数组名与变量名相同，仍然是以下划线或者字母开头<br><code>setw(n)</code>函数用于设置字段宽度，n表示宽度，用数字表示，需要头文件<code>&lt;iomanip&gt;</code><br><strong>强调</strong></li></ul><ul><li>数组下标从<code>0</code>开始</li><li><code>[]</code>内为常量表达式</li><li>数组输出时，不可以直接通过输入数组名进行输出，要使用循环语句<br>数组输出语句如下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a[10]=&#123;1,2,3&#125;; //初始化前三个元素，其余元素为0</span><br><span class="line"> </span><br><span class="line">for( int i=0;i&lt;10;i++ )</span><br><span class="line"> </span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">//输出结果：1 2 3 0 0 0 0 0 0 0</span><br></pre></td></tr></table></figure><a href="https://imgse.com/i/xMwJw8"><img src="https://s1.ax1x.com/2022/10/02/xMwJw8.png" alt="xMwJw8.png"></a><br>如果想定义个长度可变的数组，有以下解决方法(即为定义常量):  </li><li>使用<code>const int i</code>,再把<code>i</code>放入<code>[]</code>中</li><li>使用<code>#define N</code> 数字，将<code>N</code>放入<code>[]</code>中<h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3></li><li>数组一定要有初始化</li><li>可以只有初始化的值，而不写常量表达式，例如<code>int a[] = &#123;1,2,3&#125;</code>  </li><li>若只给出了部分元素的初始化，那么其他的元素自动赋值为<code>0</code>(即一种对数组全部赋值为<code>0</code>的方法)  <h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><a href="https://imgse.com/i/xcvDnx"><img src="https://s1.ax1x.com/2022/10/22/xcvDnx.png" alt="xcvDnx.png"></a><br>定义方式；<code>int a[3][4]</code><br>可以理解为定义了三个一维数组<br>初始化方法：<br><em>可以不输入前面的行数</em></li></ul><ol><li><code>int a[3][4] = &#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;&#125;</code>  </li><li><code>int a[3][4] = &#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;</code></li><li>对部分元素初始化，<code>int a[][4] = &#123;&#123;1&#125;,&#123;0,6&#125;,&#123;0,0,11&#125;&#125;</code>,仍然是其他元素自动赋值为<code>0</code></li><li>对数组初始化，需要准确写出行数和列数，<code>int a[3][4] = &#123;0&#125;</code><h2 id="三维数组"><a href="#三维数组" class="headerlink" title="三维数组"></a>三维数组</h2>定义方式：<code>int a[5][3][4]</code><br><a href="https://imgse.com/i/xgDOHS"><img src="https://s1.ax1x.com/2022/10/23/xgDOHS.png" alt="xgDOHS.png"></a><h2 id="数组的作用"><a href="#数组的作用" class="headerlink" title="数组的作用"></a>数组的作用</h2>1.数字统计<br>例：输入20个0~9之间的整数，请你统计每个数在输入数列中出现的次数。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头文件</span><br><span class="line">int num, count[10];</span><br><span class="line">for(int i = 0; i &lt; 20; i++)</span><br><span class="line">&#123;</span><br><span class="line"> cin &gt;&gt; num;</span><br><span class="line"> for(int j = 0; j &lt; 10; j++)</span><br><span class="line"> &#123;</span><br><span class="line">   if(num == j)</span><br><span class="line">   count[j]++;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line"> if(count[i] != 0)</span><br><span class="line"> cout &lt;&lt; i &lt;&lt; &quot;输入了&quot; &lt;&lt; conut[i] &lt;&lt; &quot;次&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure>简化为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int num, count[10] = &#123;0&#125;;</span><br><span class="line">for(int i = 1; i &lt;= 20; i++)</span><br><span class="line">&#123;</span><br><span class="line">  cin &gt;&gt; num;</span><br><span class="line">  switch(num)</span><br><span class="line">  &#123;</span><br><span class="line">    case 0:count[0]++:break;</span><br><span class="line">    case 1:count[1]++:break;</span><br><span class="line">    case 2:count[2]++:break;</span><br><span class="line">    case 3:count[3]++:break;</span><br><span class="line">    case 4:count[4]++:break;</span><br><span class="line">    case 5:count[5]++:break;</span><br><span class="line">    case 6:count[6]++:break;</span><br><span class="line">    case 7:count[7]++:break;</span><br><span class="line">    case 8:count[8]++:break;</span><br><span class="line">    case 9:count[9]++:break; </span><br><span class="line">  &#125;</span><br><span class="line">  for(int i = 0; i &lt; 10; i++)</span><br><span class="line">   &#123;</span><br><span class="line">    if(count[i] != 0)</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; &quot;输入了&quot; &lt;&lt; conut[i] &lt;&lt; &quot;次&quot; &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>再次简化为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int num, count[10] = &#123;0&#125;;</span><br><span class="line">for(int i = 0; i &lt; 20; i++)</span><br><span class="line">&#123;</span><br><span class="line">  cin &gt;&gt; num;</span><br><span class="line">  count[num]++;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 0; i &lt; 10; i++)</span><br><span class="line">   &#123;</span><br><span class="line">    if(count[i] != 0)</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; &quot;输入了&quot; &lt;&lt; conut[i] &lt;&lt; &quot;次&quot; &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>2.找出素数<br>例：输出100以内所有的素数<br><strong>不是挑选出所有素数，而是筛掉所有的合数</strong>,埃拉托斯坦尼筛子<br><a href="https://imgse.com/i/x203o4"><img src="https://s1.ax1x.com/2022/10/24/x203o4.png" alt="x203o4.png"></a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头文件</span><br><span class="line">int sum = 0, a[100] = &#123;0&#125;;</span><br><span class="line">for(int i = 2; i &lt; 100; i++)</span><br><span class="line">&#123;</span><br><span class="line">  sum = i;</span><br><span class="line">  while(sum &lt; 100)</span><br><span class="line">  &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    if(sum &lt; 100)</span><br><span class="line">    a[sum] = 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 2; i &lt; 100; i++)</span><br><span class="line">&#123;</span><br><span class="line">  if(a[i] = 0)</span><br><span class="line">  cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>优化方法：不需要用所有数自我相加到<code>100</code>，而是用<code>2, 3, 4,...,c</code>自我相加就可以<br>根据初等数论，若<code>n</code>为合数，则<code>n</code>的最小正因数<code>c</code>满足：</p><script type="math/tex; mode=display">1 < c \leq \sqrt{n}</script><p><code>sqrt(n)</code>是<code>&lt;cmath&gt;</code>里面的函数，作用是求平方根,<code>n</code>必须是<code>double</code>类型的数<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头文件</span><br><span class="line">int sum = 0,a[100] = &#123;a&#125;;</span><br><span class="line">for(int i = 2; i &lt; sqrt(100.0); i++)</span><br><span class="line">&#123;</span><br><span class="line">  sum = i;</span><br><span class="line">  while(sum &lt; 100)</span><br><span class="line">  &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    if(sum &lt; 100)</span><br><span class="line">    a[sum] = 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 2; i &lt; 100; i++)</span><br><span class="line">&#123;</span><br><span class="line">  if(a[i] = 0)</span><br><span class="line">  cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>又因为<code>2</code>所标定的数，<code>4</code>就不需要重复标定一次，因此进一步简化：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头文件</span><br><span class="line">int sum = 0,a[100] = &#123;a&#125;;</span><br><span class="line">for(int i = 2; i &lt; sqrt(100.0); i++)</span><br><span class="line">&#123;</span><br><span class="line">  sum = i;</span><br><span class="line">  if(a[sum] == 0)</span><br><span class="line">  &#123;</span><br><span class="line">  while(sum &lt; 100)</span><br><span class="line">  &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    if(sum &lt; 100)</span><br><span class="line">    a[sum] = 1;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 2; i &lt; 100; i++)</span><br><span class="line">&#123;</span><br><span class="line">  if(a[i] = 0)</span><br><span class="line">  cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符数组与字符串"><a href="#字符数组与字符串" class="headerlink" title="字符数组与字符串"></a>字符数组与字符串</h2><ul><li>如果只初始化了部分字符数组，其他元素将自动复制为<code>\0</code>，同样的，如果初始化了全部数组，也不需要指定数组大小。    </li><li>用数组定义字符串，可以用<code>char c[] = &quot;china&quot;</code>，注意此时该数组有六个元素，因为同等内容的字符串在末尾要比字符数组多一个<code>\0</code>。</li><li>所有以<code>\0</code>结尾的字符数组都可以看作字符串。<br><strong>注意</strong><br>只可以在数组定义并且初始化的时候，对数组赋值一个字符串或者字符数组，不能用赋值语句将一个字符串常量或字符数组直接赋给另一个字符数组。<br>即 <code>char c[6] = &quot;china&quot;</code>是合法的，但是<code>str1[] = &quot;china&quot;</code>,<code>str1 = &quot;china&quot;</code>,<code>str2 = str1</code>都是不合法的。<br>字符数组赋值方法(输出时可以直接写数组名称)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  char str1[] = &quot;c++ language&quot;,str2[20];</span><br><span class="line">  int i = 0;</span><br><span class="line">  while(str1[i] != &#x27;\0&#x27;)</span><br><span class="line">  &#123;</span><br><span class="line">    str2[i] = str1[i];</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  str2[i] = &#x27;\0&#x27;;</span><br><span class="line">  cout &lt;&lt; str1;</span><br><span class="line">  cout &lt;&lt; str2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符-字符数组-字符串的输入与输出"><a href="#字符-字符数组-字符串的输入与输出" class="headerlink" title="字符/字符数组/字符串的输入与输出"></a>字符/字符数组/字符串的输入与输出</h2><em>输入缓冲区</em><h3 id="一个字符的输入"><a href="#一个字符的输入" class="headerlink" title="一个字符的输入"></a>一个字符的输入</h3></li></ul><ol><li>直接用<code>cin</code>输入字符<br>只会把空格与回车当成间隔符，即跳过空格与跳过回车。输入ctrl+z结束输入。</li><li>用<code>cin.get()</code>函数输入字符<br>可以用于读取一个字符<br>两种形式：<ul><li>cin.get()</li><li>cin.get(char)<br>使用方法：<code>c = cin.get()</code>,<code>EOF</code>是文件结束标志，同样可以用ctrl+z结束<br><em>能读取空格和回车</em></li></ul></li><li>用<code>cin.get(char)</code>输入字符</li><li>用<code>getchar()</code>输入字符<br>使用方法：<code>c = getchar()</code><br><em>不会跳过任何字符</em>   <h3 id="一串字符的输出与输入"><a href="#一串字符的输出与输入" class="headerlink" title="一串字符的输出与输入"></a>一串字符的输出与输入</h3>输出：可以用<code>cout</code>输出字符数组，当碰到<code>\0</code>时停下，因此想输出的字符数组最后要以<code>\0</code>结尾。<br>输入：</li><li>直接用<code>cin</code>输入字符串，程序会把空格或回车作为不同字符串的间隔标志</li><li>用<code>cin.get()</code>函数输入<br>使用方法：<br><a href="https://imgse.com/i/xgb4L8"><img src="https://s1.ax1x.com/2022/10/23/xgb4L8.png" alt="xgb4L8.png"></a></li><li>用<code>cin.getline()</code>函数输入<br>使用方法与<code>cin.get()</code>函数相同<br><strong>区别</strong><br><code>getline</code>遇到终止标志字符时结束，缓冲区指针移到终止标志字符之后；<br><code>get</code>遇到终止字符是停止读取，指针不移动。<br><a href="https://imgse.com/i/xgqCFJ"><img src="https://s1.ax1x.com/2022/10/23/xgqCFJ.png" alt="xgqCFJ.png"></a></li></ol><p><strong>注意问题</strong><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  char a[10][10];</span><br><span class="line">  int n = 0;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  for(int i = 0;i &lt; n;i++)</span><br><span class="line">    cin.getline(a[i],10)</span><br><span class="line">  for(int i = 0;i &lt; n;i++)</span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>以上程序在运行后，会出现输入的元素少于<code>n</code>时，就开始了输出，原因是当输入<code>n</code>后，指针位置在<code>n</code>的后方，但是在回车的前方，因此函数<code>getline</code>第一次运行作用只是跳过了第一个回车，导致缺少了一次输入，解决方法如下：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cin &gt;&gt; n;</span><br><span class="line">cin.get();</span><br></pre></td></tr></table></figure><br>添加<code>cin.get</code>后，读走换行的回车符。</p><h2 id="字符串的应用"><a href="#字符串的应用" class="headerlink" title="字符串的应用"></a>字符串的应用</h2><p><code>&lt;string&gt;</code>中<code>strcat</code>用于拼接两个字符串，<code>strcpy</code>复制字符串到另一个字符串  </p><ol><li>字符串加密<br>例：输入一个字符串，把每个字符变成它后续字符，如果是’Z’或者’z’，则变成’A’或者’a’。空格则不变。然后将变换后的字符串输出（要求能够连续输入）。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> //头文件</span><br><span class="line"> char str[200];</span><br><span class="line"> while(cin.getline(str,200))</span><br><span class="line"> &#123;</span><br><span class="line">  for(int i = 0; str[i] != &#x27;\0&#x27;; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    if(str[i] == &#x27;Z&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">      str[i] = &#x27;A&#x27;;</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    if(str[i] == &#x27;z&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">      str[i] = &#x27;a&#x27;;</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    if(str[i] == &#x27; &#x27;)</span><br><span class="line">    continue;</span><br><span class="line">    str[i]++;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure></li><li>字符串连接<br>例：输入两个字符串，将其中较短的串接到较长的串的后面。<br>不能使用系统函数<code>strcat</code>，每个输入的串的长度不超过<code>20</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头文件</span><br><span class="line">int len1,len2;char str1[40],str2[40];</span><br><span class="line">cin.getline(str1,20);cin.getline(str2,20);</span><br><span class="line">for(len1 = 0;str1[len1] != &#x27;\0&#x27;;len1++)</span><br><span class="line">for(len2 = 0;str2[len2] != &#x27;\0&#x27;;len2++)</span><br><span class="line">if(len1 &gt;= len2)</span><br><span class="line">&#123;</span><br><span class="line">  for(len2 = 0; str2[len2] != &#x27;\0&#x27;; len2++)</span><br><span class="line">  str1[len1++] = str2[len2];</span><br><span class="line">  str1[len1] = &#x27;\0&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">  for(len1 = 0; str2[len1] != &#x27;\0&#x27;; len1++)</span><br><span class="line">  str2[len2++] = str1[len1];</span><br><span class="line">  str2[len2] = &#x27;\0&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>统计单词数<br>例：输入一个英文句子（不超过80个字母），统计器中有多少个单词，单词之间用空格分开。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头文件</span><br><span class="line">char str[80];</span><br><span class="line">int num = 0, flag = 0;</span><br><span class="line">cin.getline(str,80);</span><br><span class="line">for(int i = 0; str[i] != &#x27;\0&#x27;; i++)</span><br><span class="line">&#123;</span><br><span class="line">  if(str[i] == &#x27; &#x27;)</span><br><span class="line">  flag = 0;</span><br><span class="line">  else if(flag == 0)</span><br><span class="line">  &#123;</span><br><span class="line">    flag = 1;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  cout &lt;&lt; num;</span><br><span class="line">  return 0;</span><br></pre></td></tr></table></figure></li></ol><h1 id="写题时的笔记"><a href="#写题时的笔记" class="headerlink" title="写题时的笔记"></a>写题时的笔记</h1><p><code>tolower()</code>函数，作用是将给定字母转为小写字母。<br><code>&lt;string.h&gt;</code>中<code>strlen()</code>函数，作用是计算字符串数组的长度，直到空结束字符，但不包括空结束字符。<br><code>&lt;algorithm&gt;</code>中<code>sort()</code>函数，用来对数组进行排序，括号内可接受两个或三个参数，两个参数为升序排序。例：对数组<code>a[7] =&#123;1,4,2,3,6,8,5&#125;</code>排序为<code>sort(a,a+7)</code>。<br><code>&lt;cmath&gt;</code>中<code>pow(double x, double y)</code>返回<code>x</code>的 <code>y</code>次幂,<code>sqrt(double x)</code> 返回 <code>x</code>的平方根。例：<code>pow(8.0, 3)</code>指<code>8</code>的<code>3</code>次幂。<strong>注意一定要是浮点数</strong><br><code>&lt;cmath&gt;</code>中<code>ceil</code>函数，该函数可以将一个浮点数进行<strong>向上舍入</strong>(向上取整，所谓向上舍入，就是舍去小数部分，得到的最小整数比原数大或相等)</p><blockquote><p>——10.25</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo d命令错误的解决方法</title>
      <link href="/2022/08/31/hexo-d%E5%91%BD%E4%BB%A4%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2022/08/31/hexo-d%E5%91%BD%E4%BB%A4%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="确认hexo-deployer-git的模块是否下载成功"><a href="#确认hexo-deployer-git的模块是否下载成功" class="headerlink" title="确认hexo-deployer-git的模块是否下载成功"></a>确认hexo-deployer-git的模块是否下载成功</h3><p>复制下面这行代码到命令行。</p><p>‘npm install hexo-deployer-git —save’</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改 _config.yml文件"></a>修改 _config.yml文件</h3><p><strong>注意</strong> 我使用win11系统打开该文件时，在type后面有单引号，应将单引号删去，也可以直接复制下面的代码。<br>1.将GitHub配置地址的方式从http改为ssh<br>2.将branch后的master换成main<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git </span><br><span class="line">  repository: git@github.com:(your name)/(your name).github.io.git</span><br><span class="line">  branch: main </span><br></pre></td></tr></table></figure></p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><h3 id="在命令行中写入你的github名称与注册邮箱"><a href="#在命令行中写入你的github名称与注册邮箱" class="headerlink" title="在命令行中写入你的github名称与注册邮箱"></a>在命令行中写入你的github名称与注册邮箱</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;xxx&quot;</span><br><span class="line">git config --global user.name &quot;xxx&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇</title>
      <link href="/2022/08/29/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/08/29/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>8/29  我的第一个个人博客！！！</p><script type="math/tex; mode=display">f(x)=\int_{-\infty}^{\infty}\hat{f}(\xi)e^{2\pi i \xi x}d\xi</script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
